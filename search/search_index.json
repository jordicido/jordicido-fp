{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jordi Cido - FP","text":"<p>En este repositorio se encuentran los apuntes de las asignaturas del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW) que he cursado en diferentes centros de estudios de formaci\u00f3n profesional.</p>"},{"location":"#damdaw","title":"DAM/DAW","text":""},{"location":"#entornos-de-desarrollo","title":"Entornos de desarrollo","text":"<p>Introducci\u00f3n a Git</p>"},{"location":"EDD/","title":"DAM/DAW","text":"<p>En este espacio se encuentran los apuntes de la asignatura de Entornos de Desarrollo (EDD) del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW).</p>"},{"location":"EDD/#ut1-desarrollo-de-software","title":"UT1 - Desarrollo de software.","text":""},{"location":"EDD/#ut2-instalacion-y-uso-de-entornos-de-desarrollo","title":"UT2 - Instalaci\u00f3n y uso de entornos de desarrollo.","text":""},{"location":"EDD/#ut3-diseno-y-realizacion-de-pruebas","title":"UT3 - Dise\u00f1o y realizaci\u00f3n de pruebas.","text":""},{"location":"EDD/#ut4-optimizacion-y-documentacion","title":"UT4 - Optimizaci\u00f3n y documentaci\u00f3n.","text":""},{"location":"EDD/#ut5-elaboracion-de-diagramas-de-clases","title":"UT5 - Elaboraci\u00f3n de diagramas de clases.","text":""},{"location":"EDD/#ut6-elaboracion-de-diagramas-de-comportamiento","title":"UT6 - Elaboraci\u00f3n de diagramas de comportamiento.","text":""},{"location":"EDD/introduccion_git/","title":"Conceptos b\u00e1sicos de Git","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear cambios en el c\u00f3digo fuente a lo largo del tiempo. A continuaci\u00f3n se presentan algunos conceptos b\u00e1sicos de Git:</p> <ul> <li>Repositorio (repo): Un repositorio es un espacio de almacenamiento donde se guarda el c\u00f3digo fuente y su historial de cambios. Puede ser local (en tu m\u00e1quina) o remoto (en un servidor).</li> <li>Commit: Un commit es una instant\u00e1nea del estado del c\u00f3digo en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.</li> <li>Branch: Una rama es una l\u00ednea de desarrollo independiente dentro de un repositorio. Permite trabajar en diferentes caracter\u00edsticas o correcciones de errores sin afectar la rama principal (generalmente llamada <code>main</code> o <code>master</code>).</li> <li>Merge: Un merge es el proceso de combinar dos ramas diferentes en una sola. Esto se utiliza para integrar cambios de una rama a otra.</li> <li>Clone: Clonar un repositorio significa crear una copia local de un repositorio remoto. Esto te permite trabajar en el c\u00f3digo sin necesidad de estar conectado a Internet.</li> <li>Push: Hacer un push significa enviar tus commits locales a un repositorio remoto. Esto actualiza el repositorio remoto con tus cambios.</li> <li>Pull: Hacer un pull significa descargar los cambios del repositorio remoto a tu copia local. Esto actualiza tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</li> </ul>"},{"location":"EDD/introduccion_git/#acciones-basicas-de-git","title":"Acciones b\u00e1sicas de Git","text":""},{"location":"EDD/introduccion_git/#crear-un-repositorio-local","title":"Crear un repositorio local","text":"<p>Para crear un nuevo repositorio local, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas crear el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git init nombre_del_repositorio\n</code></pre> <p>Esto crear\u00e1 un nuevo directorio llamado <code>nombre_del_repositorio</code> y lo inicializar\u00e1 como un repositorio Git. 4. Navega al nuevo directorio:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Crea un archivo README.md para describir tu proyecto:</li> </ol> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> <ol> <li>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n (staging area):</li> </ol> <pre><code>git add README.md\n</code></pre> <ol> <li>Realiza tu primer commit:</li> </ol> <pre><code>git commit -m \"Primer commit: agregar README.md\"\n</code></pre> <ol> <li>Ahora tienes un repositorio local con un commit inicial.</li> </ol>"},{"location":"EDD/introduccion_git/#crear-un-repositorio-remoto","title":"Crear un repositorio remoto","text":"<p>Para crear un repositorio remoto, puedes utilizar plataformas como GitHub, GitLab o Bitbucket. A continuaci\u00f3n se muestra c\u00f3mo crear un repositorio en GitHub:</p> <ol> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear nuevo repositorio\".</li> <li>Completa el formulario con el nombre del repositorio, la descripci\u00f3n y la visibilidad (p\u00fablico o privado).</li> <li>Haz clic en \"Create repository\" para crear el repositorio.</li> <li>Una vez creado, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>Vuelve a la terminal y navega al directorio de tu repositorio local.</li> <li>Agrega el repositorio remoto utilizando el siguiente comando:</li> </ol> <pre><code>git remote add origin URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL que copiaste de GitHub. 8. Ahora puedes hacer un push de tu commit inicial al repositorio remoto:</p> <pre><code>git push -u origin main\n</code></pre> <p>Esto enviar\u00e1 tus cambios al repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</p>"},{"location":"EDD/introduccion_git/#clonar-un-repositorio-remoto","title":"Clonar un repositorio remoto","text":"<p>Para clonar un repositorio remoto, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas clonar el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git clone URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL del repositorio remoto que deseas clonar. 4. Esto crear\u00e1 una copia local del repositorio remoto en tu m\u00e1quina. 5. Navega al directorio del repositorio clonado:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Ahora puedes trabajar en el c\u00f3digo y realizar commits como lo har\u00edas en un repositorio local.</li> </ol>"},{"location":"EDD/introduccion_git/#push-y-pull","title":"Push y Pull","text":"<p>Para enviar tus cambios al repositorio remoto, utiliza el comando <code>git push</code>:</p> <pre><code>git push origin main\n</code></pre> <p>Esto enviar\u00e1 tus commits locales a la rama <code>main</code> del repositorio remoto. Para descargar los cambios del repositorio remoto, utiliza el comando <code>git pull</code>:</p> <pre><code>git pull origin main\n</code></pre> <p>Esto actualizar\u00e1 tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</p>"},{"location":"EDD/introduccion_git/#crear-una-rama","title":"Crear una rama","text":"<p>Para crear una nueva rama, utiliza el siguiente comando:</p> <pre><code>git branch nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre que desees para la nueva rama. Esto crear\u00e1 una nueva rama basada en la rama actual. Para cambiar a la nueva rama, utiliza el siguiente comando:</p> <pre><code>git checkout nombre_de_la_rama\n</code></pre> <p>Esto cambiar\u00e1 tu entorno de trabajo a la nueva rama.</p>"},{"location":"EDD/introduccion_git/#hacer-un-merge","title":"Hacer un merge","text":"<p>Para combinar los cambios de una rama en otra, primero aseg\u00farate de estar en la rama a la que deseas fusionar los cambios. Luego, utiliza el siguiente comando:</p> <pre><code>git merge nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre de la rama que deseas fusionar. Esto combinar\u00e1 los cambios de la rama especificada en la rama actual.</p>"},{"location":"EDD/introduccion_git/#comandos-utilizados","title":"Comandos utilizados","text":"<pre><code># Inicializar un nuevo repositorio\ngit init nombre_del_repositorio\n# Navegar al directorio del repositorio\ncd nombre_del_repositorio\n# Crear un archivo README.md\necho \"# Mi Proyecto\" &gt; README.md\n# Agregar el archivo al \u00e1rea de preparaci\u00f3n\ngit add README.md\n# Realizar un commit\ngit commit -m \"Primer commit: agregar README.md\"\n# Agregar el repositorio remoto\ngit remote add origin URL_DEL_REPOSITORIO\n# Hacer un push al repositorio remoto\ngit push -u origin main\n# Clonar un repositorio remoto\ngit clone URL_DEL_REPOSITORIO\n# Cambiar a una rama\ngit checkout nombre_de_la_rama\n# Crear una nueva rama\ngit branch nombre_de_la_rama\n# Hacer un merge de una rama\ngit merge nombre_de_la_rama\n# Hacer un pull del repositorio remoto\ngit pull origin main\n# Hacer un push al repositorio remoto\ngit push origin main\n</code></pre>"},{"location":"EDD/introduccion_git/#ejercicios-propuestos","title":"Ejercicios propuestos","text":"<p>Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</p> <p>Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p> <p>Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p> <p>Pr\u00e1ctica 4: Crear una nueva rama, realizar cambios y hacer un merge con la rama principal.</p>"},{"location":"EDD/introduccion_git/#conclusion","title":"Conclusi\u00f3n","text":"<p>Git es una herramienta poderosa para el control de versiones y la colaboraci\u00f3n en proyectos de software. Con estos conceptos b\u00e1sicos, puedes comenzar a utilizar Git para gestionar tu c\u00f3digo y colaborar con otros desarrolladores. A medida que te familiarices con Git, podr\u00e1s explorar caracter\u00edsticas m\u00e1s avanzadas como rebase, cherry-pick y resoluci\u00f3n de conflictos.</p>"},{"location":"EDD/introduccion_git/#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Git</li> <li>GitHub Guides</li> <li>Pro Git Book</li> <li>Git Cheat Sheet</li> <li>Git Immersion</li> <li>Learn Git Branching</li> </ul>"},{"location":"EDD/introduccion_git_prac1/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 1","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a crear un nuevo repositorio local, realizar commits y entender la estructura b\u00e1sica de un repositorio Git. Aseg\u00farate de tener Git instalado en tu sistema antes de comenzar.</p>"},{"location":"EDD/introduccion_git_prac1/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un nuevo repositorio local.</li> <li>Realizar commits de archivos.</li> <li>Comprender la estructura b\u00e1sica de un repositorio Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener acceso a la l\u00ednea de comandos (terminal).</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio local</p> Soluci\u00f3n <p>Abre la terminal y navega al directorio donde deseas crear el nuevo repositorio. Luego, ejecuta el siguiente comando:</p> <pre><code>git init mi_proyecto\n</code></pre> <p>Reemplaza <code>mi_proyecto</code> con el nombre que desees para tu nuevo repositorio. Esto crear\u00e1 un nuevo directorio llamado <code>.git</code> en el directorio actual, que contendr\u00e1 todos los archivos y configuraciones necesarias para el repositorio Git.</p> </li> <li> <p>Navega al directorio del repositorio</p> Soluci\u00f3n <p>Cambia al directorio del nuevo repositorio utilizando el siguiente comando:</p> <pre><code>cd mi_proyecto\n</code></pre> </li> <li> <p>Crea un archivo README.md</p> Soluci\u00f3n <p>Crea un archivo README.md para documentar tu proyecto. Puedes usar cualquier editor de texto o el siguiente comando:</p> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> </li> <li> <p>Agrega el archivo al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <p>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n utilizando el siguiente comando:</p> <pre><code>git add README.md\n</code></pre> </li> <li> <p>Realiza un commit con el mensaje \"commit inicial\"</p> Soluci\u00f3n <p>Realiza un commit de los cambios utilizando el siguiente comando:</p> <pre><code>git commit -m \"commit inicial\"\n</code></pre> </li> <li> <p>Visualiza el historial de commits</p> Soluci\u00f3n <p>Para ver el historial de commits, utiliza el siguiente comando:</p> <pre><code>git log\n</code></pre> <p>Esto mostrar\u00e1 una lista de todos los commits realizados en el repositorio, junto con sus mensajes y hashes.</p> </li> </ol>"},{"location":"EDD/introduccion_git_prac1/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"</code></pre>"},{"location":"EDD/introduccion_git_prac1/#configura-tus-credenciales-de-git","title":"Configura tus credenciales de Git","text":"<p>Para que Git pueda identificarte como autor de los commits, es importante configurar tus credenciales. Puedes hacerlo ejecutando los siguientes comandos en la terminal:</p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tucorreo@ejemplo.com\"\n</code></pre> <p>Esto configurar\u00e1 tu nombre y correo electr\u00f3nico globalmente para todos los repositorios en tu m\u00e1quina. Si deseas configurarlos solo para un repositorio espec\u00edfico, omite la opci\u00f3n <code>--global</code>.</p>"},{"location":"EDD/introduccion_git_prac1/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>Comprender la estructura interna de un repositorio Git local es fundamental para aprovechar al m\u00e1ximo esta herramienta de control de versiones. Un repositorio Git se encuentra generalmente en un directorio .git en la ra\u00edz de tu proyecto. A continuaci\u00f3n, se detallan sus componentes principales:\u200b</p> <ul> <li>objects/: Almacena todo el contenido de tus   archivos, commits, \u00e1rboles y etiquetas. Cada objeto se identifica mediante un hash SHA-1, lo que garantiza la integridad de los datos.\u200b</li> <li>refs/: Contiene referencias a objetos commit, incluyendo ramas (refs/heads/), etiquetas (refs/tags/) y ramas remotas (refs/remotes/). Estas referencias ayudan a Git a rastrear diversos puntos en la historia de tu proyecto.\u200b</li> <li>HEAD: Es un archivo que indica la rama o commit actual en el que se basa tu directorio de trabajo. Informa a Git qu\u00e9 utilizar como padre para tu pr\u00f3ximo commit.\u200b</li> <li>index: Tambi\u00e9n conocido como \u00e1rea de preparaci\u00f3n o \"staging area\", este archivo binario contiene una lista ordenada de nombres de ruta, cada uno con permisos y el hash SHA-1 de un objeto blob. Sirve como intermediario entre tu directorio de trabajo y el repositorio, permiti\u00e9ndote acumular un conjunto de cambios para confirmar juntos.\u200b</li> <li>config: El archivo de configuraci\u00f3n principal de tu proyecto Git, donde se almacenan ajustes como remotos, configuraciones de push y ramas de seguimiento.\u200b</li> <li>logs/: Registra todos los cambios realizados a las referencias en el repositorio, proporcionando un historial de commits y otras acciones.\u200b</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac2/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 2","text":"<p>Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p>"},{"location":"EDD/introduccion_git_prac2/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un repositorio remoto en GitHub.</li> <li>Hacer un push de tu commit inicial al repositorio remoto.</li> <li>Comprender la diferencia entre repositorios locales y remotos.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio remoto en GitHub</p> Soluci\u00f3n <ul> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear repositorio\" en la parte superior derecha de la p\u00e1gina.</li> <li>Asigna un nombre a tu repositorio y selecciona si deseas que sea p\u00fablico o privado.</li> <li>Haz clic en \"Crear repositorio\".</li> </ul> </li> <li> <p>Copia la URL del repositorio remoto</p> Soluci\u00f3n <ul> <li>Una vez creado el repositorio, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>La URL tendr\u00e1 un formato similar a <code>https://github.com/nombreUsuario/nombreRepositorio.git</code></li> <li>Si deseas usar SSH, la URL tendr\u00e1 un formato similar a <code>git@github.com:nombreUsuario/nombreRepositorio.git</code></li> </ul> </li> <li> <p>Configura el repositorio remoto en tu repositorio local</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega hasta el directorio de tu repositorio local.</li> <li>Usa el siguiente comando para agregar el repositorio remoto:   <pre><code>git remote add origin &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL que copiaste en el paso anterior.</li> </ul> </li> <li> <p>Verifica que el repositorio remoto se ha agregado correctamente</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para verificar que el repositorio remoto se ha agregado correctamente:   <pre><code>git remote -v\n</code></pre></li> <li>Deber\u00edas ver la URL del repositorio remoto en la salida del comando.</li> <li>La salida deber\u00eda ser similar a:   <pre><code>origin\n</code></pre></li> </ul> </li> <li> <p>Renombra la rama principal a <code>main</code> (opcional)</p> Soluci\u00f3n <ul> <li>Si tu repositorio remoto usa <code>main</code> como la rama principal, puedes renombrar tu rama local a <code>main</code> usando el siguiente comando:   <pre><code>git branch -m main\n</code></pre></li> <li>Luego, actualiza el nombre de la rama en el repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> </ul> </li> <li> <p>Haz un push de tu commit inicial al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tu commit inicial al repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Si est\u00e1s usando una rama diferente a <code>main</code>, reemplaza <code>main</code> con el nombre de tu rama actual.</li> <li>Si es la primera vez que haces un push a este repositorio, es posible que se te pida que ingreses tus credenciales de GitHub.</li> </ul> </li> <li> <p>Verifica que el push se ha realizado correctamente</p> Soluci\u00f3n <ul> <li>Ve a tu repositorio en GitHub y verifica que tu commit inicial se ha subido correctamente.</li> <li>Deber\u00edas ver el commit en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac2/#configura-un-certificado-de-seguridad-opcional","title":"Configura un certificado de seguridad (opcional)","text":"<p>Si est\u00e1s usando HTTPS y tienes problemas de autenticaci\u00f3n, puedes configurar un certificado de seguridad para evitar tener que ingresar tus credenciales cada vez que hagas un push. Puedes seguir las instrucciones en la documentaci\u00f3n oficial de GitHub para configurar un certificado de seguridad.</p>"},{"location":"EDD/introduccion_git_prac2/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>En esta pr\u00e1ctica, hemos aprendido a crear un repositorio remoto en GitHub y a hacer un push de nuestro commit inicial. Es importante entender la diferencia entre repositorios locales y remotos:</p> <ul> <li>Repositorio local: Es el repositorio que tienes en tu m\u00e1quina local. Aqu\u00ed es donde haces tus cambios y commits.</li> <li>Repositorio remoto: Es el repositorio que est\u00e1 alojado en un servidor (en este caso, GitHub). Aqu\u00ed es donde compartes tu trabajo con otros y colaboras en proyectos.</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac3/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 3","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p>"},{"location":"EDD/introduccion_git_prac3/#objetivos","title":"Objetivos","text":"<ul> <li>Clonar un repositorio remoto.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Clona un repositorio remoto</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega al directorio donde deseas clonar el repositorio.</li> <li>Usa el siguiente comando para clonar el repositorio remoto:   <pre><code>git clone &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL del repositorio que deseas clonar.</li> </ul> </li> <li> <p>Navega al directorio del repositorio clonado</p> Soluci\u00f3n <ul> <li>Cambia al directorio del repositorio clonado utilizando el siguiente comando:   <pre><code>cd nombre_del_repositorio\n</code></pre></li> <li>Reemplaza <code>nombre_del_repositorio</code> con el nombre del repositorio clonado.</li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"bug arreglado\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"bug arreglado\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"bug arreglado\".</li> </ul> </li> <li> <p>Elimina el v\u00ednculo con mi repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para eliminar el v\u00ednculo con el repositorio remoto:   <pre><code>git remote remove origin\n</code></pre></li> <li>Esto eliminar\u00e1 la referencia al repositorio remoto.</li> </ul> </li> <li> <p>Crea un nuevo repositorio remoto en GitHub y vinculalo con tu repositorio local</p> Soluci\u00f3n <ul> <li>Si tienes dudas sobre c\u00f3mo hacerlo puedes consultar la Pr\u00e1ctica 2.</li> </ul> </li> <li> <p>Haz un push de tus cambios al nuevo repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tus cambios al nuevo repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Esto enviar\u00e1 tus cambios al nuevo repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</li> </ul> </li> <li> <p>Verifica que los cambios se han subido correctamente al repositorio remoto</p> Soluci\u00f3n <ul> <li>Ve a tu nuevo repositorio en GitHub y verifica que tus cambios se han subido correctamente.</li> <li>Deber\u00edas ver el commit con el mensaje \"bug arreglado\" en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac3/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"</code></pre>"},{"location":"EDD/introduccion_git_prac3/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfC\u00f3mo es posible que me muestre dos commits si yo solo hice uno?</p> <ul> <li>Git es un sistema de control de versiones distribuido, lo que significa que cada copia del repositorio es una copia completa del historial de cambios.</li> <li>Cuando clonas un repositorio, obtienes una copia completa de todo el historial de commits, incluyendo los commits que ya existen en el repositorio remoto.</li> <li>Por lo tanto, al clonar un repositorio, ya tienes acceso a todos los commits que se han realizado en ese repositorio, incluso si no los has creado t\u00fa mismo.</li> <li>En este caso, el commit \"bug arreglado\" es el que t\u00fa hiciste, mientras que el commit \"commit inicial\" es el que ya exist\u00eda en el repositorio remoto antes de que lo clonaras.</li> <li>Esto es normal y esperado en Git, ya que cada commit tiene un identificador \u00fanico (hash) que lo distingue de los dem\u00e1s.</li> <li>Por lo tanto, aunque t\u00fa solo hayas creado un commit, el historial de commits del repositorio incluye todos los commits que se han realizado en el repositorio, incluyendo los que ya exist\u00edan antes de que lo clonaras.</li> <li>Esto te permite ver el historial completo de cambios y colaborar con otros desarrolladores de manera efectiva.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 4","text":""},{"location":"EDD/introduccion_git_prac4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear una nueva rama.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un merge con la rama principal.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> <li>Comprender la importancia de las ramas en Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea una nueva rama</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega al directorio del repositorio local.</li> <li>Usa el siguiente comando para crear una nueva rama:   <pre><code>git branch nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Cambia a la nueva rama</p> Soluci\u00f3n <ul> <li>Cambia a la nueva rama utilizando el siguiente comando:   <pre><code>git checkout nueva_funcionalidad\n</code></pre></li> <li>Alternativamente, puedes crear y cambiar a la nueva rama en un solo paso utilizando:   <pre><code>git checkout -b nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> <li>Por ejemplo, puedes agregar una nueva funci\u00f3n o corregir un error en el c\u00f3digo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"nueva funcionalidad agregada\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"Nueva funcionalidad agregada\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"Nueva funcionalidad agregada\".</li> </ul> </li> <li> <p>Haz un merge con la rama principal</p> Soluci\u00f3n <ul> <li>Cambia a la rama principal utilizando el siguiente comando:   <pre><code>git checkout main\n</code></pre></li> <li>Luego, haz un merge de la nueva rama con la rama principal:   <pre><code>git merge nueva_funcionalidad\n</code></pre></li> <li>Esto combinar\u00e1 los cambios de la nueva rama en la rama principal.</li> </ul> </li> <li> <p>Haz un push de los cambios al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de los cambios al repositorio remoto:   <pre><code>git push origin main\n</code></pre></li> <li>Esto actualizar\u00e1 el repositorio remoto con los cambios realizados en la rama principal.</li> </ul> </li> <li> <p>Verifica que los cambios se hayan reflejado en el repositorio remoto</p> Soluci\u00f3n <ul> <li>Abre tu navegador y ve a la p\u00e1gina de tu repositorio en GitHub.</li> <li>Verifica que los cambios realizados en la rama principal se hayan reflejado en el repositorio remoto.</li> </ul> </li> <li> <p>Elimina la rama creada</p> Soluci\u00f3n <ul> <li>Si ya no necesitas la rama creada, puedes eliminarla utilizando el siguiente comando:   <pre><code>git branch -d nueva_funcionalidad\n</code></pre></li> <li>Esto eliminar\u00e1 la rama <code>nueva_funcionalidad</code> de tu repositorio local.</li> </ul> </li> <li> <p>Visualiza el historial de commits en modo gr\u00e1fico</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para visualizar el historial de commits en modo gr\u00e1fico:   <pre><code>git log --oneline --graph\n</code></pre></li> <li>Esto mostrar\u00e1 un gr\u00e1fico del historial de commits, incluyendo las ramas y merges realizados.</li> <li>Puedes usar <code>q</code> para salir del modo gr\u00e1fico.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac4/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"\n    branch nueva_funcionalidad\n    commit id: \"nueva funcionalidad agregada\"\n    checkout main\n    merge nueva_funcionalidad</code></pre>"},{"location":"EDD/introduccion_git_prac4/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfQu\u00e9 es el puntero HEAD?</p> <p>El puntero HEAD es una referencia especial en Git que indica la rama o commit en el que te encuentras actualmente. Cuando cambias de rama, el puntero HEAD se actualiza para apuntar a la nueva rama. Esto te permite trabajar en diferentes ramas y realizar cambios sin afectar la rama principal hasta que decidas hacer un merge.</p> <p>\u00bfCuantas ramas puedo crear?</p> <p>No hay un l\u00edmite espec\u00edfico en la cantidad de ramas que puedes crear en un repositorio Git. Puedes crear tantas ramas como necesites para organizar tu trabajo y gestionar diferentes caracter\u00edsticas o correcciones de errores. Sin embargo, es recomendable mantener un n\u00famero razonable de ramas para evitar confusiones y facilitar la gesti\u00f3n del repositorio.</p> <p></p>"},{"location":"EDD/UD1/","title":"Ejemplos de plugins","text":""},{"location":"EDD/UD1/#ejemplo-de-plugin-de-resaltado-de-codigo","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code>// Ejemplo de plugin de resaltado de c\u00f3digo\nfunction highlightCode(code) {\n    // Resaltar el c\u00f3digo\n    return `&lt;pre&gt;&lt;code&gt;${code}&lt;/code&gt;&lt;/pre&gt;`;\n}\n// Ejemplo de uso\nconst code = \"console.log('Hola, mundo!');\";\nconst highlightedCode = highlightCode(code);\nconsole.log(highlightedCode);\n</code></pre>"},{"location":"EDD/UD1/#ejemplo-de-plugin-de-resaltado-de-codigo_1","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code># Ejemplo de plugin de resaltado de c\u00f3digo\ndef highlight_code(code):\n    # Resaltar el c\u00f3digo\n    return f\"&lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt;\"\n# Ejemplo de uso\ncode = \"print('Hola, mundo!')\"\nhighlighted_code = highlight_code(code)\nprint(highlighted_code)\n</code></pre>"},{"location":"EDD/UD1/#ejemplo-de-grafico-con-mermaid","title":"Ejemplo de gr\u00e1fico con mermaid","text":"<pre><code>graph TD;\n    A[Inicio] --&gt; B{\u00bfCondici\u00f3n?};\n    B -- S\u00ed --&gt; C[Acci\u00f3n 1];\n    B -- No --&gt; D[Acci\u00f3n 2];\n    C --&gt; E[Fin];\n    D --&gt; E;</code></pre>"},{"location":"EDD/UD1/#ejemplo-de-grafico-con-planuml","title":"Ejemplo de gr\u00e1fico con planUML","text":"<pre><code>@startuml\nactor User\nUser -&gt; (Login)\nUser -&gt; (Logout)\nUser -&gt; (Register)\nUser -&gt; (View Profile)\nUser -&gt; (Edit Profile)\nUser -&gt; (Delete Account)\nUser -&gt; (Search)\nUser -&gt; (View Search Results)   \n@enduml\n</code></pre>"},{"location":"EDD/UD1/#ejemplo-de-consejos-y-advertencias","title":"Ejemplo de consejos y advertencias","text":"<p>Consejo</p> <p>Recuerda siempre comentar tus funciones para mejorar la legibilidad.</p> <p>Advertencia</p> <p>Revisa bien los \u00edndices para evitar errores de navegaci\u00f3n.</p>"}]}