{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jordi Cido - FP","text":"<p>En este repositorio se encuentran los apuntes de las asignaturas del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW) que he cursado en diferentes centros de estudios de formaci\u00f3n profesional.</p>"},{"location":"#damdaw","title":"DAM/DAW","text":""},{"location":"#entornos-de-desarrollo","title":"Entornos de desarrollo","text":""},{"location":"#modulo-profesional-optativo","title":"M\u00f3dulo Profesional Optativo","text":""},{"location":"EDD/","title":"DAM/DAW","text":"<p>En este espacio se encuentran los apuntes de la asignatura de Entornos de Desarrollo (EDD) del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW).</p>"},{"location":"EDD/#ut1-desarrollo-de-software","title":"UT1 - Desarrollo de software.","text":""},{"location":"EDD/#ut2-instalacion-y-uso-de-entornos-de-desarrollo","title":"UT2 - Instalaci\u00f3n y uso de entornos de desarrollo.","text":""},{"location":"EDD/#ut3-diseno-y-realizacion-de-pruebas","title":"UT3 - Dise\u00f1o y realizaci\u00f3n de pruebas.","text":""},{"location":"EDD/#ut4-optimizacion-y-documentacion","title":"UT4 - Optimizaci\u00f3n y documentaci\u00f3n.","text":""},{"location":"EDD/#ut5-elaboracion-de-diagramas-de-clases","title":"UT5 - Elaboraci\u00f3n de diagramas de clases.","text":""},{"location":"EDD/#ut6-elaboracion-de-diagramas-de-comportamiento","title":"UT6 - Elaboraci\u00f3n de diagramas de comportamiento.","text":""},{"location":"EDD/introduccion_git/","title":"Conceptos b\u00e1sicos de Git","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear cambios en el c\u00f3digo fuente a lo largo del tiempo. A continuaci\u00f3n se presentan algunos conceptos b\u00e1sicos de Git:</p> <ul> <li>Repositorio (repo): Un repositorio es un espacio de almacenamiento donde se guarda el c\u00f3digo fuente y su historial de cambios. Puede ser local (en tu m\u00e1quina) o remoto (en un servidor).</li> <li>Commit: Un commit es una instant\u00e1nea del estado del c\u00f3digo en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.</li> <li>Branch: Una rama es una l\u00ednea de desarrollo independiente dentro de un repositorio. Permite trabajar en diferentes caracter\u00edsticas o correcciones de errores sin afectar la rama principal (generalmente llamada <code>main</code> o <code>master</code>).</li> <li>Merge: Un merge es el proceso de combinar dos ramas diferentes en una sola. Esto se utiliza para integrar cambios de una rama a otra.</li> <li>Clone: Clonar un repositorio significa crear una copia local de un repositorio remoto. Esto te permite trabajar en el c\u00f3digo sin necesidad de estar conectado a Internet.</li> <li>Push: Hacer un push significa enviar tus commits locales a un repositorio remoto. Esto actualiza el repositorio remoto con tus cambios.</li> <li>Pull: Hacer un pull significa descargar los cambios del repositorio remoto a tu copia local. Esto actualiza tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</li> </ul>"},{"location":"EDD/introduccion_git/#acciones-basicas-de-git","title":"Acciones b\u00e1sicas de Git","text":""},{"location":"EDD/introduccion_git/#crear-un-repositorio-local","title":"Crear un repositorio local","text":"<p>Para crear un nuevo repositorio local, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas crear el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git init nombre_del_repositorio\n</code></pre> <p>Esto crear\u00e1 un nuevo directorio llamado <code>nombre_del_repositorio</code> y lo inicializar\u00e1 como un repositorio Git. 4. Navega al nuevo directorio:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Crea un archivo README.md para describir tu proyecto:</li> </ol> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> <ol> <li>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n (staging area):</li> </ol> <pre><code>git add README.md\n</code></pre> <ol> <li>Realiza tu primer commit:</li> </ol> <pre><code>git commit -m \"Primer commit: agregar README.md\"\n</code></pre> <ol> <li>Ahora tienes un repositorio local con un commit inicial.</li> </ol>"},{"location":"EDD/introduccion_git/#crear-un-repositorio-remoto","title":"Crear un repositorio remoto","text":"<p>Para crear un repositorio remoto, puedes utilizar plataformas como GitHub, GitLab o Bitbucket. A continuaci\u00f3n se muestra c\u00f3mo crear un repositorio en GitHub:</p> <ol> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear nuevo repositorio\".</li> <li>Completa el formulario con el nombre del repositorio, la descripci\u00f3n y la visibilidad (p\u00fablico o privado).</li> <li>Haz clic en \"Create repository\" para crear el repositorio.</li> <li>Una vez creado, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>Vuelve a la terminal y navega al directorio de tu repositorio local.</li> <li>Agrega el repositorio remoto utilizando el siguiente comando:</li> </ol> <pre><code>git remote add origin URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL que copiaste de GitHub. 8. Ahora puedes hacer un push de tu commit inicial al repositorio remoto:</p> <pre><code>git push -u origin main\n</code></pre> <p>Esto enviar\u00e1 tus cambios al repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</p>"},{"location":"EDD/introduccion_git/#clonar-un-repositorio-remoto","title":"Clonar un repositorio remoto","text":"<p>Para clonar un repositorio remoto, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas clonar el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git clone URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL del repositorio remoto que deseas clonar. 4. Esto crear\u00e1 una copia local del repositorio remoto en tu m\u00e1quina. 5. Navega al directorio del repositorio clonado:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Ahora puedes trabajar en el c\u00f3digo y realizar commits como lo har\u00edas en un repositorio local.</li> </ol>"},{"location":"EDD/introduccion_git/#push-y-pull","title":"Push y Pull","text":"<p>Para enviar tus cambios al repositorio remoto, utiliza el comando <code>git push</code>:</p> <pre><code>git push origin main\n</code></pre> <p>Esto enviar\u00e1 tus commits locales a la rama <code>main</code> del repositorio remoto. Para descargar los cambios del repositorio remoto, utiliza el comando <code>git pull</code>:</p> <pre><code>git pull origin main\n</code></pre> <p>Esto actualizar\u00e1 tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</p>"},{"location":"EDD/introduccion_git/#crear-una-rama","title":"Crear una rama","text":"<p>Para crear una nueva rama, utiliza el siguiente comando:</p> <pre><code>git branch nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre que desees para la nueva rama. Esto crear\u00e1 una nueva rama basada en la rama actual. Para cambiar a la nueva rama, utiliza el siguiente comando:</p> <pre><code>git checkout nombre_de_la_rama\n</code></pre> <p>Esto cambiar\u00e1 tu entorno de trabajo a la nueva rama.</p>"},{"location":"EDD/introduccion_git/#hacer-un-merge","title":"Hacer un merge","text":"<p>Para combinar los cambios de una rama en otra, primero aseg\u00farate de estar en la rama a la que deseas fusionar los cambios. Luego, utiliza el siguiente comando:</p> <pre><code>git merge nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre de la rama que deseas fusionar. Esto combinar\u00e1 los cambios de la rama especificada en la rama actual.</p>"},{"location":"EDD/introduccion_git/#comandos-utilizados","title":"Comandos utilizados","text":"<pre><code># Inicializar un nuevo repositorio\ngit init nombre_del_repositorio\n# Navegar al directorio del repositorio\ncd nombre_del_repositorio\n# Crear un archivo README.md\necho \"# Mi Proyecto\" &gt; README.md\n# Agregar el archivo al \u00e1rea de preparaci\u00f3n\ngit add README.md\n# Realizar un commit\ngit commit -m \"Primer commit: agregar README.md\"\n# Agregar el repositorio remoto\ngit remote add origin URL_DEL_REPOSITORIO\n# Hacer un push al repositorio remoto\ngit push -u origin main\n# Clonar un repositorio remoto\ngit clone URL_DEL_REPOSITORIO\n# Cambiar a una rama\ngit checkout nombre_de_la_rama\n# Crear una nueva rama\ngit branch nombre_de_la_rama\n# Hacer un merge de una rama\ngit merge nombre_de_la_rama\n# Hacer un pull del repositorio remoto\ngit pull origin main\n# Hacer un push al repositorio remoto\ngit push origin main\n</code></pre>"},{"location":"EDD/introduccion_git/#ejercicios-propuestos","title":"Ejercicios propuestos","text":"<p>Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</p> <p>Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p> <p>Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p> <p>Pr\u00e1ctica 4: Crear una nueva rama, realizar cambios y hacer un merge con la rama principal.</p>"},{"location":"EDD/introduccion_git/#conclusion","title":"Conclusi\u00f3n","text":"<p>Git es una herramienta poderosa para el control de versiones y la colaboraci\u00f3n en proyectos de software. Con estos conceptos b\u00e1sicos, puedes comenzar a utilizar Git para gestionar tu c\u00f3digo y colaborar con otros desarrolladores. A medida que te familiarices con Git, podr\u00e1s explorar caracter\u00edsticas m\u00e1s avanzadas como rebase, cherry-pick y resoluci\u00f3n de conflictos.</p>"},{"location":"EDD/introduccion_git/#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Git</li> <li>GitHub Guides</li> <li>Pro Git Book</li> <li>Git Cheat Sheet</li> <li>Git Immersion</li> <li>Learn Git Branching</li> </ul>"},{"location":"EDD/introduccion_git_prac1/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 1","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a crear un nuevo repositorio local, realizar commits y entender la estructura b\u00e1sica de un repositorio Git. Aseg\u00farate de tener Git instalado en tu sistema antes de comenzar.</p>"},{"location":"EDD/introduccion_git_prac1/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un nuevo repositorio local.</li> <li>Realizar commits de archivos.</li> <li>Comprender la estructura b\u00e1sica de un repositorio Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener acceso a la l\u00ednea de comandos (terminal).</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio local</p> Soluci\u00f3n <p>Abre la terminal y navega al directorio donde deseas crear el nuevo repositorio. Luego, ejecuta el siguiente comando:</p> <pre><code>git init mi_proyecto\n</code></pre> <p>Reemplaza <code>mi_proyecto</code> con el nombre que desees para tu nuevo repositorio. Esto crear\u00e1 un nuevo directorio llamado <code>.git</code> en el directorio actual, que contendr\u00e1 todos los archivos y configuraciones necesarias para el repositorio Git.</p> </li> <li> <p>Navega al directorio del repositorio</p> Soluci\u00f3n <p>Cambia al directorio del nuevo repositorio utilizando el siguiente comando:</p> <pre><code>cd mi_proyecto\n</code></pre> </li> <li> <p>Crea un archivo README.md</p> Soluci\u00f3n <p>Crea un archivo README.md para documentar tu proyecto. Puedes usar cualquier editor de texto o el siguiente comando:</p> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> </li> <li> <p>Agrega el archivo al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <p>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n utilizando el siguiente comando:</p> <pre><code>git add README.md\n</code></pre> </li> <li> <p>Realiza un commit con el mensaje \"commit inicial\"</p> Soluci\u00f3n <p>Realiza un commit de los cambios utilizando el siguiente comando:</p> <pre><code>git commit -m \"commit inicial\"\n</code></pre> </li> <li> <p>Visualiza el historial de commits</p> Soluci\u00f3n <p>Para ver el historial de commits, utiliza el siguiente comando:</p> <pre><code>git log\n</code></pre> <p>Esto mostrar\u00e1 una lista de todos los commits realizados en el repositorio, junto con sus mensajes y hashes.</p> </li> </ol>"},{"location":"EDD/introduccion_git_prac1/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"</code></pre>"},{"location":"EDD/introduccion_git_prac1/#configura-tus-credenciales-de-git","title":"Configura tus credenciales de Git","text":"<p>Para que Git pueda identificarte como autor de los commits, es importante configurar tus credenciales. Puedes hacerlo ejecutando los siguientes comandos en la terminal:</p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tucorreo@ejemplo.com\"\n</code></pre> <p>Esto configurar\u00e1 tu nombre y correo electr\u00f3nico globalmente para todos los repositorios en tu m\u00e1quina. Si deseas configurarlos solo para un repositorio espec\u00edfico, omite la opci\u00f3n <code>--global</code>.</p>"},{"location":"EDD/introduccion_git_prac1/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>Comprender la estructura interna de un repositorio Git local es fundamental para aprovechar al m\u00e1ximo esta herramienta de control de versiones. Un repositorio Git se encuentra generalmente en un directorio .git en la ra\u00edz de tu proyecto. A continuaci\u00f3n, se detallan sus componentes principales:\u200b</p> <ul> <li>objects/: Almacena todo el contenido de tus   archivos, commits, \u00e1rboles y etiquetas. Cada objeto se identifica mediante un hash SHA-1, lo que garantiza la integridad de los datos.\u200b</li> <li>refs/: Contiene referencias a objetos commit, incluyendo ramas (refs/heads/), etiquetas (refs/tags/) y ramas remotas (refs/remotes/). Estas referencias ayudan a Git a rastrear diversos puntos en la historia de tu proyecto.\u200b</li> <li>HEAD: Es un archivo que indica la rama o commit actual en el que se basa tu directorio de trabajo. Informa a Git qu\u00e9 utilizar como padre para tu pr\u00f3ximo commit.\u200b</li> <li>index: Tambi\u00e9n conocido como \u00e1rea de preparaci\u00f3n o \"staging area\", este archivo binario contiene una lista ordenada de nombres de ruta, cada uno con permisos y el hash SHA-1 de un objeto blob. Sirve como intermediario entre tu directorio de trabajo y el repositorio, permiti\u00e9ndote acumular un conjunto de cambios para confirmar juntos.\u200b</li> <li>config: El archivo de configuraci\u00f3n principal de tu proyecto Git, donde se almacenan ajustes como remotos, configuraciones de push y ramas de seguimiento.\u200b</li> <li>logs/: Registra todos los cambios realizados a las referencias en el repositorio, proporcionando un historial de commits y otras acciones.\u200b</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac2/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 2","text":"<p>Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p>"},{"location":"EDD/introduccion_git_prac2/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un repositorio remoto en GitHub.</li> <li>Hacer un push de tu commit inicial al repositorio remoto.</li> <li>Comprender la diferencia entre repositorios locales y remotos.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio remoto en GitHub</p> Soluci\u00f3n <ul> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear repositorio\" en la parte superior derecha de la p\u00e1gina.</li> <li>Asigna un nombre a tu repositorio y selecciona si deseas que sea p\u00fablico o privado.</li> <li>Haz clic en \"Crear repositorio\".</li> </ul> </li> <li> <p>Copia la URL del repositorio remoto</p> Soluci\u00f3n <ul> <li>Una vez creado el repositorio, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>La URL tendr\u00e1 un formato similar a <code>https://github.com/nombreUsuario/nombreRepositorio.git</code></li> <li>Si deseas usar SSH, la URL tendr\u00e1 un formato similar a <code>git@github.com:nombreUsuario/nombreRepositorio.git</code></li> </ul> </li> <li> <p>Configura el repositorio remoto en tu repositorio local</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega hasta el directorio de tu repositorio local.</li> <li>Usa el siguiente comando para agregar el repositorio remoto:   <pre><code>git remote add origin &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL que copiaste en el paso anterior.</li> </ul> </li> <li> <p>Verifica que el repositorio remoto se ha agregado correctamente</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para verificar que el repositorio remoto se ha agregado correctamente:   <pre><code>git remote -v\n</code></pre></li> <li>Deber\u00edas ver la URL del repositorio remoto en la salida del comando.</li> <li>La salida deber\u00eda ser similar a:   <pre><code>origin\n</code></pre></li> </ul> </li> <li> <p>Renombra la rama principal a <code>main</code> (opcional)</p> Soluci\u00f3n <ul> <li>Si tu repositorio remoto usa <code>main</code> como la rama principal, puedes renombrar tu rama local a <code>main</code> usando el siguiente comando:   <pre><code>git branch -m main\n</code></pre></li> <li>Luego, actualiza el nombre de la rama en el repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> </ul> </li> <li> <p>Haz un push de tu commit inicial al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tu commit inicial al repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Si est\u00e1s usando una rama diferente a <code>main</code>, reemplaza <code>main</code> con el nombre de tu rama actual.</li> <li>Si es la primera vez que haces un push a este repositorio, es posible que se te pida que ingreses tus credenciales de GitHub.</li> </ul> </li> <li> <p>Verifica que el push se ha realizado correctamente</p> Soluci\u00f3n <ul> <li>Ve a tu repositorio en GitHub y verifica que tu commit inicial se ha subido correctamente.</li> <li>Deber\u00edas ver el commit en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac2/#configura-un-certificado-de-seguridad-opcional","title":"Configura un certificado de seguridad (opcional)","text":"<p>Si est\u00e1s usando HTTPS y tienes problemas de autenticaci\u00f3n, puedes configurar un certificado de seguridad para evitar tener que ingresar tus credenciales cada vez que hagas un push. Puedes seguir las instrucciones en la documentaci\u00f3n oficial de GitHub para configurar un certificado de seguridad.</p>"},{"location":"EDD/introduccion_git_prac2/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>En esta pr\u00e1ctica, hemos aprendido a crear un repositorio remoto en GitHub y a hacer un push de nuestro commit inicial. Es importante entender la diferencia entre repositorios locales y remotos:</p> <ul> <li>Repositorio local: Es el repositorio que tienes en tu m\u00e1quina local. Aqu\u00ed es donde haces tus cambios y commits.</li> <li>Repositorio remoto: Es el repositorio que est\u00e1 alojado en un servidor (en este caso, GitHub). Aqu\u00ed es donde compartes tu trabajo con otros y colaboras en proyectos.</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac3/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 3","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p>"},{"location":"EDD/introduccion_git_prac3/#objetivos","title":"Objetivos","text":"<ul> <li>Clonar un repositorio remoto.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Clona un repositorio remoto</p> Soluci\u00f3n <ul> <li>Accede al repositorio remoto que hemos creado en la Pr\u00e1ctica 2.</li> <li>Abre una terminal y navega al directorio donde deseas clonar el repositorio.</li> <li>Usa el siguiente comando para clonar el repositorio remoto:   <pre><code>git clone &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL del repositorio que deseas clonar.</li> </ul> </li> <li> <p>Navega al directorio del repositorio clonado</p> Soluci\u00f3n <ul> <li>Cambia al directorio del repositorio clonado utilizando el siguiente comando:   <pre><code>cd nombre_del_repositorio\n</code></pre></li> <li>Reemplaza <code>nombre_del_repositorio</code> con el nombre del repositorio clonado.</li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"bug arreglado\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"bug arreglado\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"bug arreglado\".</li> </ul> </li> <li> <p>Elimina el v\u00ednculo con mi repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para eliminar el v\u00ednculo con el repositorio remoto:   <pre><code>git remote remove origin\n</code></pre></li> <li>Esto eliminar\u00e1 la referencia al repositorio remoto.</li> </ul> </li> <li> <p>Crea un nuevo repositorio remoto en GitHub y vinculalo con tu repositorio local</p> Soluci\u00f3n <ul> <li>Si tienes dudas sobre c\u00f3mo hacerlo puedes consultar la Pr\u00e1ctica 2.</li> </ul> </li> <li> <p>Haz un push de tus cambios al nuevo repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tus cambios al nuevo repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Esto enviar\u00e1 tus cambios al nuevo repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</li> </ul> </li> <li> <p>Verifica que los cambios se han subido correctamente al repositorio remoto</p> Soluci\u00f3n <ul> <li>Ve a tu nuevo repositorio en GitHub y verifica que tus cambios se han subido correctamente.</li> <li>Deber\u00edas ver el commit con el mensaje \"bug arreglado\" en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac3/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"</code></pre>"},{"location":"EDD/introduccion_git_prac3/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfC\u00f3mo es posible que me muestre dos commits si yo solo hice uno?</p> <ul> <li>Git es un sistema de control de versiones distribuido, lo que significa que cada copia del repositorio es una copia completa del historial de cambios.</li> <li>Cuando clonas un repositorio, obtienes una copia completa de todo el historial de commits, incluyendo los commits que ya existen en el repositorio remoto.</li> <li>Por lo tanto, al clonar un repositorio, ya tienes acceso a todos los commits que se han realizado en ese repositorio, incluso si no los has creado t\u00fa mismo.</li> <li>En este caso, el commit \"bug arreglado\" es el que t\u00fa hiciste, mientras que el commit \"commit inicial\" es el que ya exist\u00eda en el repositorio remoto antes de que lo clonaras.</li> <li>Esto es normal y esperado en Git, ya que cada commit tiene un identificador \u00fanico (hash) que lo distingue de los dem\u00e1s.</li> <li>Por lo tanto, aunque t\u00fa solo hayas creado un commit, el historial de commits del repositorio incluye todos los commits que se han realizado en el repositorio, incluyendo los que ya exist\u00edan antes de que lo clonaras.</li> <li>Esto te permite ver el historial completo de cambios y colaborar con otros desarrolladores de manera efectiva.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 4","text":""},{"location":"EDD/introduccion_git_prac4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear una nueva rama.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un merge con la rama principal.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> <li>Comprender la importancia de las ramas en Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea una nueva rama</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega al directorio del repositorio local.</li> <li>Usa el siguiente comando para crear una nueva rama:   <pre><code>git branch nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Cambia a la nueva rama</p> Soluci\u00f3n <ul> <li>Cambia a la nueva rama utilizando el siguiente comando:   <pre><code>git checkout nueva_funcionalidad\n</code></pre></li> <li>Alternativamente, puedes crear y cambiar a la nueva rama en un solo paso utilizando:   <pre><code>git checkout -b nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> <li>Por ejemplo, puedes agregar una nueva funci\u00f3n o corregir un error en el c\u00f3digo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"nueva funcionalidad agregada\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"Nueva funcionalidad agregada\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"Nueva funcionalidad agregada\".</li> </ul> </li> <li> <p>Haz un merge con la rama principal</p> Soluci\u00f3n <ul> <li>Cambia a la rama principal utilizando el siguiente comando:   <pre><code>git checkout main\n</code></pre></li> <li>Luego, haz un merge de la nueva rama con la rama principal:   <pre><code>git merge nueva_funcionalidad\n</code></pre></li> <li>Esto combinar\u00e1 los cambios de la nueva rama en la rama principal.</li> </ul> </li> <li> <p>Haz un push de los cambios al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de los cambios al repositorio remoto:   <pre><code>git push origin main\n</code></pre></li> <li>Esto actualizar\u00e1 el repositorio remoto con los cambios realizados en la rama principal.</li> </ul> </li> <li> <p>Verifica que los cambios se hayan reflejado en el repositorio remoto</p> Soluci\u00f3n <ul> <li>Abre tu navegador y ve a la p\u00e1gina de tu repositorio en GitHub.</li> <li>Verifica que los cambios realizados en la rama principal se hayan reflejado en el repositorio remoto.</li> </ul> </li> <li> <p>Elimina la rama creada</p> Soluci\u00f3n <ul> <li>Si ya no necesitas la rama creada, puedes eliminarla utilizando el siguiente comando:   <pre><code>git branch -d nueva_funcionalidad\n</code></pre></li> <li>Esto eliminar\u00e1 la rama <code>nueva_funcionalidad</code> de tu repositorio local.</li> </ul> </li> <li> <p>Visualiza el historial de commits en modo gr\u00e1fico</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para visualizar el historial de commits en modo gr\u00e1fico:   <pre><code>git log --oneline --graph\n</code></pre></li> <li>Esto mostrar\u00e1 un gr\u00e1fico del historial de commits, incluyendo las ramas y merges realizados.</li> <li>Puedes usar <code>q</code> para salir del modo gr\u00e1fico.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac4/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"\n    branch nueva_funcionalidad\n    commit id: \"nueva funcionalidad agregada\"\n    checkout main\n    merge nueva_funcionalidad</code></pre>"},{"location":"EDD/introduccion_git_prac4/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfQu\u00e9 es el puntero HEAD?</p> <p>El puntero HEAD es una referencia especial en Git que indica la rama o commit en el que te encuentras actualmente. Cuando cambias de rama, el puntero HEAD se actualiza para apuntar a la nueva rama. Esto te permite trabajar en diferentes ramas y realizar cambios sin afectar la rama principal hasta que decidas hacer un merge.</p> <p>\u00bfCuantas ramas puedo crear?</p> <p>No hay un l\u00edmite espec\u00edfico en la cantidad de ramas que puedes crear en un repositorio Git. Puedes crear tantas ramas como necesites para organizar tu trabajo y gestionar diferentes caracter\u00edsticas o correcciones de errores. Sin embargo, es recomendable mantener un n\u00famero razonable de ramas para evitar confusiones y facilitar la gesti\u00f3n del repositorio.</p> <p></p>"},{"location":"EDD/temporalizacion/","title":"Temporalizaci\u00f3n clases EDD Febrero 2025","text":""},{"location":"EDD/temporalizacion/#semana-1-11-febrero","title":"Semana 1 (11 Febrero)","text":"<ul> <li>Martes 11: Presentaci\u00f3n de la asignatura y el profesor.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-2-18-20-febrero","title":"Semana 2 (18-20 Febrero)","text":"<ul> <li>Martes 18: UT2: \u00bfQu\u00e9 es un IDE?</li> <li>Jueves 20: Tutoria: Dudas sobre la instalaci\u00f3n y configuraci\u00f3n del IDE.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-3-25-27-febrero","title":"Semana 3 (25-27 Febrero)","text":"<ul> <li>Martes 25: UT1: Lenguajes de programaci\u00f3n.</li> <li>Jueves 27: Tutoria: Dudas sobre tipos de lenguajes de programaci\u00f3n.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-4-4-6-marzo","title":"Semana 4 (4-6 Marzo)","text":"<ul> <li>Martes 4: UT4: Introducci\u00f3n a Git.</li> <li>Jueves 6: Tutoria: Dudas sobre Git y su instalaci\u00f3n.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-5-11-13-marzo","title":"Semana 5 (11-13 Marzo)","text":"<ul> <li>Martes 11: UT4: Git remote y git branch.</li> <li>Jueves 13: Tutoria: Dudas sobre Git remote y git branch.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-6-18-20-marzo","title":"Semana 6 (18-20 Marzo)","text":"<ul> <li>Martes 18: UT1: Ingenier\u00eda del Software, Fases y Ciclos de Vida.</li> <li>Jueves 20: Tutoria: Din\u00e1mica sobre ingenier\u00eda del Software, Fases y Ciclos de Vida.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-7-25-27-marzo","title":"Semana 7 (25-27 Marzo)","text":"<ul> <li>Martes 25: UT1: Metodolog\u00edas \u00e1giles vs tradicionales. Conociendo SCRUM.</li> <li>Jueves 27: Tutoria: Din\u00e1mica sobre SCRUM y sus roles.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-8-1-3-abril","title":"Semana 8 (1-3 Abril)","text":"<ul> <li>Martes 1: UT4: Git merge y resoluci\u00f3n de conflictos.</li> <li>Jueves 3: Tutoria: Dudas sobre Git merge y resoluci\u00f3n de conflictos.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-9-8-abril","title":"Semana 9 (8 Abril)","text":"<ul> <li>Martes 8: UT5: Colaborando en repositorios Github.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-10-22-abril","title":"Semana 10 (22 Abril)","text":"<ul> <li>Martes 22: UT2: Automatizaci\u00f3n.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-11-29-abril","title":"Semana 11 (29 Abril)","text":"<ul> <li>Martes 29: UT3: Debugging y pruebas de software.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-12-6-mayo","title":"Semana 12 (6 Mayo)","text":"<ul> <li>Martes 6: UT3: Planificaci\u00f3n y tipos de pruebas.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-13-13-mayo","title":"Semana 13 (13 Mayo)","text":"<ul> <li>Martes 13: UT3: Pruebas unitarias.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-14-20-mayo","title":"Semana 14 (20 Mayo)","text":"<ul> <li>Martes 20: UT4: Git rebase y squash.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-15-27-mayo","title":"Semana 15 (27 Mayo)","text":"<ul> <li>Martes 27: UT5: Documentaci\u00f3n de software.</li> </ul>"},{"location":"EDD/temporalizacion/#semana-16-3-junio","title":"Semana 16 (3 Junio)","text":"<ul> <li>Martes 3:</li> </ul>"},{"location":"EDD/temporalizacion/#semana-17-10-junio","title":"Semana 17 (10 Junio)","text":"<ul> <li>Martes 10:</li> </ul>"},{"location":"EDD/temporalizacion/#semana-18-17-junio","title":"Semana 18 (17 Junio)","text":"<ul> <li>Martes 17:</li> </ul>"},{"location":"EDD/UD1/ejemplos%20mermaid/","title":"Ejemplos de plugins","text":""},{"location":"EDD/UD1/ejemplos%20mermaid/#ejemplo-de-plugin-de-resaltado-de-codigo","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code>// Ejemplo de plugin de resaltado de c\u00f3digo\nfunction highlightCode(code) {\n    // Resaltar el c\u00f3digo\n    return `&lt;pre&gt;&lt;code&gt;${code}&lt;/code&gt;&lt;/pre&gt;`;\n}\n// Ejemplo de uso\nconst code = \"console.log('Hola, mundo!');\";\nconst highlightedCode = highlightCode(code);\nconsole.log(highlightedCode);\n</code></pre>"},{"location":"EDD/UD1/ejemplos%20mermaid/#ejemplo-de-plugin-de-resaltado-de-codigo_1","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code># Ejemplo de plugin de resaltado de c\u00f3digo\ndef highlight_code(code):\n    # Resaltar el c\u00f3digo\n    return f\"&lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt;\"\n# Ejemplo de uso\ncode = \"print('Hola, mundo!')\"\nhighlighted_code = highlight_code(code)\nprint(highlighted_code)\n</code></pre>"},{"location":"EDD/UD1/ejemplos%20mermaid/#ejemplo-de-grafico-con-mermaid","title":"Ejemplo de gr\u00e1fico con mermaid","text":"<pre><code>graph TD;\n    A[Inicio] --&gt; B{\u00bfCondici\u00f3n?};\n    B -- S\u00ed --&gt; C[Acci\u00f3n 1];\n    B -- No --&gt; D[Acci\u00f3n 2];\n    C --&gt; E[Fin];\n    D --&gt; E;</code></pre>"},{"location":"EDD/UD1/ejemplos%20mermaid/#ejemplo-de-grafico-con-planuml","title":"Ejemplo de gr\u00e1fico con planUML","text":"<pre><code>@startuml\nactor User\nUser -&gt; (Login)\nUser -&gt; (Logout)\nUser -&gt; (Register)\nUser -&gt; (View Profile)\nUser -&gt; (Edit Profile)\nUser -&gt; (Delete Account)\nUser -&gt; (Search)\nUser -&gt; (View Search Results)   \n@enduml\n</code></pre>"},{"location":"EDD/UD1/ejemplos%20mermaid/#ejemplo-de-consejos-y-advertencias","title":"Ejemplo de consejos y advertencias","text":"<p>Consejo</p> <p>Recuerda siempre comentar tus funciones para mejorar la legibilidad.</p> <p>Advertencia</p> <p>Revisa bien los \u00edndices para evitar errores de navegaci\u00f3n.</p>"},{"location":"MPO/","title":"M\u00f3dulo profesional optativo (MPO): Python","text":"<p>Bienvenid@s al repositorio con el material del m\u00f3dulo profesional optativo (MPO) de Python. Este m\u00f3dulo est\u00e1 dise\u00f1ado para complementar el aprendizaje de los estudiantes en el \u00e1mbito de la programaci\u00f3n y el desarrollo de software. El objetivo de este m\u00f3dulo es proporcionar al alumnado una comprensi\u00f3n s\u00f3lida de los conceptos y t\u00e9cnicas de programaci\u00f3n en Python, as\u00ed como la capacidad de aplicar estos conocimientos en proyectos pr\u00e1cticos. A lo largo del curso, l@s estudiantes aprender\u00e1n a desarrollar algoritmos utilizando Python y estructuras de datos eficientes.</p>"},{"location":"MPO/#contenidos-del-modulo","title":"Contenidos del m\u00f3dulo","text":""},{"location":"MPO/#ut1-fundamentos-de-python","title":"UT1: Fundamentos de Python","text":"<ul> <li>Introducci\u00f3n a Python</li> <li>Sintaxis b\u00e1sica</li> <li>Tipos de datos primitivos</li> <li>Estructuras de datos</li> <li>Listas, tuplas y diccionarios</li> </ul>"},{"location":"MPO/#ut2-estructuras-de-control","title":"UT2: Estructuras de control","text":"<ul> <li>Estructuras de control de flujo</li> <li>Estructuras de control de repetici\u00f3n</li> </ul>"},{"location":"MPO/#ut3-funciones-y-modulos","title":"UT3: Funciones y m\u00f3dulos","text":"<ul> <li>Definici\u00f3n y uso de funciones</li> <li>Par\u00e1metros y argumentos</li> <li>Alcance de variables</li> <li>M\u00f3dulos y bibliotecas</li> <li>Importaci\u00f3n de m\u00f3dulos</li> </ul>"},{"location":"MPO/UT1/","title":"UT1: Fundamentos de Python","text":""},{"location":"MPO/UT1/#introduccion-a-python","title":"Introducci\u00f3n a Python","text":"<p>Bienvenid@s a la Unidad de Trabajo 1 (UT1) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en los fundamentos de Python, incluyendo su sintaxis b\u00e1sica y conceptos clave. A lo largo de esta unidad, aprender\u00e1s a escribir programas simples en Python y a comprender la estructura del lenguaje. Tambi\u00e9n exploraremos las herramientas y entornos de desarrollo que puedes utilizar para programar en Python.</p>"},{"location":"MPO/UT1/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>La sintaxis de Python es clara y f\u00e1cil de entender, lo que lo convierte en un lenguaje ideal para principiantes. A continuaci\u00f3n, se presentan algunos conceptos b\u00e1sicos de la sintaxis de Python:</p> <ul> <li>Comentarios: Los comentarios en Python se inician con el s\u00edmbolo <code>#</code>. Todo lo que siga a este s\u00edmbolo en la misma l\u00ednea ser\u00e1 ignorado por el int\u00e9rprete de Python.</li> <li>Comentarios de varias l\u00edneas: Para comentarios de varias l\u00edneas, puedes utilizar comillas triples (<code>'''</code> o <code>\"\"\"</code>). Por ejemplo:</li> </ul> <pre><code>\"\"\"\nEste es un comentario\nque se extiende\na trav\u00e9s de varias l\u00edneas.\n\"\"\"\n</code></pre> <ul> <li>Variables: Las variables se utilizan para almacenar datos. En Python, no es necesario declarar el tipo de variable, ya que el int\u00e9rprete lo infiere autom\u00e1ticamente. Por ejemplo:</li> </ul> <pre><code>nombre = \"Juan\"\nedad = 25\n</code></pre> <ul> <li>Impresi\u00f3n en pantalla: Para mostrar informaci\u00f3n en la consola, se utiliza la funci\u00f3n <code>print()</code>. Por ejemplo:</li> </ul> <pre><code>print(\"Hola, mundo!\")\n</code></pre> <ul> <li>Indentaci\u00f3n: La indentaci\u00f3n es importante en Python, ya que se utiliza para definir bloques de c\u00f3digo. Aseg\u00farate de utilizar espacios o tabulaciones de manera consistente.</li> <li>Lectura de datos: Para leer datos del usuario, se utiliza la funci\u00f3n <code>input()</code>. Por ejemplo:</li> </ul> <pre><code>nombre = input(\"Introduce tu nombre: \")\nprint(\"Hola, \" + nombre)\n</code></pre> <ul> <li>Tipos de datos: Python tiene varios tipos de datos, incluyendo enteros (<code>int</code>), flotantes (<code>float</code>), cadenas (<code>str</code>) y booleanos (<code>bool</code>). Puedes realizar operaciones matem\u00e1ticas y l\u00f3gicas con estos tipos de datos.</li> <li>Operadores: Python admite operadores aritm\u00e9ticos (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), operadores de comparaci\u00f3n (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) y operadores l\u00f3gicos (<code>and</code>, <code>or</code>, <code>not</code>).</li> </ul>"},{"location":"MPO/UT1/#ejercicios-practicos-nivel-basico","title":"Ejercicios pr\u00e1cticos (nivel b\u00e1sico)","text":""},{"location":"MPO/UT1/ejercicios_ut1/","title":"Ejercicios UT1 - Nivel b\u00e1sico","text":""},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa en Python que pida al usuario su nombre y edad, y luego imprima un mensaje de bienvenida customizado indicando ambos datos.</p> Soluci\u00f3n <pre><code>nombre = input(\"Introduce tu nombre: \")\nedad = input(\"Introduce tu edad: \")\nprint(\"Hola, \" + nombre + \"! Tienes \" + edad + \" a\u00f1os.\")\n</code></pre> <p>Sab\u00edas que hay una forma m\u00e1s sencilla de concatenar cadenas en Python? Puedes usar la funci\u00f3n <code>f-string</code> para formatear cadenas de manera m\u00e1s legible.</p> <p>Intenta buscar como usar <code>f-string</code> y modifica el c\u00f3digo anterior para usarlo.</p> Explicaci\u00f3n <pre><code>nombre = input(\"Introduce tu nombre: \")\nedad = input(\"Introduce tu edad: \")\nprint(f\"Hola, {nombre}! Tienes {edad} a\u00f1os.\")\n</code></pre> <p>No te parece mucho m\u00e1s senzillo?</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa en Python que pida al usuario dos n\u00fameros y luego imprima la suma, resta, multiplicaci\u00f3n y divisi\u00f3n de ambos n\u00fameros.</p> Soluci\u00f3n <pre><code>num1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\n\nsuma = num1 + num2\nresta = num1 - num2\nmultiplicacion = num1 * num2\ndivision = num1 / num2\n\nprint(f\"Suma: {suma}\")\nprint(f\"Resta: {resta}\")\nprint(f\"Multiplicaci\u00f3n: {multiplicacion}\")\nprint(f\"Divisi\u00f3n: {division}\")\n</code></pre> <p>En este ejercicio, hemos utilizado la funci\u00f3n <code>float()</code> para convertir la entrada del usuario en un n\u00famero decimal. Esto nos permite realizar operaciones matem\u00e1ticas con los n\u00fameros ingresados. Es importante recordar que la divisi\u00f3n en Python puede dar como resultado un n\u00famero decimal, por lo que es recomendable usar <code>float()</code> para evitar errores de tipo.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que, dados dos n\u00fameros enteros, imprima True si son iguales y False si no lo son.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nprint(num1 == num2)\n</code></pre> <p>F\u00edjate que en este ejercicio hemos utilizado la funci\u00f3n <code>int()</code> para convertir la entrada del usuario en un n\u00famero entero. Esto es importante porque queremos comparar dos n\u00fameros enteros, no cadenas de texto. La comparaci\u00f3n se realiza utilizando el operador <code>==</code>, que devuelve <code>True</code> si los n\u00fameros son iguales y <code>False</code> si no lo son.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros e imprima True si el primero es divisible por el segundo.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nprint(num1 % num2 == 0)\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>%</code> para calcular el resto de la divisi\u00f3n entre los dos n\u00fameros. Si el resto es cero, significa que el primer n\u00famero es divisible por el segundo. La comparaci\u00f3n se realiza utilizando el operador <code>==</code>, que devuelve <code>True</code> si el resto es cero y <code>False</code> si no lo es.</p> <p>Por si no lo sab\u00edas, el operador <code>%</code> se llama \"m\u00f3dulo\" y se utiliza para obtener el resto de una divisi\u00f3n. Por ejemplo, <code>10 % 3</code> devuelve <code>1</code>, porque al dividir <code>10</code> entre <code>3</code>, el resto es <code>1</code>. Si el primer n\u00famero es divisible por el segundo, el resultado del m\u00f3dulo ser\u00e1 <code>0</code>.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-5","title":"Ejercicio 5","text":"<p>Nunca me ha gustado que Python no disponga de una manera r\u00e1pida de aumentar un contador. Haz un programa que pida al usuario un n\u00famero entero e imprima el siguiente n\u00famero.</p> Soluci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\nnum = num + 1\nprint(f\"El siguiente n\u00famero es: {num}\")\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>+</code> para sumar <code>1</code> al n\u00famero ingresado por el usuario. Esto nos permite obtener el siguiente n\u00famero entero de manera sencilla. Sin embargo, hay una forma m\u00e1s corta de hacerlo utilizando el operador <code>+=</code>, que es un operador de asignaci\u00f3n. Este operador permite aumentar el valor de una variable en una cantidad espec\u00edfica. C\u00f3mo quedar\u00eda el c\u00f3digo si utilizamos <code>+=</code>?</p> Explicaci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\nnum += 1\nprint(f\"El siguiente n\u00famero es: {num}\")\n</code></pre> <p>En este caso, <code>num += 1</code> es equivalente a <code>num = num + 1</code>, pero es m\u00e1s conciso y f\u00e1cil de leer. Este tipo de operadores de asignaci\u00f3n son muy \u00fatiles para simplificar el c\u00f3digo y hacerlo m\u00e1s legible.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero e imprima:</p> <ul> <li>Su doble</li> <li>Su triple</li> <li>Su mitad</li> <li>Su cuadrado</li> <li>Su ra\u00edz cuadrada</li> </ul> Soluci\u00f3n <pre><code>import math\n\nnum = int(input(\"Introduce un n\u00famero entero: \"))\n\ndoble = num * 2\ntriple = num * 3\nmitad = num / 2\ncuadrado = num ** 2\nraiz_cuadrada = math.sqrt(num)\n\nprint(f\"Doble: {doble}\")\nprint(f\"Triple: {triple}\")\nprint(f\"Mitad: {mitad}\")\nprint(f\"Cuadrado: {cuadrado}\")\nprint(f\"Ra\u00edz cuadrada: {raiz_cuadrada}\")\n</code></pre> <p>En este ejercicio, hemos utilizado la funci\u00f3n <code>math.sqrt()</code> para calcular la ra\u00edz cuadrada del n\u00famero ingresado. La funci\u00f3n <code>math.sqrt()</code> es parte del m\u00f3dulo <code>math</code>, que proporciona funciones matem\u00e1ticas adicionales. Aseg\u00farate de importar el m\u00f3dulo <code>math</code> al principio de tu programa para poder utilizar esta funci\u00f3n.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribe un programa que pida al usuario tres n\u00fameros enteros e imprima True si todos ellos son mayores que cero, False en caso contrario.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nnum3 = int(input(\"Introduce el tercer n\u00famero: \"))\n\nprint(num1 &gt; 0 and num2 &gt; 0 and num3 &gt; 0)\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribe un programa que pida al usuario tres nombres e immprima True si alguno de los nombres es \"Juan\", False en caso contrario.</p> Soluci\u00f3n <pre><code>nombre1 = input(\"Introduce el primer nombre: \")\nnombre2 = input(\"Introduce el segundo nombre: \")\nnombre3 = input(\"Introduce el tercer nombre: \")\n\nprint(nombre1 == \"Juan\" or nombre2 == \"Juan\" or nombre3 == \"Juan\")\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero e imprima True si \u00e9ste es mayor o igual que 18 y menor que 65, False en caso contrario.</p> Soluci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\n\nprint(num &gt; 18 and num &lt; 65)\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribe un programa que, dados dos n\u00fameros enteros, imprima su divisi\u00f3n decimal, si divisi\u00f3n entera y su resto. El segundo n\u00famero no puede ser cero.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\ndivision_decimal = num1 / num2\ndivision_entera = num1 // num2\nresto = num1 % num2\n\nprint(f\"Divisi\u00f3n decimal: {division_decimal}\")\nprint(f\"Divisi\u00f3n entera: {division_entera}\")\nprint(f\"Resto: {resto}\")\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>//</code> para realizar la divisi\u00f3n entera. La divisi\u00f3n entera devuelve el cociente sin decimales.</p>"},{"location":"MPO/UT2/","title":"UT2: Estructuras de control","text":""},{"location":"MPO/UT2/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenid@s a la Unidad de Trabajo 2 (UT2) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en las estructuras de control, que son fundamentales para el desarrollo de programas en Python. Aprender\u00e1s a utilizar estructuras de control de flujo y repetici\u00f3n para crear programas m\u00e1s complejos y eficientes. A lo largo de esta unidad, exploraremos las diferentes estructuras de control disponibles en Python, incluyendo condicionales (<code>if</code>, <code>elif</code>, <code>else</code>) y bucles (<code>for</code>, <code>while</code>). Tambi\u00e9n aprender\u00e1s a utilizar la instrucci\u00f3n <code>break</code> para salir de un bucle y la instrucci\u00f3n <code>continue</code> para omitir una iteraci\u00f3n.</p>"},{"location":"MPO/UT2/#estructuras-de-control-de-flujo","title":"Estructuras de control de flujo","text":"<p>Las estructuras de control de flujo permiten tomar decisiones en funci\u00f3n de condiciones espec\u00edficas. En Python, las estructuras de control de flujo m\u00e1s comunes son las condicionales <code>if</code>, <code>elif</code> y <code>else</code>. Estas estructuras permiten ejecutar diferentes bloques de c\u00f3digo seg\u00fan si una condici\u00f3n es verdadera o falsa.</p>"},{"location":"MPO/UT2/#estructura-if","title":"Estructura <code>if</code>","text":"<p>La estructura <code>if</code> se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n:\n    # Bloque de c\u00f3digo a ejecutar si la condici\u00f3n es verdadera\n</code></pre>"},{"location":"MPO/UT2/#estructura-elif","title":"Estructura <code>elif</code>","text":"<p>La estructura <code>elif</code> (abreviatura de \"else if\") se utiliza para evaluar m\u00faltiples condiciones. Si la primera condici\u00f3n es falsa, se eval\u00faa la siguiente condici\u00f3n <code>elif</code>. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n1:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n1 es verdadera\nelif condici\u00f3n2:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n2 es verdadera\n</code></pre>"},{"location":"MPO/UT2/#estructura-else","title":"Estructura <code>else</code>","text":"<p>La estructura <code>else</code> se utiliza para ejecutar un bloque de c\u00f3digo si todas las condiciones anteriores son falsas. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n1:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n1 es verdadera\nelif condici\u00f3n2:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n2 es verdadera\nelse:\n    # Bloque de c\u00f3digo a ejecutar si todas las condiciones anteriores son falsas\n</code></pre>"},{"location":"MPO/UT2/#ejemplo-de-estructura-de-control-de-flujo","title":"Ejemplo de estructura de control de flujo","text":"<pre><code>edad = int(input(\"Introduce tu edad: \"))\nif edad &lt; 18:\n    print(\"Eres menor de edad.\")\nelif edad &gt;= 18 and edad &lt; 65:\n    print(\"Eres adulto.\")\nelse:\n    print(\"Eres mayor de edad.\")\n</code></pre> <p>En este ejemplo, se solicita al usuario que introduzca su edad y se eval\u00faa en qu\u00e9 categor\u00eda de edad se encuentra. Dependiendo de la edad ingresada, se imprime un mensaje diferente.</p>"},{"location":"MPO/UT2/#ejercicios-de-clase-estructuras-de-control-condicionales","title":"Ejercicios de clase: estructuras de control condicionales","text":""},{"location":"MPO/UT2/#ejercicios-practicos-nivel-basico","title":"Ejercicios pr\u00e1cticos (Nivel b\u00e1sico)","text":"<p>Aseg\u00farate de leer atentamente cada ejercicio y de intentar resolverlo por tu cuenta antes de consultar las soluciones. Esto te ayudar\u00e1 a consolidar tus conocimientos y a mejorar tus habilidades de programaci\u00f3n.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/","title":"Ejercicios de clase UT2: Estructura de control condicional","text":""},{"location":"MPO/UT2/ejercicios_if_clase/#contexto","title":"Contexto","text":"<p>La estructura de control condicional es una de las m\u00e1s importantes en programaci\u00f3n. Permite tomar decisiones basadas en condiciones espec\u00edficas, lo que es fundamental para crear programas interactivos y din\u00e1micos. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de la estructura <code>if</code>, <code>elif</code> y <code>else</code> para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando estas estructuras de control.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-1-siempre-negatifo-nunca-positifo","title":"Ejercicio 1 - Siempre negatifo, nunca positifo","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es positivo o negativo. El programa debe imprimir un mensaje indicando el resultado.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-2-portero-de-discoteca","title":"Ejercicio 2 - Portero de discoteca","text":"<p>Escribe un programa que simule el trabajo de un portero de discoteca. El programa debe pedir al usuario su edad y determinar si puede entrar o no. Si la edad es menor de 18 a\u00f1os, el programa debe imprimir \"No puedes entrar\". Si la edad es mayor o igual a 18 a\u00f1os, el programa debe imprimir \"Puedes entrar\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-3-pacman","title":"Ejercicio 3 - Pacman","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros correspondientes a la casilla que est\u00e1 Pacman (1er n\u00famero) y a la que est\u00e1 un fantasma (2o n\u00famero), luego debe recibir un texto con el formato \"normal\" o \"caramelo\". Si el texto es \"normal\" y los n\u00fameros son iguales, el programa debe imprimir \"Pacman ha sido atrapado\". Si el texto es \"caramelo\" y los n\u00fameros son iguales, el programa debe imprimir \"Pacman ha comido al fantasma\". En cualquier otro caso, el programa debe imprimir \"Pacman ha escapado\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-4-multiplos-de-3-y-5","title":"Ejercicio 4 - M\u00faltiplos de 3 y 5","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es m\u00faltiplo de 3 o de 5. El programa debe imprimir un mensaje indicando el resultado. Si el n\u00famero es m\u00faltiplo de ambos, debe imprimir \"M\u00faltiplo de 3 y 5\". Si no es m\u00faltiplo de ninguno, debe imprimir \"No es m\u00faltiplo de 3 ni de 5\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-5-puede-entrar-en-el-servidor-de-discord","title":"Ejercicio 5 - Puede entrar en el servidor de Discord?","text":"<p>Escribe un programa que pida un rol y una academia de estudios, si el rol es \"alumno\" y la academia es \"Prometeo\" el programa debe darle acceso al servidor de Discord oficial y al de los alumnos, donde se critica a los profes. Si el rol es \"profesor\" y la academia es \"Prometeo\" el programa debe darle acceso al servidor de Discord oficial, pero no al de los alumnos. En cualquier otro caso, el programa debe imprimir \"No tienes acceso al servidor de Discord\".</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/","title":"Ejercicios UT2: Nivel b\u00e1sico","text":""},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es par o impar. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero % 2 == 0:\n    print(f\"{numero} es par.\")\nelse:\n    print(f\"{numero} es impar.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es positivo, negativo o cero. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero &gt; 0:\n    print(f\"{numero} es positivo.\")\nelif numero &lt; 0:\n    print(f\"{numero} es negativo.\")\nelse:\n    print(\"El n\u00famero es cero.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es divisible por 3 y 5. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero % 3 == 0 and numero % 5 == 0:\n    print(f\"{numero} es divisible por 3 y 5.\")\nelse:\n    print(f\"{numero} no es divisible por 3 y 5.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que pida una nota (0-10) y muestre:</p> <ul> <li>\"Suspenso\" si es menor de 5</li> <li>\"Aprobado\" si es entre 5 y 6</li> <li>\"Notable\" si es entre 7 y 8</li> <li>\"Sobresaliente\" si es 9 o 10</li> </ul> Soluci\u00f3n <pre><code>nota = float(input(\"Introduce una nota (0-10): \"))\nif nota &lt; 5:\n    print(\"Suspenso\")\nelif 5 &lt;= nota &lt; 7:\n    print(\"Aprobado\")\nelif 7 &lt;= nota &lt; 9:\n    print(\"Notable\")\nelif 9 &lt;= nota &lt;= 10:\n    print(\"Sobresaliente\")\nelse:\n    print(\"Nota no v\u00e1lida.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribe un programa que pida el nombre de un d\u00eda de la semana y muestre si es \"laborable\" o \"fin de semana\".</p> Soluci\u00f3n <pre><code>dia = input(\"Introduce el nombre de un d\u00eda de la semana: \").lower()\nif dia in [\"lunes\", \"martes\", \"mi\u00e9rcoles\", \"jueves\", \"viernes\"]:\n    print(f\"{dia.capitalize()} es un d\u00eda laborable.\")\nelif dia in [\"s\u00e1bado\", \"domingo\"]:\n    print(f\"{dia.capitalize()} es fin de semana.\")\nelse:\n    print(\"D\u00eda no v\u00e1lido.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribe un porgrama que pida un a\u00f1o y muestra si es bisiesto. Un a\u00f1o es bisiesto si es divisible por 4, pero no por 100, o si es divisible por 400.</p> Soluci\u00f3n <pre><code>a\u00f1o = int(input(\"Introduce un a\u00f1o: \"))\nif (a\u00f1o % 4 == 0 and a\u00f1o % 100 != 0) or (a\u00f1o % 400 == 0):\n    print(f\"{a\u00f1o} es un a\u00f1o bisiesto.\")\nelse:\n    print(f\"{a\u00f1o} no es un a\u00f1o bisiesto.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribe un programa que pida dos n\u00fameros y un operador (+, -, *, /) y muestre el resultado de la operaci\u00f3n.</p> Soluci\u00f3n <pre><code>num1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\noperador = input(\"Introduce un operador (+, -, *, /): \")\n\nif operador == \"+\":\n    resultado = num1 + num2\nelif operador == \"-\":\n    resultado = num1 - num2\nelif operador == \"*\":\n    resultado = num1 * num2\nelif operador == \"/\":\n    if num2 != 0:\n        resultado = num1 / num2\n    else:\n        resultado = \"Error: Divisi\u00f3n por cero.\"\nelse:\n    resultado = \"Operador no v\u00e1lido.\"\n\nprint(f\"Resultado: {resultado}\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribe un programa que pida el nombre de un mes y muestre cu\u00e1ntos d\u00edas tiene (puedes simplificar febrero a 28 d\u00edas siempre).</p> Soluci\u00f3n <pre><code>mes = input(\"Introduce el nombre de un mes: \").lower()\nif mes in [\"enero\", \"marzo\", \"mayo\", \"julio\", \"agosto\", \"octubre\", \"diciembre\"]:\n    dias = 31\nelif mes in [\"abril\", \"junio\", \"septiembre\", \"noviembre\"]:\n    dias = 30\nelif mes == \"febrero\":\n    dias = 28\nelse:\n    dias = \"Mes no v\u00e1lido.\"\n\nprint(f\"{mes.capitalize()} tiene {dias} d\u00edas.\")\n</code></pre> <p>La funci\u00f3n lower() convierte la cadena a min\u00fasculas para evitar problemas de may\u00fasculas y min\u00fasculas al comparar el mes ingresado por el usuario. Puedes usar upper() si prefieres trabajar con may\u00fasculas.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribe un programa que pida el precio de un producto y, si supera los 100\u20ac, aplique un descuento del 10%. Muestra el precio final.</p> Soluci\u00f3n <pre><code>precio = float(input(\"Introduce el precio del producto: \"))\nif precio &gt; 100:\n    descuento = precio * 0.10\n    precio_final = precio - descuento\nelse:\n    precio_final = precio\n\nprint(f\"El precio final es: {precio_final}\u20ac\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribe un programa que pida d\u00eda, mes y a\u00f1o. Comprueba si la fecha introducida es v\u00e1lida. Recuerda que, en los a\u00f1os bisiestos, febrero tiene 29 d\u00edas. Puedes usar el algoritmo del ejercicio 6 para determinar si un a\u00f1o es bisiesto.</p> Soluci\u00f3n <pre><code>dia = int(input(\"Introduce el d\u00eda: \"))\nmes = int(input(\"Introduce el mes (1-12): \"))\na\u00f1o = int(input(\"Introduce el a\u00f1o: \"))\n\nif mes &lt; 1 or mes &gt; 12:\n    print(\"Mes no v\u00e1lido.\")\nelif dia &lt; 1 or (mes == 2 and ((a\u00f1o % 4 == 0 and a\u00f1o % 100 != 0) or (a\u00f1o % 400 == 0) and dia &gt; 29)) or (mes == 2 and dia &gt; 28) or (mes in [4, 6, 9, 11] and dia &gt; 30) or (mes in [1, 3, 5, 7, 8, 10, 12] and dia &gt; 31):\n    print(\"Fecha no v\u00e1lida.\")\nelse:\n    print(f\"La fecha {dia}/{mes}/{a\u00f1o} es v\u00e1lida.\")\n</code></pre> Recuerda <p>Recuerda que este ejercicio es un poco m\u00e1s complicado porque tienes que tener en cuenta los d\u00edas de cada mes y los a\u00f1os bisiestos. No solo tienes que comprobar si el mes es v\u00e1lido, sino tambi\u00e9n si el d\u00eda es v\u00e1lido para ese mes y a\u00f1o. Por ejemplo, febrero tiene 29 d\u00edas en a\u00f1os bisiestos y 28 en a\u00f1os no bisiestos. Adem\u00e1s, abril, junio, septiembre y noviembre tienen 30 d\u00edas, mientras que enero, marzo, mayo, julio, agosto, octubre y diciembre tienen 31 d\u00edas.</p>"}]}