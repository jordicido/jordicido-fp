{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jordi Cido - FP","text":"<p>En este repositorio se encuentran los apuntes de las asignaturas del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW) que he cursado en diferentes centros de estudios de formaci\u00f3n profesional.</p>"},{"location":"#damdaw","title":"DAM/DAW","text":""},{"location":"#entornos-de-desarrollo","title":"Entornos de desarrollo","text":""},{"location":"#modulo-profesional-optativo","title":"M\u00f3dulo Profesional Optativo","text":""},{"location":"EDD/","title":"Entornos de Desarrollo","text":"<p>En este espacio se encuentran los apuntes de la asignatura de Entornos de Desarrollo (EDD) del ciclo formativo de grado superior de Desarrollo de Aplicaciones Multiplataforma (DAM) y Desarrollo de Aplicaciones Web (DAW).</p>"},{"location":"EDD/#programacion-didactica","title":"Programaci\u00f3n did\u00e1ctica","text":""},{"location":"EDD/#proyecto-1-entrega-01092025","title":"Proyecto 1 - Entrega 01/09/2025","text":""},{"location":"EDD/#contenido-del-curso","title":"Contenido del curso","text":""},{"location":"EDD/#ut1-desarrollo-de-software","title":"UT1 - Desarrollo de software.","text":""},{"location":"EDD/#ut2-instalacion-y-uso-de-entornos-de-desarrollo","title":"UT2 - Instalaci\u00f3n y uso de entornos de desarrollo.","text":""},{"location":"EDD/#ut3-diseno-y-realizacion-de-pruebas","title":"UT3 - Dise\u00f1o y realizaci\u00f3n de pruebas.","text":""},{"location":"EDD/#ut4-optimizacion-y-documentacion","title":"UT4 - Optimizaci\u00f3n y documentaci\u00f3n.","text":""},{"location":"EDD/#ut5-elaboracion-de-diagramas-de-clases","title":"UT5 - Elaboraci\u00f3n de diagramas de clases.","text":""},{"location":"EDD/#ut6-elaboracion-de-diagramas-de-comportamiento","title":"UT6 - Elaboraci\u00f3n de diagramas de comportamiento.","text":""},{"location":"EDD/introduccion_git/","title":"Conceptos b\u00e1sicos de Git","text":"<p>Git es un sistema de control de versiones distribuido que permite a los desarrolladores rastrear cambios en el c\u00f3digo fuente a lo largo del tiempo. A continuaci\u00f3n se presentan algunos conceptos b\u00e1sicos de Git:</p> <ul> <li>Repositorio (repo): Un repositorio es un espacio de almacenamiento donde se guarda el c\u00f3digo fuente y su historial de cambios. Puede ser local (en tu m\u00e1quina) o remoto (en un servidor).</li> <li>Commit: Un commit es una instant\u00e1nea del estado del c\u00f3digo en un momento dado. Cada commit tiene un mensaje que describe los cambios realizados.</li> <li>Branch: Una rama es una l\u00ednea de desarrollo independiente dentro de un repositorio. Permite trabajar en diferentes caracter\u00edsticas o correcciones de errores sin afectar la rama principal (generalmente llamada <code>main</code> o <code>master</code>).</li> <li>Merge: Un merge es el proceso de combinar dos ramas diferentes en una sola. Esto se utiliza para integrar cambios de una rama a otra.</li> <li>Clone: Clonar un repositorio significa crear una copia local de un repositorio remoto. Esto te permite trabajar en el c\u00f3digo sin necesidad de estar conectado a Internet.</li> <li>Push: Hacer un push significa enviar tus commits locales a un repositorio remoto. Esto actualiza el repositorio remoto con tus cambios.</li> <li>Pull: Hacer un pull significa descargar los cambios del repositorio remoto a tu copia local. Esto actualiza tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</li> </ul>"},{"location":"EDD/introduccion_git/#acciones-basicas-de-git","title":"Acciones b\u00e1sicas de Git","text":""},{"location":"EDD/introduccion_git/#crear-un-repositorio-local","title":"Crear un repositorio local","text":"<p>Para crear un nuevo repositorio local, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas crear el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git init nombre_del_repositorio\n</code></pre> <p>Esto crear\u00e1 un nuevo directorio llamado <code>nombre_del_repositorio</code> y lo inicializar\u00e1 como un repositorio Git. 4. Navega al nuevo directorio:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Crea un archivo README.md para describir tu proyecto:</li> </ol> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> <ol> <li>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n (staging area):</li> </ol> <pre><code>git add README.md\n</code></pre> <ol> <li>Realiza tu primer commit:</li> </ol> <pre><code>git commit -m \"Primer commit: agregar README.md\"\n</code></pre> <ol> <li>Ahora tienes un repositorio local con un commit inicial.</li> </ol>"},{"location":"EDD/introduccion_git/#crear-un-repositorio-remoto","title":"Crear un repositorio remoto","text":"<p>Para crear un repositorio remoto, puedes utilizar plataformas como GitHub, GitLab o Bitbucket. A continuaci\u00f3n se muestra c\u00f3mo crear un repositorio en GitHub:</p> <ol> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear nuevo repositorio\".</li> <li>Completa el formulario con el nombre del repositorio, la descripci\u00f3n y la visibilidad (p\u00fablico o privado).</li> <li>Haz clic en \"Create repository\" para crear el repositorio.</li> <li>Una vez creado, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>Vuelve a la terminal y navega al directorio de tu repositorio local.</li> <li>Agrega el repositorio remoto utilizando el siguiente comando:</li> </ol> <pre><code>git remote add origin URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL que copiaste de GitHub. 8. Ahora puedes hacer un push de tu commit inicial al repositorio remoto:</p> <pre><code>git push -u origin main\n</code></pre> <p>Esto enviar\u00e1 tus cambios al repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</p>"},{"location":"EDD/introduccion_git/#clonar-un-repositorio-remoto","title":"Clonar un repositorio remoto","text":"<p>Para clonar un repositorio remoto, sigue estos pasos:</p> <ol> <li>Abre la terminal o l\u00ednea de comandos.</li> <li>Navega hasta el directorio donde deseas clonar el repositorio.</li> <li>Ejecuta el siguiente comando:</li> </ol> <pre><code>git clone URL_DEL_REPOSITORIO\n</code></pre> <p>Reemplaza <code>URL_DEL_REPOSITORIO</code> con la URL del repositorio remoto que deseas clonar. 4. Esto crear\u00e1 una copia local del repositorio remoto en tu m\u00e1quina. 5. Navega al directorio del repositorio clonado:</p> <pre><code>cd nombre_del_repositorio\n</code></pre> <ol> <li>Ahora puedes trabajar en el c\u00f3digo y realizar commits como lo har\u00edas en un repositorio local.</li> </ol>"},{"location":"EDD/introduccion_git/#push-y-pull","title":"Push y Pull","text":"<p>Para enviar tus cambios al repositorio remoto, utiliza el comando <code>git push</code>:</p> <pre><code>git push origin main\n</code></pre> <p>Esto enviar\u00e1 tus commits locales a la rama <code>main</code> del repositorio remoto. Para descargar los cambios del repositorio remoto, utiliza el comando <code>git pull</code>:</p> <pre><code>git pull origin main\n</code></pre> <p>Esto actualizar\u00e1 tu repositorio local con los \u00faltimos cambios realizados por otros desarrolladores.</p>"},{"location":"EDD/introduccion_git/#crear-una-rama","title":"Crear una rama","text":"<p>Para crear una nueva rama, utiliza el siguiente comando:</p> <pre><code>git branch nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre que desees para la nueva rama. Esto crear\u00e1 una nueva rama basada en la rama actual. Para cambiar a la nueva rama, utiliza el siguiente comando:</p> <pre><code>git checkout nombre_de_la_rama\n</code></pre> <p>Esto cambiar\u00e1 tu entorno de trabajo a la nueva rama.</p>"},{"location":"EDD/introduccion_git/#hacer-un-merge","title":"Hacer un merge","text":"<p>Para combinar los cambios de una rama en otra, primero aseg\u00farate de estar en la rama a la que deseas fusionar los cambios. Luego, utiliza el siguiente comando:</p> <pre><code>git merge nombre_de_la_rama\n</code></pre> <p>Reemplaza <code>nombre_de_la_rama</code> con el nombre de la rama que deseas fusionar. Esto combinar\u00e1 los cambios de la rama especificada en la rama actual.</p>"},{"location":"EDD/introduccion_git/#comandos-utilizados","title":"Comandos utilizados","text":"<pre><code># Inicializar un nuevo repositorio\ngit init nombre_del_repositorio\n# Navegar al directorio del repositorio\ncd nombre_del_repositorio\n# Crear un archivo README.md\necho \"# Mi Proyecto\" &gt; README.md\n# Agregar el archivo al \u00e1rea de preparaci\u00f3n\ngit add README.md\n# Realizar un commit\ngit commit -m \"Primer commit: agregar README.md\"\n# Agregar el repositorio remoto\ngit remote add origin URL_DEL_REPOSITORIO\n# Hacer un push al repositorio remoto\ngit push -u origin main\n# Clonar un repositorio remoto\ngit clone URL_DEL_REPOSITORIO\n# Cambiar a una rama\ngit checkout nombre_de_la_rama\n# Crear una nueva rama\ngit branch nombre_de_la_rama\n# Hacer un merge de una rama\ngit merge nombre_de_la_rama\n# Hacer un pull del repositorio remoto\ngit pull origin main\n# Hacer un push al repositorio remoto\ngit push origin main\n</code></pre>"},{"location":"EDD/introduccion_git/#ejercicios-propuestos","title":"Ejercicios propuestos","text":"<p>Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</p> <p>Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p> <p>Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p> <p>Pr\u00e1ctica 4: Crear una nueva rama, realizar cambios y hacer un merge con la rama principal.</p>"},{"location":"EDD/introduccion_git/#conclusion","title":"Conclusi\u00f3n","text":"<p>Git es una herramienta poderosa para el control de versiones y la colaboraci\u00f3n en proyectos de software. Con estos conceptos b\u00e1sicos, puedes comenzar a utilizar Git para gestionar tu c\u00f3digo y colaborar con otros desarrolladores. A medida que te familiarices con Git, podr\u00e1s explorar caracter\u00edsticas m\u00e1s avanzadas como rebase, cherry-pick y resoluci\u00f3n de conflictos.</p>"},{"location":"EDD/introduccion_git/#recursos-adicionales","title":"Recursos adicionales","text":"<ul> <li>Documentaci\u00f3n oficial de Git</li> <li>GitHub Guides</li> <li>Pro Git Book</li> <li>Git Cheat Sheet</li> <li>Git Immersion</li> <li>Learn Git Branching</li> </ul>"},{"location":"EDD/introduccion_git_prac1/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 1","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a crear un nuevo repositorio local, realizar commits y entender la estructura b\u00e1sica de un repositorio Git. Aseg\u00farate de tener Git instalado en tu sistema antes de comenzar.</p>"},{"location":"EDD/introduccion_git_prac1/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un nuevo repositorio local.</li> <li>Realizar commits de archivos.</li> <li>Comprender la estructura b\u00e1sica de un repositorio Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener acceso a la l\u00ednea de comandos (terminal).</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac1/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio local</p> Soluci\u00f3n <p>Abre la terminal y navega al directorio donde deseas crear el nuevo repositorio. Luego, ejecuta el siguiente comando:</p> <pre><code>git init mi_proyecto\n</code></pre> <p>Reemplaza <code>mi_proyecto</code> con el nombre que desees para tu nuevo repositorio. Esto crear\u00e1 un nuevo directorio llamado <code>.git</code> en el directorio actual, que contendr\u00e1 todos los archivos y configuraciones necesarias para el repositorio Git.</p> </li> <li> <p>Navega al directorio del repositorio</p> Soluci\u00f3n <p>Cambia al directorio del nuevo repositorio utilizando el siguiente comando:</p> <pre><code>cd mi_proyecto\n</code></pre> </li> <li> <p>Crea un archivo README.md</p> Soluci\u00f3n <p>Crea un archivo README.md para documentar tu proyecto. Puedes usar cualquier editor de texto o el siguiente comando:</p> <pre><code>echo \"# Mi Proyecto\" &gt; README.md\n</code></pre> </li> <li> <p>Agrega el archivo al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <p>Agrega el archivo README.md al \u00e1rea de preparaci\u00f3n utilizando el siguiente comando:</p> <pre><code>git add README.md\n</code></pre> </li> <li> <p>Realiza un commit con el mensaje \"commit inicial\"</p> Soluci\u00f3n <p>Realiza un commit de los cambios utilizando el siguiente comando:</p> <pre><code>git commit -m \"commit inicial\"\n</code></pre> </li> <li> <p>Visualiza el historial de commits</p> Soluci\u00f3n <p>Para ver el historial de commits, utiliza el siguiente comando:</p> <pre><code>git log\n</code></pre> <p>Esto mostrar\u00e1 una lista de todos los commits realizados en el repositorio, junto con sus mensajes y hashes.</p> </li> </ol>"},{"location":"EDD/introduccion_git_prac1/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"</code></pre>"},{"location":"EDD/introduccion_git_prac1/#configura-tus-credenciales-de-git","title":"Configura tus credenciales de Git","text":"<p>Para que Git pueda identificarte como autor de los commits, es importante configurar tus credenciales. Puedes hacerlo ejecutando los siguientes comandos en la terminal:</p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tucorreo@ejemplo.com\"\n</code></pre> <p>Esto configurar\u00e1 tu nombre y correo electr\u00f3nico globalmente para todos los repositorios en tu m\u00e1quina. Si deseas configurarlos solo para un repositorio espec\u00edfico, omite la opci\u00f3n <code>--global</code>.</p>"},{"location":"EDD/introduccion_git_prac1/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>Comprender la estructura interna de un repositorio Git local es fundamental para aprovechar al m\u00e1ximo esta herramienta de control de versiones. Un repositorio Git se encuentra generalmente en un directorio .git en la ra\u00edz de tu proyecto. A continuaci\u00f3n, se detallan sus componentes principales:\u200b</p> <ul> <li>objects/: Almacena todo el contenido de tus   archivos, commits, \u00e1rboles y etiquetas. Cada objeto se identifica mediante un hash SHA-1, lo que garantiza la integridad de los datos.\u200b</li> <li>refs/: Contiene referencias a objetos commit, incluyendo ramas (refs/heads/), etiquetas (refs/tags/) y ramas remotas (refs/remotes/). Estas referencias ayudan a Git a rastrear diversos puntos en la historia de tu proyecto.\u200b</li> <li>HEAD: Es un archivo que indica la rama o commit actual en el que se basa tu directorio de trabajo. Informa a Git qu\u00e9 utilizar como padre para tu pr\u00f3ximo commit.\u200b</li> <li>index: Tambi\u00e9n conocido como \u00e1rea de preparaci\u00f3n o \"staging area\", este archivo binario contiene una lista ordenada de nombres de ruta, cada uno con permisos y el hash SHA-1 de un objeto blob. Sirve como intermediario entre tu directorio de trabajo y el repositorio, permiti\u00e9ndote acumular un conjunto de cambios para confirmar juntos.\u200b</li> <li>config: El archivo de configuraci\u00f3n principal de tu proyecto Git, donde se almacenan ajustes como remotos, configuraciones de push y ramas de seguimiento.\u200b</li> <li>logs/: Registra todos los cambios realizados a las referencias en el repositorio, proporcionando un historial de commits y otras acciones.\u200b</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac2/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 2","text":"<p>Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</p>"},{"location":"EDD/introduccion_git_prac2/#objetivos","title":"Objetivos","text":"<ul> <li>Crear un repositorio remoto en GitHub.</li> <li>Hacer un push de tu commit inicial al repositorio remoto.</li> <li>Comprender la diferencia entre repositorios locales y remotos.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac2/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea un nuevo repositorio remoto en GitHub</p> Soluci\u00f3n <ul> <li>Inicia sesi\u00f3n en tu cuenta de GitHub.</li> <li>Haz clic en el bot\u00f3n \"New\" o \"Crear repositorio\" en la parte superior derecha de la p\u00e1gina.</li> <li>Asigna un nombre a tu repositorio y selecciona si deseas que sea p\u00fablico o privado.</li> <li>Haz clic en \"Crear repositorio\".</li> </ul> </li> <li> <p>Copia la URL del repositorio remoto</p> Soluci\u00f3n <ul> <li>Una vez creado el repositorio, GitHub te proporcionar\u00e1 una URL para clonar el repositorio. Copia esta URL.</li> <li>La URL tendr\u00e1 un formato similar a <code>https://github.com/nombreUsuario/nombreRepositorio.git</code></li> <li>Si deseas usar SSH, la URL tendr\u00e1 un formato similar a <code>git@github.com:nombreUsuario/nombreRepositorio.git</code></li> </ul> </li> <li> <p>Configura el repositorio remoto en tu repositorio local</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega hasta el directorio de tu repositorio local.</li> <li>Usa el siguiente comando para agregar el repositorio remoto:   <pre><code>git remote add origin &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL que copiaste en el paso anterior.</li> </ul> </li> <li> <p>Verifica que el repositorio remoto se ha agregado correctamente</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para verificar que el repositorio remoto se ha agregado correctamente:   <pre><code>git remote -v\n</code></pre></li> <li>Deber\u00edas ver la URL del repositorio remoto en la salida del comando.</li> <li>La salida deber\u00eda ser similar a:   <pre><code>origin\n</code></pre></li> </ul> </li> <li> <p>Renombra la rama principal a <code>main</code> (opcional)</p> Soluci\u00f3n <ul> <li>Si tu repositorio remoto usa <code>main</code> como la rama principal, puedes renombrar tu rama local a <code>main</code> usando el siguiente comando:   <pre><code>git branch -m main\n</code></pre></li> <li>Luego, actualiza el nombre de la rama en el repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> </ul> </li> <li> <p>Haz un push de tu commit inicial al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tu commit inicial al repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Si est\u00e1s usando una rama diferente a <code>main</code>, reemplaza <code>main</code> con el nombre de tu rama actual.</li> <li>Si es la primera vez que haces un push a este repositorio, es posible que se te pida que ingreses tus credenciales de GitHub.</li> </ul> </li> <li> <p>Verifica que el push se ha realizado correctamente</p> Soluci\u00f3n <ul> <li>Ve a tu repositorio en GitHub y verifica que tu commit inicial se ha subido correctamente.</li> <li>Deber\u00edas ver el commit en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac2/#configura-un-certificado-de-seguridad-opcional","title":"Configura un certificado de seguridad (opcional)","text":"<p>Si est\u00e1s usando HTTPS y tienes problemas de autenticaci\u00f3n, puedes configurar un certificado de seguridad para evitar tener que ingresar tus credenciales cada vez que hagas un push. Puedes seguir las instrucciones en la documentaci\u00f3n oficial de GitHub para configurar un certificado de seguridad.</p>"},{"location":"EDD/introduccion_git_prac2/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>En esta pr\u00e1ctica, hemos aprendido a crear un repositorio remoto en GitHub y a hacer un push de nuestro commit inicial. Es importante entender la diferencia entre repositorios locales y remotos:</p> <ul> <li>Repositorio local: Es el repositorio que tienes en tu m\u00e1quina local. Aqu\u00ed es donde haces tus cambios y commits.</li> <li>Repositorio remoto: Es el repositorio que est\u00e1 alojado en un servidor (en este caso, GitHub). Aqu\u00ed es donde compartes tu trabajo con otros y colaboras en proyectos.</li> </ul> <p></p>"},{"location":"EDD/introduccion_git_prac3/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 3","text":"<p>En esta pr\u00e1ctica, aprender\u00e1s a clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</p>"},{"location":"EDD/introduccion_git_prac3/#objetivos","title":"Objetivos","text":"<ul> <li>Clonar un repositorio remoto.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> </ul>"},{"location":"EDD/introduccion_git_prac3/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Clona un repositorio remoto</p> Soluci\u00f3n <ul> <li>Accede al repositorio remoto que hemos creado en la Pr\u00e1ctica 2.</li> <li>Abre una terminal y navega al directorio donde deseas clonar el repositorio.</li> <li>Usa el siguiente comando para clonar el repositorio remoto:   <pre><code>git clone &lt;URL del repositorio remoto&gt;\n</code></pre></li> <li>Reemplaza <code>&lt;URL del repositorio remoto&gt;</code> con la URL del repositorio que deseas clonar.</li> </ul> </li> <li> <p>Navega al directorio del repositorio clonado</p> Soluci\u00f3n <ul> <li>Cambia al directorio del repositorio clonado utilizando el siguiente comando:   <pre><code>cd nombre_del_repositorio\n</code></pre></li> <li>Reemplaza <code>nombre_del_repositorio</code> con el nombre del repositorio clonado.</li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"bug arreglado\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"bug arreglado\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"bug arreglado\".</li> </ul> </li> <li> <p>Elimina el v\u00ednculo con mi repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para eliminar el v\u00ednculo con el repositorio remoto:   <pre><code>git remote remove origin\n</code></pre></li> <li>Esto eliminar\u00e1 la referencia al repositorio remoto.</li> </ul> </li> <li> <p>Crea un nuevo repositorio remoto en GitHub y vinculalo con tu repositorio local</p> Soluci\u00f3n <ul> <li>Si tienes dudas sobre c\u00f3mo hacerlo puedes consultar la Pr\u00e1ctica 2.</li> </ul> </li> <li> <p>Haz un push de tus cambios al nuevo repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de tus cambios al nuevo repositorio remoto:   <pre><code>git push -u origin main\n</code></pre></li> <li>Esto enviar\u00e1 tus cambios al nuevo repositorio remoto y establecer\u00e1 la rama <code>main</code> como la rama de seguimiento.</li> </ul> </li> <li> <p>Verifica que los cambios se han subido correctamente al repositorio remoto</p> Soluci\u00f3n <ul> <li>Ve a tu nuevo repositorio en GitHub y verifica que tus cambios se han subido correctamente.</li> <li>Deber\u00edas ver el commit con el mensaje \"bug arreglado\" en la pesta\u00f1a \"Commits\" del repositorio.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac3/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"</code></pre>"},{"location":"EDD/introduccion_git_prac3/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfC\u00f3mo es posible que me muestre dos commits si yo solo hice uno?</p> <ul> <li>Git es un sistema de control de versiones distribuido, lo que significa que cada copia del repositorio es una copia completa del historial de cambios.</li> <li>Cuando clonas un repositorio, obtienes una copia completa de todo el historial de commits, incluyendo los commits que ya existen en el repositorio remoto.</li> <li>Por lo tanto, al clonar un repositorio, ya tienes acceso a todos los commits que se han realizado en ese repositorio, incluso si no los has creado t\u00fa mismo.</li> <li>En este caso, el commit \"bug arreglado\" es el que t\u00fa hiciste, mientras que el commit \"commit inicial\" es el que ya exist\u00eda en el repositorio remoto antes de que lo clonaras.</li> <li>Esto es normal y esperado en Git, ya que cada commit tiene un identificador \u00fanico (hash) que lo distingue de los dem\u00e1s.</li> <li>Por lo tanto, aunque t\u00fa solo hayas creado un commit, el historial de commits del repositorio incluye todos los commits que se han realizado en el repositorio, incluyendo los que ya exist\u00edan antes de que lo clonaras.</li> <li>Esto te permite ver el historial completo de cambios y colaborar con otros desarrolladores de manera efectiva.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/","title":"Introducci\u00f3n a Git: Pr\u00e1ctica 4","text":""},{"location":"EDD/introduccion_git_prac4/#objetivos","title":"Objetivos","text":"<ul> <li>Crear una nueva rama.</li> <li>Realizar cambios en el c\u00f3digo.</li> <li>Hacer un commit de los cambios.</li> <li>Hacer un merge con la rama principal.</li> <li>Hacer un push de los cambios al repositorio remoto.</li> <li>Comprender la importancia de las ramas en Git.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#requisitos","title":"Requisitos","text":"<ul> <li>Tener Git instalado en tu sistema.</li> <li>Tener una cuenta en GitHub.</li> <li>Conocimientos b\u00e1sicos de comandos de terminal.</li> <li>Conocimientos b\u00e1sicos de Git.</li> <li>Haber completado la Pr\u00e1ctica 1: Crear un nuevo repositorio local y realizar un commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 2: Crear un repositorio remoto en GitHub y hacer un push de tu commit inicial.</li> <li>Haber completado la Pr\u00e1ctica 3: Clonar un repositorio remoto y realizar cambios en el c\u00f3digo.</li> </ul>"},{"location":"EDD/introduccion_git_prac4/#pasos-a-seguir","title":"Pasos a seguir","text":"<ol> <li> <p>Crea una nueva rama</p> Soluci\u00f3n <ul> <li>Abre la terminal y navega al directorio del repositorio local.</li> <li>Usa el siguiente comando para crear una nueva rama:   <pre><code>git branch nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Cambia a la nueva rama</p> Soluci\u00f3n <ul> <li>Cambia a la nueva rama utilizando el siguiente comando:   <pre><code>git checkout nueva_funcionalidad\n</code></pre></li> <li>Alternativamente, puedes crear y cambiar a la nueva rama en un solo paso utilizando:   <pre><code>git checkout -b nueva_funcionalidad\n</code></pre></li> </ul> </li> <li> <p>Realiza cambios en el c\u00f3digo</p> Soluci\u00f3n <ul> <li>Abre el archivo que deseas modificar en tu editor de texto.</li> <li>Realiza los cambios necesarios y guarda el archivo.</li> <li>Por ejemplo, puedes agregar una nueva funci\u00f3n o corregir un error en el c\u00f3digo.</li> </ul> </li> <li> <p>Agrega los cambios al \u00e1rea de preparaci\u00f3n</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para agregar los cambios al \u00e1rea de preparaci\u00f3n:   <pre><code>git add nombre_del_archivo\n</code></pre></li> <li>Reemplaza <code>nombre_del_archivo</code> con el nombre del archivo que modificaste.</li> <li>Si deseas agregar todos los cambios, puedes usar:   <pre><code>git add .\n</code></pre></li> <li>Esto agregar\u00e1 todos los archivos modificados al \u00e1rea de preparaci\u00f3n.</li> </ul> </li> <li> <p>Realiza un commit con un mensaje \"nueva funcionalidad agregada\"</p> Soluci\u00f3n <ul> <li>Realiza un commit de los cambios utilizando el siguiente comando:   <pre><code>git commit -m \"Nueva funcionalidad agregada\"\n</code></pre></li> <li>Esto crear\u00e1 un nuevo commit con el mensaje \"Nueva funcionalidad agregada\".</li> </ul> </li> <li> <p>Haz un merge con la rama principal</p> Soluci\u00f3n <ul> <li>Cambia a la rama principal utilizando el siguiente comando:   <pre><code>git checkout main\n</code></pre></li> <li>Luego, haz un merge de la nueva rama con la rama principal:   <pre><code>git merge nueva_funcionalidad\n</code></pre></li> <li>Esto combinar\u00e1 los cambios de la nueva rama en la rama principal.</li> </ul> </li> <li> <p>Haz un push de los cambios al repositorio remoto</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para hacer un push de los cambios al repositorio remoto:   <pre><code>git push origin main\n</code></pre></li> <li>Esto actualizar\u00e1 el repositorio remoto con los cambios realizados en la rama principal.</li> </ul> </li> <li> <p>Verifica que los cambios se hayan reflejado en el repositorio remoto</p> Soluci\u00f3n <ul> <li>Abre tu navegador y ve a la p\u00e1gina de tu repositorio en GitHub.</li> <li>Verifica que los cambios realizados en la rama principal se hayan reflejado en el repositorio remoto.</li> </ul> </li> <li> <p>Elimina la rama creada</p> Soluci\u00f3n <ul> <li>Si ya no necesitas la rama creada, puedes eliminarla utilizando el siguiente comando:   <pre><code>git branch -d nueva_funcionalidad\n</code></pre></li> <li>Esto eliminar\u00e1 la rama <code>nueva_funcionalidad</code> de tu repositorio local.</li> </ul> </li> <li> <p>Visualiza el historial de commits en modo gr\u00e1fico</p> Soluci\u00f3n <ul> <li>Usa el siguiente comando para visualizar el historial de commits en modo gr\u00e1fico:   <pre><code>git log --oneline --graph\n</code></pre></li> <li>Esto mostrar\u00e1 un gr\u00e1fico del historial de commits, incluyendo las ramas y merges realizados.</li> <li>Puedes usar <code>q</code> para salir del modo gr\u00e1fico.</li> </ul> </li> </ol>"},{"location":"EDD/introduccion_git_prac4/#estructura-de-nuestro-repositorio","title":"Estructura de nuestro repositorio","text":"<p>Una vez realizado el commit inicial, la estructura de tu repositorio Git local se ver\u00e1 algo as\u00ed:</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\ngitGraph\n    commit id: \"commit inicial\"\n    commit id: \"bug arreglado\"\n    branch nueva_funcionalidad\n    commit id: \"nueva funcionalidad agregada\"\n    checkout main\n    merge nueva_funcionalidad</code></pre>"},{"location":"EDD/introduccion_git_prac4/#profundizando-conceptos","title":"Profundizando conceptos","text":"<p>\u00bfQu\u00e9 es el puntero HEAD?</p> <p>El puntero HEAD es una referencia especial en Git que indica la rama o commit en el que te encuentras actualmente. Cuando cambias de rama, el puntero HEAD se actualiza para apuntar a la nueva rama. Esto te permite trabajar en diferentes ramas y realizar cambios sin afectar la rama principal hasta que decidas hacer un merge.</p> <p>\u00bfCuantas ramas puedo crear?</p> <p>No hay un l\u00edmite espec\u00edfico en la cantidad de ramas que puedes crear en un repositorio Git. Puedes crear tantas ramas como necesites para organizar tu trabajo y gestionar diferentes caracter\u00edsticas o correcciones de errores. Sin embargo, es recomendable mantener un n\u00famero razonable de ramas para evitar confusiones y facilitar la gesti\u00f3n del repositorio.</p> <p></p>"},{"location":"EDD/pd/","title":"Programaci\u00f3n did\u00e1ctica EDD Febrero 2025 Prometeo","text":""},{"location":"EDD/pd/#unidades-de-trabajo-ut","title":"Unidades de Trabajo (UT)","text":"<ul> <li> <p>UT1: Desarrollo de software.</p> <ol> <li>Concepto de programa inform\u00e1tico.</li> <li>C\u00f3digo fuente, c\u00f3digo objeto y c\u00f3digo ejecutable; tecnolog\u00edas de virtualizaci\u00f3n.</li> <li>Tipos de lenguajes de programaci\u00f3n. Paradigmas.</li> <li>Caracter\u00edsticas de los lenguajes m\u00e1s difundidos.</li> <li>Fases del desarrollo de una aplicaci\u00f3n: an\u00e1lisis, dise\u00f1o, codificaci\u00f3n, pruebas, documentaci\u00f3n, explotaci\u00f3n y mantenimiento, entre otras.</li> <li>Proceso de obtenci\u00f3n de c\u00f3digo ejecutable a partir del c\u00f3digo fuente; herramientas implicadas.</li> <li>Metodolog\u00edas \u00e1giles. T\u00e9cnicas. Caracter\u00edsticas.</li> </ol> </li> <li> <p>UT2: Instalaci\u00f3n y uso de entornos de desarrollo.</p> <ol> <li>Funciones de un entorno de desarrollo.</li> <li>Instalaci\u00f3n de un entorno de desarrollo.</li> <li>Uso b\u00e1sico de un entorno de desarrollo.</li> <li>Personalizaci\u00f3n del entorno de desarrollo: temas, estilos de codificaci\u00f3n,   m\u00f3dulos y extensiones, entre otras.</li> <li>Edici\u00f3n de programas.</li> <li>Generaci\u00f3n de ejecutables en distintos entornos.</li> <li>Herramientas y automatizaci\u00f3n.</li> </ol> </li> <li> <p>UT3: Dise\u00f1o y realizaci\u00f3n de pruebas.</p> <ol> <li>Planificaci\u00f3n de Pruebas.</li> <li>Tipos de pruebas: Funcionales, estructurales y regresi\u00f3n, entre otras.</li> <li>Procedimientos y casos de prueba.</li> <li>Pruebas de C\u00f3digo: Cubrimiento, valores l\u00edmite y clases de equivalencia,   entre otras.</li> <li>Pruebas unitarias; herramientas de automatizaci\u00f3n.</li> <li>Documentaci\u00f3n de las incidencias.</li> <li>Dobles de prueba. Tipos. Caracter\u00edsticas.</li> </ol> </li> <li> <p>UT4: Optimizaci\u00f3n y documentaci\u00f3n.</p> <ol> <li>Refactorizaci\u00f3n. Concepto. Limitaciones. Patrones de refactorizaci\u00f3n m\u00e1s   usuales. Refactorizaci\u00f3n y pruebas. Herramientas de ayuda a la   refactorizaci\u00f3n.</li> <li>Analizadores de c\u00f3digo.</li> <li>Control de versiones. Estructura de las herramientas de control de   versiones.</li> <li>Repositorios remotos.</li> <li>Documentaci\u00f3n. Uso de comentarios. Alternativas.</li> <li>Integraci\u00f3n continua. Herramientas.</li> </ol> </li> <li> <p>UT5: Elaboraci\u00f3n de diagramas de clases.</p> <ol> <li>Clases. Atributos, m\u00e9todos y visibilidad.</li> <li>Objetos. Instanciaci\u00f3n.</li> <li>Relaciones. Asociaci\u00f3n, navegabilidad y multiplicidad. Herencia,   composici\u00f3n, agregaci\u00f3n. Realizaci\u00f3n y dependencia.</li> <li>Notaci\u00f3n de los diagramas de clases.</li> <li>Herramientas.</li> <li>Generaci\u00f3n autom\u00e1tica de c\u00f3digo. Ingenier\u00eda inversa.</li> </ol> </li> <li> <p>UT6: Elaboraci\u00f3n de diagramas de comportamiento.</p> <ol> <li>Tipos. Campo de aplicaci\u00f3n.</li> <li>Diagrama de casos de uso. Actores, escenario, relaci\u00f3n de comunicaci\u00f3n.</li> <li>Diagrama de secuencia. L\u00ednea de vida de un objeto, activaci\u00f3n, env\u00edo de   mensajes.</li> <li>Diagrama de comunicaci\u00f3n. Objetos, mensajes.</li> <li>Diagrama de actividad. Diagrama de estados.</li> </ol> </li> </ul>"},{"location":"EDD/pd/#temporalizacion","title":"Temporalizaci\u00f3n","text":""},{"location":"EDD/pd/#semana-1-11-febrero","title":"Semana 1 (11 Febrero)","text":"<ul> <li>Martes 11: Presentaci\u00f3n de la asignatura y el profesor.</li> </ul>"},{"location":"EDD/pd/#semana-2-18-20-febrero","title":"Semana 2 (18-20 Febrero)","text":"<ul> <li>Martes 18: UT2: \u00bfQu\u00e9 es un IDE?</li> <li>Jueves 20: Tutoria: Dudas sobre la instalaci\u00f3n y configuraci\u00f3n del IDE.</li> </ul>"},{"location":"EDD/pd/#semana-3-25-27-febrero","title":"Semana 3 (25-27 Febrero)","text":"<ul> <li>Martes 25: UT1: Lenguajes de programaci\u00f3n.</li> <li>Jueves 27: Tutoria: Dudas sobre tipos de lenguajes de programaci\u00f3n.</li> </ul>"},{"location":"EDD/pd/#semana-4-4-6-marzo","title":"Semana 4 (4-6 Marzo)","text":"<ul> <li>Martes 4: UT4: Introducci\u00f3n a Git.</li> <li>Jueves 6: Tutoria: Dudas sobre Git y su instalaci\u00f3n.</li> </ul>"},{"location":"EDD/pd/#semana-5-11-13-marzo","title":"Semana 5 (11-13 Marzo)","text":"<ul> <li>Martes 11: UT4: Git remote y git branch.</li> <li>Jueves 13: Tutoria: Dudas sobre Git remote y git branch.</li> </ul>"},{"location":"EDD/pd/#semana-6-18-20-marzo","title":"Semana 6 (18-20 Marzo)","text":"<ul> <li>Martes 18: UT1: Ingenier\u00eda del Software, Fases y Ciclos de Vida.</li> <li>Jueves 20: Tutoria: Din\u00e1mica sobre ingenier\u00eda del Software, Fases y Ciclos de Vida.</li> </ul>"},{"location":"EDD/pd/#semana-7-25-27-marzo","title":"Semana 7 (25-27 Marzo)","text":"<ul> <li>Martes 25: UT1: Metodolog\u00edas \u00e1giles vs tradicionales. Conociendo SCRUM.</li> <li>Jueves 27: Tutoria: Din\u00e1mica sobre SCRUM y sus roles.</li> </ul>"},{"location":"EDD/pd/#semana-8-1-3-abril","title":"Semana 8 (1-3 Abril)","text":"<ul> <li>Martes 1: UT4: Git merge y resoluci\u00f3n de conflictos.</li> <li>Jueves 3: Tutoria: Dudas sobre Git merge y resoluci\u00f3n de conflictos.</li> </ul>"},{"location":"EDD/pd/#semana-9-8-abril","title":"Semana 9 (8 Abril)","text":"<ul> <li>Martes 8: UT4: Colaborando en repositorios Github.</li> </ul>"},{"location":"EDD/pd/#semana-10-22-abril","title":"Semana 10 (22 Abril)","text":"<ul> <li>Martes 22: UT3: Debugging.</li> </ul>"},{"location":"EDD/pd/#semana-11-29-abril","title":"Semana 11 (29 Abril)","text":"<ul> <li>Martes 29: UT3: Planificaci\u00f3n y tipos de pruebas.</li> </ul>"},{"location":"EDD/pd/#semana-12-6-mayo","title":"Semana 12 (6 Mayo)","text":"<ul> <li>Martes 6: UT4: Git rebase y squash.</li> </ul>"},{"location":"EDD/pd/#semana-13-13-mayo","title":"Semana 13 (13 Mayo)","text":"<ul> <li>Martes 13: UT4: Git reset y revert. Git stash.</li> </ul>"},{"location":"EDD/pd/#semana-14-20-mayo","title":"Semana 14 (20 Mayo)","text":"<ul> <li>Martes 20: UT2: Gestores de dependencias.</li> </ul>"},{"location":"EDD/pd/#semana-15-27-mayo","title":"Semana 15 (27 Mayo)","text":"<ul> <li>Martes 27: UT4: Documentaci\u00f3n de software. Markdown.</li> </ul>"},{"location":"EDD/pd/#semana-16-3-junio","title":"Semana 16 (3 Junio)","text":"<ul> <li>Martes 3: UT4: Documentaci\u00f3n de software. JavaDoc.</li> </ul>"},{"location":"EDD/pd/#semana-17-10-junio","title":"Semana 17 (10 Junio)","text":"<ul> <li>Martes 10: UT3: Pruebas unitarias. Junit.</li> </ul>"},{"location":"EDD/pd/#semana-18-17-junio","title":"Semana 18 (17 Junio)","text":"<ul> <li>Martes 17: UT3: Pruebas unitarias. Junit. (2a parte)</li> </ul>"},{"location":"EDD/pd/#semana-19-16-septiembre","title":"Semana 19 (16 Septiembre)","text":"<ul> <li>Martes 16: UT5: Introducci\u00f3n a UML.</li> </ul>"},{"location":"EDD/pd/#semana-20-23-septiembre","title":"Semana 20 (23 Septiembre)","text":"<ul> <li>Martes 23: UT5: Diagramas de clases. (1a parte)</li> </ul>"},{"location":"EDD/pd/#semana-21-30-septiembre","title":"Semana 21 (30 Septiembre)","text":"<ul> <li>Martes 30: UT5: Diagramas de clases. (2a parte)</li> </ul>"},{"location":"EDD/pd/#semana-22-7-octubre","title":"Semana 22 (7 Octubre)","text":"<ul> <li>Martes 7: UT6: Diagramas de casos de uso.</li> </ul>"},{"location":"EDD/pd/#semana-23-14-octubre","title":"Semana 23 (14 Octubre)","text":"<ul> <li>Martes 14: UT6: Diagramas de secuencia. (1a parte)</li> </ul>"},{"location":"EDD/pd/#semana-24-21-octubre","title":"Semana 24 (21 Octubre)","text":"<ul> <li>Martes 21: UT6: Diagramas de secuencia. (2a parte)</li> </ul>"},{"location":"EDD/pd/#semana-25-28-octubre","title":"Semana 25 (28 Octubre)","text":"<ul> <li>Martes 28: UT6: Diagramas de comunicaci\u00f3n.</li> </ul>"},{"location":"EDD/pd/#semana-26-4-noviembre","title":"Semana 26 (4 Noviembre)","text":"<ul> <li>Martes 4: UT6: Diagramas de actividad. (1a parte)</li> </ul>"},{"location":"EDD/pd/#semana-27-11-noviembre","title":"Semana 27 (11 Noviembre)","text":"<ul> <li>Martes 11: UT6: Diagramas de actividad. (2a parte)</li> </ul>"},{"location":"EDD/pd/#semana-28-18-noviembre","title":"Semana 28 (18 Noviembre)","text":"<ul> <li>Martes 18: Reservado para profundizar alg\u00fan tema.</li> </ul>"},{"location":"EDD/pd/#semana-29-25-noviembre","title":"Semana 29 (25 Noviembre)","text":"<ul> <li>Martes 25: Reservado para profundizar alg\u00fan tema.</li> </ul>"},{"location":"EDD/pd/#semana-30-2-diciembre","title":"Semana 30 (2 Diciembre)","text":"<ul> <li>Martes 2: Repaso.</li> </ul>"},{"location":"EDD/pd/#semana-31-9-diciembre","title":"Semana 31 (9 Diciembre)","text":"<ul> <li>Martes 9: Repaso.</li> </ul>"},{"location":"EDD/proyecto1/","title":"Proyecto 1: Profesionaliza tu proyecto Java","text":""},{"location":"EDD/proyecto1/#objetivo","title":"Objetivo","text":"<p>Aplicar herramientas y pr\u00e1cticas profesionales del desarrollo de software sobre un proyecto Java ya desarrollado en el m\u00f3dulo de Programaci\u00f3n o uno que yo os proveer\u00e9. El objetivo no es modificar la funcionalidad, sino estructurar, documentar, versionar y testear el proyecto como si fuera software profesional.</p>"},{"location":"EDD/proyecto1/#tareas-a-realizar","title":"Tareas a realizar","text":"<p>Tu trabajo consistir\u00e1 en preparar el entorno del proyecto Java aplicando los siguientes aspectos:</p>"},{"location":"EDD/proyecto1/#1-control-de-versiones-con-git","title":"1. Control de versiones con Git","text":"<ul> <li>Crear un repositorio en GitHub (puede ser privado o p\u00fablico, aunque si es privado deber\u00e1s invitarme al mismo).</li> <li>Subir correctamente el proyecto Java al repositorio, con estructura clara:</li> </ul> <pre><code>/src/\n/test/\n/docs/\nREADME.md\n</code></pre> <ul> <li>Aplicar una estrategia de ramas, como m\u00ednimo:<ul> <li><code>main</code>: versi\u00f3n estable.</li> <li><code>dev</code>: desarrollo activo.</li> <li><code>feature/&lt;nombre&gt;</code>: ramas para mejoras o tareas.</li> </ul> </li> <li>Realizar al menos 5 commits significativos con mensajes descriptivos (no usar \"subida\", \"commit 1\", etc.).</li> <li>Crear un <code>.gitignore</code> que excluya archivos de compilaci\u00f3n, temporales o IDEs.</li> </ul>"},{"location":"EDD/proyecto1/#2-readmemd-en-markdown","title":"2. README.md en Markdown","text":"<ul> <li>Crear un archivo <code>README.md</code> en la ra\u00edz del repositorio con:<ul> <li>Nombre del proyecto.</li> <li>Breve descripci\u00f3n funcional.</li> <li>Requisitos para compilar y ejecutar.</li> <li>Instrucciones de uso.</li> <li>Autor\u00eda y licencia.</li> </ul> </li> </ul>"},{"location":"EDD/proyecto1/#3-documentacion-tecnica-con-javadoc","title":"3. Documentaci\u00f3n t\u00e9cnica con Javadoc","text":"<ul> <li>Comentar las clases y sus m\u00e9todos p\u00fablicos usando la sintaxis est\u00e1ndar de Javadoc:</li> </ul> <pre><code>/**\n * Representa un producto en el inventario.\n * @author Nombre\n * @version 1.0\n */\npublic class Producto {\n    /**\n     * Devuelve el precio con IVA.\n     * @return precio final\n     */\n    public double calcularPrecioFinal() { ... }\n}\n</code></pre> <ul> <li>Generar la documentaci\u00f3n HTML con Javadoc y colocarla en la carpeta <code>/docs/</code>.</li> </ul>"},{"location":"EDD/proyecto1/#4-testing-automatico-con-junit","title":"4. Testing autom\u00e1tico con JUnit","text":"<ul> <li>A\u00f1adir al proyecto al menos 2 clases de test JUnit en el paquete <code>/test</code>.</li> <li>Crear m\u00e9todos de prueba para comprobar el funcionamiento de los m\u00e9todos principales (casos positivos y negativos).</li> <li>Usar anotaciones como <code>@Test</code>, <code>@BeforeEach</code>, <code>@AfterEach</code>.</li> </ul> <p>Ejemplo b\u00e1sico:</p> <pre><code>@Test\nvoid testCalcularPrecio() {\n    Producto p = new Producto(\"Pan\", 1.0, 10);\n    assertEquals(1.1, p.calcularPrecioFinal(), 0.01);\n}\n</code></pre>"},{"location":"EDD/proyecto1/#5-gestion-de-dependencias-con-maven-o-gradle","title":"5. Gesti\u00f3n de dependencias con Maven o Gradle","text":"<ul> <li>Convertir el proyecto Java en un proyecto gestionado por Maven o Gradle:<ul> <li>Si usas Maven, incluir un <code>pom.xml</code>.</li> <li>Si usas Gradle, incluir un <code>build.gradle</code>.</li> </ul> </li> <li>Declarar como m\u00ednimo las dependencias necesarias para:<ul> <li>JUnit 5.</li> <li>Cualquier otra librer\u00eda adicional que uses (opcional).</li> </ul> </li> </ul>"},{"location":"EDD/proyecto1/#entregables","title":"Entregables","text":"<ul> <li>Enlace al repositorio con:<ul> <li>Estructura clara de carpetas.</li> <li>README.md completo.</li> <li>C\u00f3digo Java documentado con Javadoc.</li> <li>Estructura de proyecto con Maven o Gradle.</li> <li>Carpeta <code>docs/</code> con la documentaci\u00f3n HTML generada.</li> <li>Carpeta <code>test/</code> con pruebas JUnit funcionales.</li> <li>Historial de commits y ramas en Git.</li> </ul> </li> </ul>"},{"location":"EDD/proyecto1/#rubrica-de-evaluacion-edd","title":"R\u00fabrica de evaluaci\u00f3n (EDD)","text":"Criterio Puntos Uso correcto de Git y estructura del repositorio 2 Commits claros y estrategia de ramas 2 README en Markdown bien elaborado 1 Documentaci\u00f3n con Javadoc y carpeta <code>/docs/</code> 1 Pruebas unitarias con JUnit 2 Configuraci\u00f3n de Maven o Gradle funcional 2 Total 10"},{"location":"EDD/UT1/","title":"UT1 - Desarrollo de Software","text":""},{"location":"EDD/UT1/#contexto","title":"Contexto","text":"<p>El desarrollo de software es un proceso complejo que implica la creaci\u00f3n, dise\u00f1o, implementaci\u00f3n y mantenimiento de aplicaciones y sistemas inform\u00e1ticos. Este proceso no solo se centra en la codificaci\u00f3n, sino que tambi\u00e9n abarca la planificaci\u00f3n, el an\u00e1lisis de requisitos, el dise\u00f1o arquitect\u00f3nico, las pruebas y la gesti\u00f3n del proyecto. En esta unidad, exploraremos los conceptos fundamentales del desarrollo de software, las metodolog\u00edas utilizadas y las mejores pr\u00e1cticas para garantizar un producto final de alta calidad.</p> <p>En esta unidad trataremos temas relacionados con el desarrollo de software como por ejemplo:</p> <ul> <li>Concepto de programa inform\u00e1tico</li> <li>Lenguajes de programaci\u00f3n: Tipos y caracter\u00edsticas</li> <li>Fases de desarrollo de una aplicaci\u00f3n</li> <li>Metodolog\u00edas \u00e1giles</li> </ul>"},{"location":"EDD/UT1/ejemplos%20mermaid/","title":"Ejemplos de plugins","text":""},{"location":"EDD/UT1/ejemplos%20mermaid/#ejemplo-de-plugin-de-resaltado-de-codigo","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code>// Ejemplo de plugin de resaltado de c\u00f3digo\nfunction highlightCode(code) {\n    // Resaltar el c\u00f3digo\n    return `&lt;pre&gt;&lt;code&gt;${code}&lt;/code&gt;&lt;/pre&gt;`;\n}\n// Ejemplo de uso\nconst code = \"console.log('Hola, mundo!');\";\nconst highlightedCode = highlightCode(code);\nconsole.log(highlightedCode);\n</code></pre>"},{"location":"EDD/UT1/ejemplos%20mermaid/#ejemplo-de-plugin-de-resaltado-de-codigo_1","title":"Ejemplo de plugin de resaltado de c\u00f3digo","text":"<pre><code># Ejemplo de plugin de resaltado de c\u00f3digo\ndef highlight_code(code):\n    # Resaltar el c\u00f3digo\n    return f\"&lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt;\"\n# Ejemplo de uso\ncode = \"print('Hola, mundo!')\"\nhighlighted_code = highlight_code(code)\nprint(highlighted_code)\n</code></pre>"},{"location":"EDD/UT1/ejemplos%20mermaid/#ejemplo-de-grafico-con-mermaid","title":"Ejemplo de gr\u00e1fico con mermaid","text":"<pre><code>graph TD;\n    A[Inicio] --&gt; B{\u00bfCondici\u00f3n?};\n    B -- S\u00ed --&gt; C[Acci\u00f3n 1];\n    B -- No --&gt; D[Acci\u00f3n 2];\n    C --&gt; E[Fin];\n    D --&gt; E;</code></pre>"},{"location":"EDD/UT1/ejemplos%20mermaid/#ejemplo-de-grafico-con-planuml","title":"Ejemplo de gr\u00e1fico con planUML","text":"<pre><code>@startuml\nactor User\nUser -&gt; (Login)\nUser -&gt; (Logout)\nUser -&gt; (Register)\nUser -&gt; (View Profile)\nUser -&gt; (Edit Profile)\nUser -&gt; (Delete Account)\nUser -&gt; (Search)\nUser -&gt; (View Search Results)   \n@enduml\n</code></pre>"},{"location":"EDD/UT1/ejemplos%20mermaid/#ejemplo-de-consejos-y-advertencias","title":"Ejemplo de consejos y advertencias","text":"<p>Consejo</p> <p>Recuerda siempre comentar tus funciones para mejorar la legibilidad.</p> <p>Advertencia</p> <p>Revisa bien los \u00edndices para evitar errores de navegaci\u00f3n.</p>"},{"location":"EDD/UT1/sesion1/","title":"Concepto de programa inform\u00e1tico","text":""},{"location":"EDD/UT1/sesion1/#que-es-un-programa-informatico","title":"\u00bfQu\u00e9 es un programa inform\u00e1tico?","text":"<p>Un programa inform\u00e1tico es un conjunto de instrucciones escritas en un lenguaje de programaci\u00f3n que una computadora puede interpretar y ejecutar para realizar una tarea espec\u00edfica o resolver un problema.</p> <p>Estas instrucciones siguen una l\u00f3gica secuencial y estructurada, y controlan c\u00f3mo se comporta el hardware (el ordenador) para procesar datos y producir resultados.</p>"},{"location":"EDD/UT1/sesion1/#componentes-de-un-programa-informatico","title":"Componentes de un programa inform\u00e1tico","text":"<p>Un programa suele componerse de:</p> <ul> <li>C\u00f3digo fuente: escrito por un programador en un lenguaje de programaci\u00f3n (por ejemplo, Java, Python, C#...).</li> <li>Datos: que pueden ser de entrada (input) o de salida (output).</li> <li>Estructura de control: decisiones, bucles y secuencias que determinan el flujo del programa.</li> <li>Comentarios: anotaciones en el c\u00f3digo que no se ejecutan, pero ayudan a entenderlo.</li> </ul>"},{"location":"EDD/UT1/sesion1/#ejemplo-basico","title":"Ejemplo b\u00e1sico","text":"<pre><code># Programa que suma dos n\u00fameros\na = 5\nb = 3\nsuma = a + b\nprint(\"La suma es:\", suma)\n</code></pre> <p>Este peque\u00f1o programa realiza una operaci\u00f3n b\u00e1sica, pero demuestra c\u00f3mo se puede automatizar una tarea.</p>"},{"location":"EDD/UT1/sesion1/#consejos-para-programadores-principiantes","title":"Consejos para programadores principiantes","text":"<ul> <li>Empieza por lo simple: No intentes hacer un videojuego desde el primer d\u00eda. Practica con operaciones b\u00e1sicas y peque\u00f1os algoritmos.</li> <li>Planifica antes de programar: Usa papel o diagramas de flujo antes de escribir c\u00f3digo.</li> <li>Aprende a depurar: Los errores son parte del proceso. Aprende a leer mensajes de error y a usar herramientas como el depurador.</li> </ul>"},{"location":"EDD/UT1/sesion1/#advertencias-comunes","title":"Advertencias comunes","text":"<ul> <li>No copies c\u00f3digo sin entenderlo. Puede que funcione, pero si no comprendes c\u00f3mo lo hace, no estar\u00e1s aprendiendo.</li> <li>Evita la \"programaci\u00f3n por prueba y error\". Adivinar hasta que funcione no es sostenible ni profesional.</li> <li>Cuidado con los bucles infinitos y errores de l\u00f3gica. Son m\u00e1s comunes de lo que crees.</li> </ul>"},{"location":"EDD/UT1/sesion1/#programas-informaticos-en-la-vida-real","title":"Programas inform\u00e1ticos en la vida real","text":"<ul> <li>Apps m\u00f3viles: WhatsApp, Spotify.</li> <li>Aplicaciones web: Gmail, YouTube.</li> <li>Software de escritorio: Word, Excel, Photoshop.</li> <li>Sistemas empotrados: El software que controla un microondas o una lavadora.</li> </ul> <p>Todos estos son programas inform\u00e1ticos que, aunque complejos, se basan en los mismos principios que el peque\u00f1o script de ejemplo.</p>"},{"location":"EDD/UT1/sesion1/#conclusion","title":"Conclusi\u00f3n","text":"<p>Un programa inform\u00e1tico no es m\u00e1s que una soluci\u00f3n codificada a un problema. Entender su l\u00f3gica, estructura y finalidad es el primer paso para convertirse en un buen desarrollador. Aprender a programar es como aprender un nuevo idioma: requiere paciencia, pr\u00e1ctica y mucha curiosidad.</p>"},{"location":"EDD/UT1/sesion2/","title":"Lenguajes de programaci\u00f3n: Tipos y caracter\u00edsticas","text":""},{"location":"EDD/UT1/sesion2/#que-es-un-lenguaje-de-programacion","title":"\u00bfQu\u00e9 es un lenguaje de programaci\u00f3n?","text":"<p>Un lenguaje de programaci\u00f3n es un sistema formal que permite escribir instrucciones que una m\u00e1quina puede interpretar y ejecutar. Es el puente entre el pensamiento del programador y el comportamiento del ordenador.</p> <p>Los lenguajes de programaci\u00f3n permiten crear programas para automatizar tareas, procesar datos, interactuar con usuarios o controlar dispositivos.</p>"},{"location":"EDD/UT1/sesion2/#tipos-de-lenguajes-de-programacion","title":"Tipos de lenguajes de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n se pueden clasificar en varias categor\u00edas:</p> <ol> <li>Seg\u00fan el nivel de abstracci\u00f3n<ul> <li>Lenguajes de bajo nivel: Se acercan m\u00e1s al hardware y son dif\u00edciles de entender para los humanos. Ejemplo: ensamblador.</li> <li>Lenguajes de alto nivel: M\u00e1s cercanos al lenguaje humano y m\u00e1s f\u00e1ciles de usar. Ejemplo: Python, Java.</li> </ul> </li> </ol> <p>Note</p> <p>Cuanto m\u00e1s alto es el nivel, m\u00e1s f\u00e1cil es programar, pero m\u00e1s se depende del compilador/int\u00e9rprete.</p> <ol> <li> <p>Seg\u00fan el modo de ejecuci\u00f3n</p> <ul> <li>Lenguajes compilados: Se traducen a c\u00f3digo m\u00e1quina antes de ejecutarse. Ejemplo: C, C++.</li> <li>Lenguajes interpretados: Se traducen l\u00ednea por l\u00ednea durante la ejecuci\u00f3n. Ejemplo: Python, JavaScript.</li> <li>Lenguajes mixtos: Combinan ambos enfoques. Ejemplo: Java (compilado a bytecode y luego interpretado por la JVM).</li> </ul> </li> <li> <p>Seg\u00fan el paradigma de programaci\u00f3n</p> <ul> <li>Lenguajes imperativos: Se centran en c\u00f3mo se debe hacer algo. Ejemplo: C, Pascal.</li> <li>Lenguajes declarativos: Se centran en qu\u00e9 se quiere lograr. Ejemplo: SQL, Prolog.</li> <li>Lenguajes orientados a objetos: Basados en el concepto de objetos que contienen datos y m\u00e9todos. Ejemplo: Java, C#.</li> <li>Lenguajes funcionales: Se centran en la evaluaci\u00f3n de funciones y evitan el estado mutable. Ejemplo: Haskell, Lisp.</li> </ul> </li> </ol> <p>Note</p> <p>Los lenguajes modernos suelen combinar varios paradigmas (por ejemplo, Python es multiparadigma).</p>"},{"location":"EDD/UT1/sesion2/#caracteristicas-comunes-de-los-lenguajes","title":"Caracter\u00edsticas comunes de los lenguajes","text":"<ul> <li>Sintaxis clara: Qu\u00e9 tan f\u00e1cil es leer o escribir c\u00f3digo.</li> <li>Portabilidad: Qu\u00e9 tan bien se ejecuta en distintos sistemas operativos.</li> <li>Tipado: Si las variables tienen un tipo definido (tipado fuerte o d\u00e9bil; est\u00e1tico o din\u00e1mico).</li> <li>Gesti\u00f3n de memoria: Autom\u00e1tica (como en Java) o manual (como en C).</li> <li>Bibliotecas y comunidad: Cu\u00e1ntas herramientas est\u00e1n disponibles y cu\u00e1n grande es la comunidad.</li> </ul>"},{"location":"EDD/UT1/sesion2/#consejos-para-elegir-un-lenguaje","title":"Consejos para elegir un lenguaje","text":"<ul> <li>No te cases con uno solo. Cada lenguaje tiene su contexto ideal.</li> <li>Empieza por los m\u00e1s legibles: Python o Java son ideales para comenzar.</li> <li>Aprende las bases, no solo la sintaxis. Los conceptos son transferibles.</li> <li>Explora varios paradigmas. As\u00ed ser\u00e1s m\u00e1s vers\u00e1til como desarrollador.</li> </ul>"},{"location":"EDD/UT1/sesion2/#errores-comunes","title":"Errores comunes","text":"<ul> <li>Confundir compilador con int\u00e9rprete.</li> <li>Pensar que un lenguaje es \u201cmejor\u201d que otro en general. Todo depende del uso.</li> <li>Aprender solo la sintaxis sin entender los conceptos.</li> </ul>"},{"location":"EDD/UT1/sesion2/#conclusion","title":"Conclusi\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n son herramientas poderosas que nos permiten comunicarnos con las m\u00e1quinas. Conocer sus tipos y caracter\u00edsticas es esencial para elegir el adecuado para cada tarea y para convertirnos en programadores competentes. La pr\u00e1ctica y la curiosidad son claves en este viaje.</p>"},{"location":"EDD/UT1/sesion3/","title":"Fases de desarrollo de una aplicaci\u00f3n","text":""},{"location":"EDD/UT1/sesion3/#contexto","title":"Contexto","text":"<p>Desarrollar una aplicaci\u00f3n no es solo escribir c\u00f3digo. Es un proceso estructurado que incluye desde entender el problema hasta entregar el software final y mantenerlo en el tiempo.</p> <p>Este proceso se divide en fases, que ayudan a organizar el trabajo, reducir errores y garantizar que el resultado cumpla con las necesidades del cliente o usuario final.</p>"},{"location":"EDD/UT1/sesion3/#fases-principales-del-desarrollo-de-software","title":"Fases principales del desarrollo de software","text":"<ol> <li>An\u00e1lisis de requisitos</li> </ol> <p>\u00bfQu\u00e9 necesita el cliente?</p> <ul> <li>Se recopila la informaci\u00f3n sobre lo que debe hacer la aplicaci\u00f3n.</li> <li>Se identifican las necesidades, restricciones y objetivos.</li> <li>Puede implicar entrevistas, cuestionarios, observaci\u00f3n...</li> </ul> <p>Example</p> <p>Reuniones con el cliente, an\u00e1lisis de mercado, estudios de viabilidad.</p> <p>Tip</p> <p>Escucha m\u00e1s de lo que hablas. El \u00e9xito depende de entender bien el problema.</p> <ol> <li>Dise\u00f1o</li> </ol> <p>\u00bfC\u00f3mo lo vamos a construir?</p> <ul> <li>Se define la arquitectura del sistema (estructura general).</li> <li>Se dise\u00f1a la interfaz de usuario (UI) y la experiencia de usuario (UX).</li> <li>Se planifican las bases de datos, clases, m\u00f3dulos, etc.</li> </ul> <p>Example</p> <p>Diagramas UML, wireframes, diagramas de flujo, maquetas.</p> <p>Tip</p> <p>Un buen dise\u00f1o evita muchos errores en fases posteriores.</p> <ol> <li>Implementaci\u00f3n</li> </ol> <p>\u00a1Hora de programar!</p> <ul> <li>Se traduce el dise\u00f1o en c\u00f3digo real utilizando un lenguaje de programaci\u00f3n.</li> <li>Puede realizarse de forma individual o en equipo.</li> <li>Se suele usar control de versiones (como Git) y entornos de desarrollo (IDEs).</li> </ul> <p>Example</p> <p>Programar una aplicaci\u00f3n m\u00f3vil que permita a los usuarios gestionar sus tareas diarias.</p> <p>Tip</p> <p>Escribe c\u00f3digo limpio y documentado. Facilita el mantenimiento y la colaboraci\u00f3n.</p> <ol> <li>Pruebas</li> </ol> <p>\u00bfFunciona como deber\u00eda?</p> <ul> <li>Se verifica que la aplicaci\u00f3n funciona correctamente y sin errores.</li> <li>Tipos: pruebas unitarias, de integraci\u00f3n, funcionales, de rendimiento...</li> </ul> <p>Example</p> <p>Probar que si eliminas todas las tareas de una lista la aplicaci\u00f3n sigue funcionando correctamente.</p> <p>Tip</p> <p>No dejes las pruebas para el final. Hazlas a medida que desarrollas. Cuanto antes encuentres errores, mejor.</p> <ol> <li>Despliegue</li> </ol> <p>Vamos a ponerlo en producci\u00f3n.</p> <ul> <li>Se instala la aplicaci\u00f3n en el entorno real de uso.</li> <li>Puede implicar subirla a servidores, tiendas de apps, etc.</li> <li>A veces se hace en fases: beta, producci\u00f3n...</li> </ul> <p>Example</p> <p>Lanzar una nueva versi\u00f3n de una app en Google Play o App Store.</p> <p>Tip</p> <p>Aseg\u00farate de tener un plan de contingencia por si algo sale mal en producci\u00f3n. Automatiza el despliegue si es posible (CI/CD).</p> <ol> <li>Mantenimiento</li> </ol> <p>\u00bfY despu\u00e9s qu\u00e9?</p> <ul> <li>Se corrigen errores, se a\u00f1aden nuevas funcionalidades y se mejora el rendimiento.</li> <li>Es un proceso continuo que puede durar a\u00f1os.</li> <li>Se recopila feedback de los usuarios para futuras mejoras.</li> <li>Se actualizan dependencias y se asegura la compatibilidad con nuevas tecnolog\u00edas.</li> </ul> <p>Example</p> <p>Actualizar una app para que funcione con la \u00faltima versi\u00f3n de Android o iOS.</p> <p>Tip</p> <p>Mant\u00e9n una buena comunicaci\u00f3n con los usuarios. Ellos son la mejor fuente de informaci\u00f3n para mejorar tu aplicaci\u00f3n.</p>"},{"location":"EDD/UT1/sesion3/#errores-comunes-de-alumnos","title":"Errores comunes de alumnos","text":"<ul> <li>Empezar a programar sin entender bien el problema.</li> <li>Saltarse el dise\u00f1o o hacerlo \"de cabeza\".</li> <li>No hacer pruebas porque \"el c\u00f3digo ya funciona\".</li> <li>No documentar ni versionar su trabajo.</li> </ul>"},{"location":"EDD/UT1/sesion3/#conclusion","title":"Conclusi\u00f3n","text":"<p>El desarrollo de software es un proceso complejo pero estructurado. Conocer las fases y seguirlas adecuadamente es clave para crear aplicaciones de calidad. Cada fase tiene su importancia y no se deben saltar pasos, ya que cada uno contribuye al \u00e9xito del proyecto final.</p>"},{"location":"EDD/UT1/sesion4/","title":"Metodolog\u00edas \u00e1giles","text":""},{"location":"EDD/UT1/sesion4/#que-son-las-metodologias-agiles","title":"\u00bfQu\u00e9 son las metodolog\u00edas \u00e1giles?","text":"<p>Las metodolog\u00edas \u00e1giles son una forma de organizar y gestionar proyectos de desarrollo de software de forma flexible, r\u00e1pida y colaborativa. Su principal objetivo es entregar valor al cliente de forma continua, adapt\u00e1ndose a los cambios y fomentando la comunicaci\u00f3n constante entre todos los implicados.</p> <p>Note</p> <p>Las metodolog\u00edas \u00e1giles se centran en la colaboraci\u00f3n y la adaptaci\u00f3n a los cambios, en lugar de seguir un plan r\u00edgido. Esto permite a los equipos responder r\u00e1pidamente a las necesidades del cliente y mejorar continuamente el producto.</p>"},{"location":"EDD/UT1/sesion4/#principios-clave-de-las-metodologias-agiles","title":"Principios clave de las metodolog\u00edas \u00e1giles","text":"<ul> <li>Personas y comunicaci\u00f3n por encima de procesos y herramientas.</li> <li>Software que funciona por encima de documentaci\u00f3n extensa.</li> <li>Colaboraci\u00f3n con el cliente por encima de la negociaci\u00f3n de contratos.</li> <li>Respuesta al cambio por encima de seguir un plan cerrado.</li> </ul> <p>Note</p> <p>Estos principios se resumen en el Manifiesto \u00c1gil, que establece los valores y principios fundamentales de las metodolog\u00edas \u00e1giles. El Manifiesto \u00c1gil fue creado en 2001 por un grupo de 17 desarrolladores de software que buscaban una forma m\u00e1s efectiva de trabajar.</p>"},{"location":"EDD/UT1/sesion4/#principales-metodologias-agiles","title":"Principales metodolog\u00edas \u00e1giles","text":"<ul> <li>Scrum: Se basa en la gesti\u00f3n de proyectos mediante iteraciones cortas llamadas \"sprints\". Cada sprint tiene una duraci\u00f3n fija y al final se entrega un incremento del producto. Scrum fomenta la colaboraci\u00f3n entre el equipo y el cliente, y utiliza reuniones diarias para mantener a todos informados sobre el progreso.</li> <li>Kanban: Se centra en la visualizaci\u00f3n del flujo de trabajo y la gesti\u00f3n del trabajo en curso. Utiliza un tablero Kanban para mostrar las tareas y su estado, lo que permite identificar cuellos de botella y mejorar la eficiencia del equipo.</li> <li>Extreme Programming (XP): Se centra en la calidad del software y la satisfacci\u00f3n del cliente. Utiliza pr\u00e1cticas como la programaci\u00f3n en pareja, la integraci\u00f3n continua y el desarrollo basado en pruebas para garantizar que el software cumpla con los requisitos del cliente y sea de alta calidad.</li> <li>Lean: Se basa en los principios de la producci\u00f3n ajustada y busca eliminar el desperdicio en el proceso de desarrollo. Lean se centra en la entrega continua de valor al cliente y la mejora continua del proceso.</li> </ul>"},{"location":"EDD/UT1/sesion4/#ventajas-de-las-metodologias-agiles","title":"Ventajas de las metodolog\u00edas \u00e1giles","text":"<ul> <li>Flexibilidad: Permiten adaptarse a los cambios en los requisitos del cliente y en el entorno del proyecto.</li> <li>Colaboraci\u00f3n: Fomentan la comunicaci\u00f3n constante entre el equipo y el cliente, lo que mejora la comprensi\u00f3n de los requisitos y la satisfacci\u00f3n del cliente.</li> <li>Entrega continua: Permiten entregar incrementos del producto de forma regular, lo que facilita la obtenci\u00f3n de feedback y la mejora continua.</li> <li>Mejora continua: Fomentan la reflexi\u00f3n y la mejora del proceso de desarrollo, lo que permite al equipo aprender de sus errores y mejorar su rendimiento.</li> <li>Motivaci\u00f3n: Fomentan la autonom\u00eda y la responsabilidad del equipo, lo que aumenta la motivaci\u00f3n y el compromiso de los miembros del equipo.</li> </ul>"},{"location":"EDD/UT1/sesion4/#desventajas-de-las-metodologias-agiles","title":"Desventajas de las metodolog\u00edas \u00e1giles","text":"<ul> <li>Falta de documentaci\u00f3n: Pueden llevar a una falta de documentaci\u00f3n formal, lo que puede dificultar la comprensi\u00f3n del proyecto a largo plazo.</li> <li>Dependencia del equipo: El \u00e9xito de las metodolog\u00edas \u00e1giles depende en gran medida de la colaboraci\u00f3n y la comunicaci\u00f3n del equipo, lo que puede ser un desaf\u00edo si hay problemas de comunicaci\u00f3n o conflictos entre los miembros del equipo.</li> <li>Dificultad para escalar: Pueden ser dif\u00edciles de implementar en proyectos grandes o en equipos distribuidos, ya que requieren una alta colaboraci\u00f3n y comunicaci\u00f3n constante.</li> <li>Resistencia al cambio: Algunos miembros del equipo pueden resistirse a adoptar nuevas pr\u00e1cticas o a cambiar su forma de trabajar, lo que puede dificultar la implementaci\u00f3n de metodolog\u00edas \u00e1giles.</li> </ul>"},{"location":"EDD/UT1/sesion4/#metodologia-scrum","title":"Metodolog\u00eda SCRUM","text":""},{"location":"EDD/UT1/sesion4/#que-es-scrum","title":"\u00bfQu\u00e9 es Scrum?","text":"<p>Scrum es una de las metodolog\u00edas \u00e1giles m\u00e1s populares. Se basa en trabajar por ciclos cortos y repetitivos, llamados sprints, donde cada equipo se organiza para entregar una parte del producto funcional.</p> <p>Note</p> <p>Piensa en Scrum como una forma de dividir un gran proyecto en piezas m\u00e1s peque\u00f1as que se van construyendo, revisando y mejorando constantemente.</p>"},{"location":"EDD/UT1/sesion4/#roles-en-scrum","title":"Roles en Scrum","text":"<ul> <li>Product Owner: Re</li> </ul>"},{"location":"EDD/UT3/","title":"Dise\u00f1o y realizaci\u00f3n de pruebas","text":""},{"location":"EDD/UT3/#prueba-de-software","title":"Prueba de software","text":"<p>La prueba de software o testing es una pr\u00e1ctica muy importante en el desarrollo de software, ya que nos ayuda a asegurar que nuestro programa funcione correctamente y est\u00e9 libre de errores.</p> <p>El testing es una parte fundamental del proceso de desarrollo, ya que garantiza la calidad del programa y permite detectar y solucionar errores antes de que llegue a los usuarios finales.</p> <p>Existen diferentes tipos de pruebas, cada una con un objetivo espec\u00edfico, pero en general consisten en ejecutar casos de prueba o escenarios concretos con el objetivo de comprobar que el programa se comporta como se espera.</p> <p>Es imposible probar todos los casos posibles, pero cuantas m\u00e1s pruebas se realicen y m\u00e1s completas sean, m\u00e1s se podr\u00e1 reducir el riesgo de errores.</p>"},{"location":"EDD/UT3/#etapas-del-proceso-de-prueba","title":"Etapas del proceso de prueba","text":"<p>Hay distintas etapas en el proceso de testing:</p> <ol> <li>Planificaci\u00f3n de la prueba: En esta fase se definen los objetivos de las pruebas, se crea un plan de prueba y se seleccionan las herramientas y recursos necesarios.</li> <li>Creaci\u00f3n de los casos de prueba: Se dise\u00f1an los casos de prueba, que son escenarios concretos que se desean verificar. Esto incluye los pasos a seguir, los datos de entrada y los resultados esperados.</li> <li>Ejecuci\u00f3n de los casos de prueba: Se llevan a cabo los casos de prueba siguiendo los pasos definidos y comprobando que el programa devuelve los resultados esperados.</li> <li>An\u00e1lisis de resultados: Se revisan los resultados obtenidos, se registran los errores encontrados y se decide qu\u00e9 acciones tomar para solucionarlos</li> <li>Regresi\u00f3n: Una vez corregidos los errores, se repiten las pruebas (paso 3) para asegurar que los cambios no han afectado negativamente a otras partes del programa.</li> <li>Aceptaci\u00f3n: Cuando todos los casos de prueba se han superado y se ha realizado una regresi\u00f3n adecuada, se considera que el programa est\u00e1 listo para ser entregado al cliente o puesto en producci\u00f3n.</li> </ol>"},{"location":"EDD/UT3/#clasificacion-de-las-pruebas","title":"Clasificaci\u00f3n de las pruebas","text":""},{"location":"EDD/UT3/#segun-su-realizacion","title":"Seg\u00fan su realizaci\u00f3n","text":"<ul> <li>Pruebas manuales: Son realizadas por una persona que ejecuta los casos de prueba y analiza los resultados. Este tipo se utiliza especialmente cuando se requiere una evaluaci\u00f3n visual o comprobar el comportamiento del programa en situaciones diversas.</li> <li>Pruebas automatizadas: Son realizadas mediante herramientas o programas espec\u00edficos. Se utilizan para monitorizar cambios en el software y detectar incidencias. Son \u00fatiles para reducir el tiempo de prueba y asegurar que todos los casos se ejecutan de forma consistente.</li> </ul>"},{"location":"EDD/UT3/#segun-el-conocimiento-del-sistema","title":"Seg\u00fan el conocimiento del sistema","text":"<ul> <li>Pruebas de caja negra: Validan el comportamiento del programa sin tener en cuenta su implementaci\u00f3n interna. Se basan en las especificaciones, entradas y salidas, sin necesidad de acceso al c\u00f3digo fuente.</li> <li>Pruebas de caja blanca: Validan el comportamiento considerando la implementaci\u00f3n interna del programa. Requieren acceso al c\u00f3digo y el uso de t\u00e9cnicas como el an\u00e1lisis o revisi\u00f3n del c\u00f3digo para verificar que se cumplen los criterios de calidad.</li> </ul>"},{"location":"EDD/UT3/#segun-su-proposito","title":"Seg\u00fan su prop\u00f3sito","text":"<ul> <li>Pruebas unitarias: Verifican el correcto funcionamiento de cada unidad o m\u00f3dulo individual del programa. Su objetivo es asegurarse de que cada parte funciona correctamente de forma aislada.</li> <li>Pruebas de integraci\u00f3n: Verifican que las distintas unidades o m\u00f3dulos funcionan correctamente al interactuar entre ellos, para detectar errores en la integraci\u00f3n.</li> <li>Pruebas de sistema: Eval\u00faan el funcionamiento del programa como un todo, asegurando que cumple con los requisitos globales y est\u00e1 listo para su entrega o producci\u00f3n.</li> <li>Pruebas de validaci\u00f3n: Verifican que el programa cumple con los requisitos del cliente o usuario final. Se asegura que el software hace lo que se espera.</li> <li>Pruebas de carga: Eval\u00faan c\u00f3mo se comporta el programa bajo una carga de trabajo elevada. El objetivo es garantizar que el sistema puede manejar la carga prevista sin fallos.</li> </ul>"},{"location":"EDD/UT3/ejercicio_junit/","title":"Ejercicio JUnit","text":""},{"location":"EDD/UT3/ejercicio_junit/#pruebas-de-bank-account","title":"Pruebas de Bank Account","text":"<p>Se nos ha pedido crear una aplicaci\u00f3n bancaria para gestionar las cuentas bancarias de los clientes. Nuestra tarea consistir\u00e1 en programar la l\u00f3gica de la aplicaci\u00f3n y comprobar que funciona correctamente utilizando pruebas unitarias.</p>"},{"location":"EDD/UT3/junit/","title":"JUnit","text":"<p>JUnit es una librer\u00eda de Java que proporciona un marco para escribir y ejecutar pruebas de software.</p>"},{"location":"EDD/UT3/junit/#instalacion-de-junit-mediante-maven","title":"Instalaci\u00f3n de JUnit mediante Maven","text":"<p>Podemos instalar la librer\u00eda JUnit mediante Maven.</p> <p>Maven es una herramienta de gesti\u00f3n de proyectos que se basa en un conjunto de convenciones que definen c\u00f3mo deben construirse y empaquetarse los proyectos, as\u00ed como sus dependencias con otros proyectos o librer\u00edas.</p> <p>Esto hace que sea mucho m\u00e1s sencillo gestionar proyectos grandes, ya que se puede utilizar Maven para crear f\u00e1cilmente una estructura de directorios com\u00fan y automatizar tareas como la compilaci\u00f3n, validaci\u00f3n y empaquetado.</p> <p>Para poder utilizar JUnit en nuestro proyecto, debemos a\u00f1adir la librer\u00eda como una dependencia:</p> <ol> <li>Abre el archivo pom.xml que se encuentra en la ra\u00edz de tu proyecto.</li> <li>Una vez abierto, pulsa Alt + Insert y selecciona Add dependency.</li> <li>En el buscador, escribe junit-jupiter y selecciona la versi\u00f3n m\u00e1s reciente.</li> <li>Aseg\u00farate de que se haya a\u00f1adido la siguiente entrada al bloque : <li>Para actualizar las dependencias, haz clic derecho en el proyecto y selecciona Maven &gt; Update project o bien haz clic en el icono de actualizar en la barra de herramientas de Maven.</li> <pre><code>&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n    &lt;version&gt;5.10.0&lt;/version&gt; &lt;!-- Usa la \u00faltima versi\u00f3n disponible --&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Despu\u00e9s de a\u00f1adir esta dependencia, Maven descargar\u00e1 autom\u00e1ticamente JUnit y lo incluir\u00e1 en el classpath del proyecto cuando ejecutes los tests.</p> <p></p>"},{"location":"EDD/UT3/junit/#creacion-de-las-pruebas","title":"Creaci\u00f3n de las pruebas","text":"<p>En un proyecto Maven, las pruebas deben guardarse en la carpeta src/test/java.</p> <p>Puedes crear los archivos de prueba manualmente o utilizar las herramientas del IDE (como IntelliJ IDEA o Eclipse).</p>"},{"location":"EDD/UT3/junit/#ejecucion-de-las-pruebas","title":"Ejecuci\u00f3n de las pruebas","text":"<p>Las pruebas pueden ejecutarse de la misma forma que se ejecuta el c\u00f3digo fuente, utilizando los botones Run o Debug del IDE.</p>"},{"location":"EDD/UT3/junit/#assert","title":"Assert","text":"<p>En Java, la instrucci\u00f3n assert se utiliza para comprobar que una determinada condici\u00f3n se cumple durante la ejecuci\u00f3n de una prueba unitaria.</p> <p>Si la condici\u00f3n no se cumple, la prueba lanzar\u00e1 una excepci\u00f3n del tipo AssertionError.</p> <p>En JUnit, existen muchos tipos diferentes de instrucciones assert disponibles para realizar diversas verificaciones durante la ejecuci\u00f3n de pruebas unitarias.</p>"},{"location":"EDD/UT3/junit/#assertequals","title":"<code>assertEquals</code>","text":"<p>La instrucci\u00f3n <code>assertEquals(expected, actual)</code> se utiliza para comprobar que dos valores son iguales, donde expected es el valor esperado y actual es el valor obtenido.</p> <p>Si expected y actual son iguales, la prueba continuar\u00e1 ejecut\u00e1ndose. Si no lo son, la prueba fallar\u00e1 con un AssertionError.</p> <p>Importante</p> <p>Este m\u00e9todo utiliza el m\u00e9todo equals() de los objetos para determinar si los objetos son iguales o no.</p> <pre><code>assertEquals(10, 3 + 7), // Integer\nassertEquals('b', 'a' + 1), // Char\nassertEquals(1.5, 3.0 / 2), // Double\nassertEquals(1.5, 3.1 / 2, 0.1), // Double with tolerance (delta)\nassertEquals(\"HELLO\", \"hello\".toUpperCase()) // String\n</code></pre> <p>En el caso de los tipos <code>double</code> y <code>float</code>, se puede definir una tolerancia (delta):</p> <pre><code>assertEquals(1.5, 3.1 / 2, 0.1), // Double with tolerance (delta)\n</code></pre>"},{"location":"EDD/UT3/junit/#asserttrue-y-assertfalse","title":"<code>assertTrue</code> y <code>assertFalse</code>","text":"<p>Las instrucciones assertTrue(expression) y assertFalse(expression) se utilizan para comprobar que una expresi\u00f3n es verdadera o falsa, respectivamente. Si la condici\u00f3n no se cumple, la prueba fallar\u00e1.</p> <pre><code>assertTrue(isPositive(5));\nassertFalse(isPositive(-1));\n</code></pre>"},{"location":"EDD/UT3/junit/#assertnull-y-assertnotnull","title":"<code>assertNull</code> y <code>assertNotNull</code>","text":"<p>Las instrucciones assertNull(object) y assertNotNull(object) se utilizan para comprobar que un objeto es nulo o no nulo, respectivamente. Si no tienen el valor esperado, la prueba fallar\u00e1.</p> <pre><code>String a = null;\nString b = \"Joan\";\nassertNull(a);\nassertNotNull(b);\n</code></pre>"},{"location":"EDD/UT3/junit/#assertsame-y-assertnotsame","title":"<code>assertSame</code> y <code>assertNotSame</code>","text":"<p>Las instrucciones assertSame(expected, actual) y assertNotSame(expected, actual) se utilizan para comprobar que dos objetos son el mismo objeto o no son el mismo objeto, respectivamente. Si no tienen el valor esperado, la prueba fallar\u00e1.</p> <p>Importante</p> <p>Este m\u00e9todo utiliza el operador == para determinar si los objetos son iguales o no.</p> <pre><code>String a = \"Joan\";\nString b = \"Joan\";\nString c = new String(\"Joan\");\nassertSame(a, b); // true\nassertNotSame(a, c); // true\n</code></pre>"},{"location":"EDD/UT3/junit/#assertarrayequals","title":"<code>assertArrayEquals</code>","text":"<p>La instrucci\u00f3n assertArrayEquals(expected, actual) se utiliza para comprobar que dos arrays son iguales, donde expected es el array esperado y actual es el array obtenido.</p> <p>Importante</p> <p>Este m\u00e9todo utiliza el m\u00e9todo equals() de los objetos para determinar si los arrays son iguales o no.</p> <pre><code>double[] intExpected = {1, 2, 3};\ndouble[] intActual = {1, 2, 3};\nassertArrayEquals(intExpected, intActual),\n\ndouble[] doubleExpected = {1.0, 2.0, 3.0};\ndouble[] doubleActual = {1.0, 2.0, 3.0};\nassertArrayEquals(doubleExpected, doubleActual ),\n\nString[] stringExpected = {\"Hello\", \"World!\"};\nString[] stringActual = {\"Hello\", \"World!\"};\nassertArrayEquals(stringExpected, stringActual)\n</code></pre>"},{"location":"EDD/UT3/junit/#assertthrows","title":"<code>assertThrows</code>","text":"<p>La instrucci\u00f3n assertThrows(expectedType, executable) se utiliza para comprobar que una determinada excepci\u00f3n se lanza al ejecutar un bloque de c\u00f3digo.</p> <pre><code>assertThrows(IllegalArgumentException.class, () -&gt; {\n    throw new IllegalArgumentException(\"Invalid argument\");\n});\n</code></pre>"},{"location":"EDD/UT3/junit/#assertall","title":"<code>assertAll</code>","text":"<p>La instrucci\u00f3n assertAll(executable) se utiliza para agrupar varias aserciones y asegurarse de que todas se ejecutan, incluso si alguna falla.</p> <pre><code>assertAll(\"group of assertions\",\n    () -&gt; assertEquals(1, 1),\n    () -&gt; assertEquals(2, 2),\n    () -&gt; assertEquals(3, 3)\n);\n</code></pre>"},{"location":"EDD/UT3/junit/#anotaciones","title":"Anotaciones","text":"<p>JUnit proporciona varias anotaciones que se pueden utilizar para definir el comportamiento de las pruebas y los m\u00e9todos de configuraci\u00f3n.</p>"},{"location":"EDD/UT3/junit/#test","title":"<code>@Test</code>","text":"<p>La anotaci\u00f3n @Test se utiliza para marcar un m\u00e9todo como un caso de prueba. JUnit ejecutar\u00e1 este m\u00e9todo como parte de la suite de pruebas.</p> <pre><code>@Test\npublic void testAddition() {\n    assertEquals(2, 1 + 1);\n}\n</code></pre>"},{"location":"EDD/UT3/junit/#displayname","title":"<code>@DisplayName</code>","text":"<p>La anotaci\u00f3n @DisplayName se utiliza para proporcionar un nombre legible para el caso de prueba. Esto es \u00fatil para documentar el prop\u00f3sito de la prueba y hacer que los informes de prueba sean m\u00e1s comprensibles.</p> <pre><code>@Test\n@DisplayName(\"Test for addition\")\npublic void testAddition() {\n    assertEquals(2, 1 + 1);\n}\n</code></pre>"},{"location":"EDD/UT3/junit/#beforeeach-y-aftereach","title":"<code>@BeforeEach</code> y <code>@AfterEach</code>","text":"<p>Las anotaciones @BeforeEach y @AfterEach se utilizan para definir m\u00e9todos que se ejecutan antes y despu\u00e9s de cada caso de prueba, respectivamente. Esto es \u00fatil para configurar el entorno de prueba y limpiar los recursos utilizados.</p> <pre><code>@BeforeEach\npublic void setUp() {\n    // C\u00f3digo de configuraci\u00f3n antes de cada prueba\n}\n@AfterEach\npublic void tearDown() {\n    // C\u00f3digo de limpieza despu\u00e9s de cada prueba\n}\n</code></pre>"},{"location":"EDD/UT3/junit/#beforeall-y-afterall","title":"<code>@BeforeAll</code> y <code>@AfterAll</code>","text":"<p>Las anotaciones @BeforeAll y @AfterAll se utilizan para definir m\u00e9todos que se ejecutan una vez antes y despu\u00e9s de todas las pruebas en una clase de prueba, respectivamente. Esto es \u00fatil para configurar y limpiar recursos compartidos entre todas las pruebas.</p> <pre><code>@BeforeAll\npublic static void setUpAll() {\n    // C\u00f3digo de configuraci\u00f3n antes de todas las pruebas\n}\n@AfterAll\npublic static void tearDownAll() {\n    // C\u00f3digo de limpieza despu\u00e9s de todas las pruebas\n}\n</code></pre>"},{"location":"EDD/UT3/junit/#disabled","title":"<code>@Disabled</code>","text":"<p>La anotaci\u00f3n @Disabled se utiliza para deshabilitar un caso de prueba o una clase de prueba. Esto es \u00fatil cuando se desea omitir temporalmente una prueba sin eliminarla del c\u00f3digo.</p> <pre><code>import org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\n\npublic class MyTestClass {\n    @Test\n    public void test1() {\n        // test code here\n    }\n\n    @Disabled(\"This test is currently not working, we are working on it\")\n    @Test\n    public void test2() {\n        // test code here\n    }\n}\n</code></pre>"},{"location":"EDD/UT3/junit/#nested","title":"<code>@Nested</code>","text":"<p>La anotaci\u00f3n @Nested se utiliza para definir clases de prueba anidadas. Esto es \u00fatil para organizar las pruebas en grupos l\u00f3gicos y mejorar la legibilidad del c\u00f3digo.</p> <pre><code>import org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\npublic class MyTestClass {\n    @Test\n    public void test1() {\n        // test code here\n    }\n\n    @Nested\n    public class NestedTestClass {\n        @Test\n        public void test2() {\n            // test code here\n        }\n\n        @Test\n        public void test3() {\n            // test code here\n        }\n    }\n}\n</code></pre>"},{"location":"MPO/","title":"M\u00f3dulo profesional optativo (MPO): Python","text":"<p>Bienvenid@s al repositorio con el material del m\u00f3dulo profesional optativo (MPO) de Python. Este m\u00f3dulo est\u00e1 dise\u00f1ado para complementar el aprendizaje de los estudiantes en el \u00e1mbito de la programaci\u00f3n y el desarrollo de software. El objetivo de este m\u00f3dulo es proporcionar al alumnado una comprensi\u00f3n s\u00f3lida de los conceptos y t\u00e9cnicas de programaci\u00f3n en Python, as\u00ed como la capacidad de aplicar estos conocimientos en proyectos pr\u00e1cticos. A lo largo del curso, l@s estudiantes aprender\u00e1n a desarrollar algoritmos utilizando Python y estructuras de datos eficientes.</p>"},{"location":"MPO/#programacion-didactica","title":"Programaci\u00f3n did\u00e1ctica","text":""},{"location":"MPO/#proyecto-1-entrega-01092025","title":"Proyecto 1 - ENTREGA: 01/09/2025","text":""},{"location":"MPO/#contenidos-del-modulo","title":"Contenidos del m\u00f3dulo","text":""},{"location":"MPO/#ut1-fundamentos-de-python","title":"UT1: Fundamentos de Python","text":"<ul> <li>Introducci\u00f3n a Python</li> <li>Sintaxis b\u00e1sica</li> <li>Tipos de datos primitivos</li> <li>Operadores y expresiones</li> <li>Entrada y salida de datos</li> </ul>"},{"location":"MPO/#ut2-estructuras-de-control","title":"UT2: Estructuras de control","text":"<ul> <li>Estructuras de control de flujo</li> <li>Estructuras de control de repetici\u00f3n</li> </ul>"},{"location":"MPO/#ut3-tipos-de-datos-complejos","title":"UT3: Tipos de datos complejos","text":"<ul> <li>Listas y tuplas</li> <li>Diccionarios</li> <li>Estructuras de datos</li> </ul>"},{"location":"MPO/#ut4-funciones-y-modulos","title":"UT4: Funciones y m\u00f3dulos","text":"<ul> <li>Definici\u00f3n y uso de funciones</li> <li>Par\u00e1metros y argumentos</li> <li>Alcance de variables</li> </ul>"},{"location":"MPO/#ut5-manejo-de-archivos-y-excepciones","title":"UT5: Manejo de archivos y excepciones","text":"<ul> <li>Lectura y escritura de archivos</li> <li>Tratamiento de diferentes formatos de archivo</li> <li>Gesti\u00f3n de errores con excepciones</li> </ul>"},{"location":"MPO/pd/","title":"Programaci\u00f3n did\u00e1ctica MPO Febrero 2025 Prometeo","text":""},{"location":"MPO/pd/#unidades-de-trabajo-ut","title":"Unidades de Trabajo (UT)","text":""},{"location":"MPO/pd/#ut1-fundamentos-de-python-trabajado-anteriormente","title":"UT1: Fundamentos de Python (Trabajado anteriormente)","text":"<p>Duraci\u00f3n: 8 semanas Objetivos: - Comprender los conceptos b\u00e1sicos de programaci\u00f3n - Manejar variables y tipos de datos b\u00e1sicos - Utilizar operadores y estructuras b\u00e1sicas de entrada/salida</p> <p>Contenidos: - Variables: declaraci\u00f3n, inicializaci\u00f3n y asignaci\u00f3n - Tipos de datos primitivos: int, float, bool, str - Operadores aritm\u00e9ticos, l\u00f3gicos y de comparaci\u00f3n - Entrada y salida: <code>input()</code> y <code>print()</code> - Comentarios y documentaci\u00f3n del c\u00f3digo - Buenas pr\u00e1cticas de programaci\u00f3n</p>"},{"location":"MPO/pd/#ut2-estructuras-de-control","title":"UT2: Estructuras de Control","text":"<p>Duraci\u00f3n: 4 semanas (Semanas 9, 10, 12) Objetivos: - Implementar estructuras condicionales para la toma de decisiones - Utilizar bucles para repetir procesos - Combinar estructuras de control para resolver problemas complejos</p> <p>Contenidos: - Estructuras condicionales: if, elif, else - Operadores l\u00f3gicos y expresiones booleanas - Bucle for: iteraci\u00f3n sobre secuencias - Bucle while: repetici\u00f3n condicional - Control de flujo: break, continue, pass - Estructuras anidadas y buenas pr\u00e1cticas</p>"},{"location":"MPO/pd/#ut3-estructuras-de-datos","title":"UT3: Estructuras de Datos","text":"<p>Duraci\u00f3n: 2 semanas (Semanas 14, 15) Objetivos: - Manejar colecciones de datos de forma eficiente - Elegir la estructura de datos adecuada seg\u00fan el problema - Manipular y procesar informaci\u00f3n estructurada</p> <p>Contenidos: - Listas: creaci\u00f3n, indexado, m\u00e9todos principales - Tuplas: inmutabilidad y casos de uso - Diccionarios: pares clave-valor, m\u00e9todos de acceso - Operaciones comunes: ordenaci\u00f3n, b\u00fasqueda, filtrado - Comprensi\u00f3n de listas b\u00e1sica - Conversi\u00f3n entre tipos de datos</p>"},{"location":"MPO/pd/#ut4-funciones-y-modularidad","title":"UT4: Funciones y Modularidad","text":"<p>Duraci\u00f3n: 4 semanas (Semanas 16, 17, 18, 19) Objetivos: - Crear c\u00f3digo reutilizable mediante funciones - Organizar el c\u00f3digo en m\u00f3dulos - Aplicar conceptos de alcance y par\u00e1metros</p> <p>Contenidos: - Definici\u00f3n y llamada de funciones - Par\u00e1metros y argumentos: posicionales, nombrados, por defecto - Valores de retorno y la sentencia return - Alcance de variables: local vs global - Funciones lambda b\u00e1sicas - M\u00f3dulos: importaci\u00f3n y creaci\u00f3n - Documentaci\u00f3n de funciones (docstrings) - Debugging y testing b\u00e1sico</p>"},{"location":"MPO/pd/#ut5-manejo-de-archivos-y-errores","title":"UT5: Manejo de Archivos y Errores","text":"<p>Duraci\u00f3n: 3 semanas (Semanas 20, 21, 22) Objetivos: - Leer y escribir archivos de diferentes formatos - Gestionar errores de forma controlada - Procesar archivos de logs y configuraci\u00f3n</p> <p>Contenidos: - Apertura y cierre de archivos: open(), close() - Modos de apertura: lectura, escritura, anexado - Lectura de archivos: readline(), readlines(), read() - Escritura de archivos: write(), writelines() - Gesti\u00f3n de rutas y directorios - Manejo de excepciones: try, except, finally - Tipos de errores comunes en archivos - Procesamiento de archivos CSV b\u00e1sico</p>"},{"location":"MPO/pd/#ut6-automatizacion-de-tareas-del-sistema","title":"UT6: Automatizaci\u00f3n de Tareas del Sistema","text":"<p>Duraci\u00f3n: 2 semanas (Semanas 23, 24) Objetivos: - Crear scripts para automatizar tareas administrativas - Interactuar con el sistema operativo - Manejar fechas y horarios en scripts</p> <p>Contenidos: - M\u00f3dulo os: navegaci\u00f3n de directorios, gesti\u00f3n de archivos - M\u00f3dulo sys: argumentos de l\u00ednea de comandos - Ejecuci\u00f3n de comandos del sistema - M\u00f3dulo datetime: fechas, horas, c\u00e1lculos temporales - Programaci\u00f3n de tareas b\u00e1sica - Scripts de mantenimiento: limpieza, backup - Variables de entorno y configuraci\u00f3n</p>"},{"location":"MPO/pd/#ut7-conectividad-y-datos","title":"UT7: Conectividad y Datos","text":"<p>Duraci\u00f3n: 2 semanas (Semanas 25, 26) Objetivos: - Consumir APIs web b\u00e1sicas - Procesar datos en formatos JSON y CSV - Implementar comunicaci\u00f3n de red simple</p> <p>Contenidos: - M\u00f3dulo requests: peticiones HTTP GET/POST - Trabajo con APIs REST b\u00e1sicas - Formato JSON: lectura y escritura - Procesamiento de archivos CSV con pandas b\u00e1sico - Descarga y procesamiento de datos - Autenticaci\u00f3n b\u00e1sica en APIs - Logs de red y monitorizaci\u00f3n</p>"},{"location":"MPO/pd/#ut8-proyecto-integrador","title":"UT8: Proyecto Integrador","text":"<p>Duraci\u00f3n: 3 semanas (Semanas 27, 28, 29) Objetivos: - Aplicar todos los conocimientos adquiridos - Desarrollar un proyecto completo de automatizaci\u00f3n - Presentar y documentar el trabajo realizado</p> <p>Contenidos: - Planificaci\u00f3n y dise\u00f1o del proyecto - An\u00e1lisis de requisitos para automatizaci\u00f3n - Desarrollo incremental del script - Testing y depuraci\u00f3n avanzada - Documentaci\u00f3n t\u00e9cnica del proyecto - Presentaci\u00f3n de resultados - Casos de uso reales en administraci\u00f3n de sistemas - Evaluaci\u00f3n y mejora continua</p> <p>Proyectos sugeridos: - Script de backup automatizado - Monitor de logs del sistema - Generador de informes autom\u00e1ticos - Herramienta de gesti\u00f3n de usuarios - Sistema de notificaciones autom\u00e1ticas</p>"},{"location":"MPO/pd/#temporalizacion","title":"Temporalizaci\u00f3n","text":""},{"location":"MPO/pd/#trabajado-anteriormente","title":"Trabajado anteriormente","text":"<ul> <li>Variables: declaraci\u00f3n, inicializaci\u00f3n.</li> <li>Tipos de datos: enteros, flotantes, booleanos, cadenas de texto.</li> <li>Entrada y salida de datos: <code>input()</code>, <code>print()</code>.</li> <li>Operadores: aritm\u00e9ticos, l\u00f3gicos, de comparaci\u00f3n.</li> <li>Comentarios en el c\u00f3digo: una l\u00ednea, varias l\u00edneas.</li> </ul>"},{"location":"MPO/pd/#semana-9","title":"Semana 9","text":"<ul> <li>Jueves 10 Abril: UT2: Estructuras condicionales.</li> </ul>"},{"location":"MPO/pd/#semana-10","title":"Semana 10","text":"<ul> <li>Jueves 24 Abril: UT2: Estructuras de repetici\u00f3n: for.</li> </ul>"},{"location":"MPO/pd/#semana-11","title":"Semana 11","text":"<ul> <li>Jueves 1 Mayo: FIESTA DEL TRABAJO. No hay clase.</li> </ul>"},{"location":"MPO/pd/#semana-12","title":"Semana 12","text":"<ul> <li>Jueves 8 Mayo: UT2: Estructuras de repetici\u00f3n: while.</li> </ul>"},{"location":"MPO/pd/#semana-13","title":"Semana 13","text":"<ul> <li>Jueves 15 Mayo: FIESTA SAN ISIDRO. No hay clase.</li> </ul>"},{"location":"MPO/pd/#semana-14","title":"Semana 14","text":"<ul> <li>Jueves 22 Mayo: UT3: Listas.</li> </ul>"},{"location":"MPO/pd/#semana-15","title":"Semana 15","text":"<ul> <li>Jueves 29 Mayo: UT3: Diccionarios y tuplas.</li> </ul>"},{"location":"MPO/pd/#semana-16","title":"Semana 16","text":"<ul> <li>Jueves 5 Junio: UT4: Funciones y m\u00f3dulos. Definici\u00f3n y uso de funciones.</li> </ul>"},{"location":"MPO/pd/#semana-17","title":"Semana 17","text":"<ul> <li>Jueves 12 Junio: UT4: Funciones y m\u00f3dulos. Par\u00e1metros y argumentos, alcance de variables.</li> </ul>"},{"location":"MPO/pd/#semana-18","title":"Semana 18","text":"<ul> <li>Jueves 19 Junio: UT4: Funciones y m\u00f3dulos. M\u00f3dulos y paquetes.</li> </ul>"},{"location":"MPO/pd/#semana-19","title":"Semana 19","text":"<ul> <li>Jueves 18 Septiembre: UT1, UT2, UT3 Y UT4: Hackathon, repaso de conceptos.</li> </ul>"},{"location":"MPO/pd/#semana-20","title":"Semana 20","text":"<ul> <li>Jueves 25 Septiembre: UT5: Manejo de archivos I. Lectura de archivos de texto (logs, configuraciones).</li> </ul>"},{"location":"MPO/pd/#semana-21","title":"Semana 21","text":"<ul> <li>Jueves 2 Octubre: UT5: Manejo de archivos II. Escritura y manipulaci\u00f3n de archivos.</li> </ul>"},{"location":"MPO/pd/#semana-22","title":"Semana 22","text":"<ul> <li>Jueves 9 Octubre: UT5: Tratamiento de errores b\u00e1sico. Try/except para archivos y entrada de datos.</li> </ul>"},{"location":"MPO/pd/#semana-23","title":"Semana 23","text":"<ul> <li>Jueves 16 Octubre: UT6: Automatizaci\u00f3n I. Scripts para tareas del sistema (os, sys).</li> </ul>"},{"location":"MPO/pd/#semana-24","title":"Semana 24","text":"<ul> <li>Jueves 23 Octubre: UT6: Automatizaci\u00f3n II. Trabajo con fechas, tiempo y programaci\u00f3n de tareas.</li> </ul>"},{"location":"MPO/pd/#semana-25","title":"Semana 25","text":"<ul> <li>Jueves 30 Octubre: UT7: Redes b\u00e1sicas. Introducci\u00f3n a requests para APIs simples.</li> </ul>"},{"location":"MPO/pd/#semana-26","title":"Semana 26","text":"<ul> <li>Jueves 6 Noviembre: UT7: Trabajo con datos. JSON y CSV para configuraciones.</li> </ul>"},{"location":"MPO/pd/#semana-27","title":"Semana 27","text":"<ul> <li>Jueves 13 Noviembre: UT8: Proyecto pr\u00e1ctico I. Script de automatizaci\u00f3n (backup, limpieza logs, etc.).</li> </ul>"},{"location":"MPO/pd/#semana-28","title":"Semana 28","text":"<ul> <li>Jueves 20 Noviembre: UT8: Proyecto pr\u00e1ctico II. Desarrollo y testing.</li> </ul>"},{"location":"MPO/pd/#semana-29","title":"Semana 29","text":"<ul> <li>Jueves 27 Noviembre: UT8: Presentaci\u00f3n de proyectos y casos de uso reales.</li> </ul>"},{"location":"MPO/pd/#semana-30","title":"Semana 30","text":"<ul> <li>Jueves 4 Diciembre: Repaso.</li> </ul>"},{"location":"MPO/pd/#semana-31","title":"Semana 31","text":"<ul> <li>Jueves 11 Diciembre: Repaso.</li> </ul>"},{"location":"MPO/proyecto1/","title":"Proyecto 1: Generador de Cuestionarios Interactivo","text":""},{"location":"MPO/proyecto1/#objetivo-del-proyecto","title":"Objetivo del proyecto","text":"<p>Desarrollar una aplicaci\u00f3n de consola en Python que permita realizar cuestionarios tipo test. El usuario podr\u00e1 responder a una serie de preguntas, y el programa corregir\u00e1 autom\u00e1ticamente las respuestas, mostrando la puntuaci\u00f3n obtenida al finalizar.</p>"},{"location":"MPO/proyecto1/#requisitos-funcionales-minimos","title":"Requisitos funcionales m\u00ednimos","text":"<p>Tu aplicaci\u00f3n deber\u00e1 permitir:</p> <ol> <li>Implementar un men\u00fa que se ejecute indefinidamente hasta que el usuario finalice, que permita las siguientes opciones: <pre><code>### MEN\u00da ###\n1 - Empezar cuestionario\n2 - Ranking (opcional)\n3 - Salir\n</code></pre></li> <li>Mostrar una serie de preguntas una a una al usuario.</li> <li>Cada pregunta debe tener:<ul> <li>Enunciado de la pregunta.</li> <li>Cuatro opciones de respuesta.</li> <li>Una \u00fanica opci\u00f3n correcta.</li> </ul> </li> <li>El usuario debe poder introducir su respuesta (por ejemplo: A, B, C o D).</li> <li>El programa debe indicar si la respuesta es correcta o incorrecta.</li> <li>Al finalizar el test, debe mostrar:<ul> <li>N\u00famero total de preguntas.</li> <li>N\u00famero de aciertos.</li> <li>Porcentaje de aciertos.</li> <li>Una valoraci\u00f3n final (por ejemplo: \u201c\u00a1Muy bien!\u201d, \u201cNecesitas practicar\u201d, etc.).</li> </ul> </li> </ol>"},{"location":"MPO/proyecto1/#contenidos-del-modulo-que-se-aplican","title":"Contenidos del m\u00f3dulo que se aplican","text":"<ul> <li>Tipos de datos primitivos y estructuras complejas (listas, diccionarios).</li> <li>Control de flujo (<code>if</code>, <code>elif</code>, <code>else</code>).</li> <li>Bucles (<code>for</code>, <code>while</code>).</li> <li>Funciones con par\u00e1metros y retorno.</li> <li>Entrada/salida de datos por consola.</li> </ul>"},{"location":"MPO/proyecto1/#estructura-sugerida-del-programa","title":"Estructura sugerida del programa","text":"<p>Puedes organizar tu programa en funciones como:</p> <ul> <li><code>cargar_preguntas()</code> \u2192 Devuelve una lista de preguntas (pueden estar \"hardcodeadas\" al principio).</li> <li><code>mostrar_pregunta(pregunta)</code> \u2192 Muestra la pregunta y sus opciones.</li> <li><code>obtener_respuesta()</code> \u2192 Pide al usuario su respuesta y la valida.</li> <li><code>corregir_respuesta(respuesta, correcta)</code> \u2192 Comprueba si es correcta.</li> <li><code>mostrar_resultados(aciertos, total)</code> \u2192 Muestra el resumen final.</li> </ul>"},{"location":"MPO/proyecto1/#ejemplo-de-estructura-de-una-pregunta-diccionario","title":"Ejemplo de estructura de una pregunta (diccionario)","text":"<pre><code>{\n    \"pregunta\": \"\u00bfCu\u00e1l es la capital de Francia?\",\n    \"opciones\": [\"A. Madrid\", \"B. Roma\", \"C. Par\u00eds\", \"D. Berl\u00edn\"],\n    \"respuesta_correcta\": \"C\"\n}\n</code></pre>"},{"location":"MPO/proyecto1/#extras-para-subir-nota-o-como-ampliacion","title":"Extras (para subir nota o como ampliaci\u00f3n)","text":"<ul> <li>Leer las preguntas desde un archivo <code>.json</code> o <code>.txt</code> (puedes usar el m\u00f3dulo <code>json</code> para leer la informaci\u00f3n <code>.json</code> y la funci\u00f3n <code>open()</code> para los archivos <code>.txt</code>).</li> <li>Guardar los resultados del usuario (nombre y puntuaci\u00f3n) en un fichero.</li> <li>Permitir elegir entre distintos temas o niveles de dificultad.</li> <li>Tiempo l\u00edmite para cada pregunta.</li> <li>Sistema de ranking de usuarios.</li> </ul>"},{"location":"MPO/proyecto1/#fases-de-trabajo-sugeridas","title":"Fases de trabajo sugeridas","text":"<ol> <li>Dise\u00f1o del modelo de datos: \u00bfC\u00f3mo guardar\u00e1s las preguntas?</li> <li>Estructura b\u00e1sica del programa: Flujo general y funciones principales.</li> <li>Implementaci\u00f3n: Desarrollo progresivo de funciones.</li> <li>Pruebas y validaci\u00f3n: Comprobar que todo funcione correctamente.</li> <li>Mejoras y presentaci\u00f3n: A\u00f1adir extras, limpiar c\u00f3digo, comentarios, etc.</li> </ol>"},{"location":"MPO/proyecto1/#rubrica-de-evaluacion-orientativa","title":"R\u00fabrica de evaluaci\u00f3n (orientativa)","text":"Criterio Puntos Funcionalidad b\u00e1sica completa 4 Uso correcto de funciones 2 Uso adecuado de listas/diccionarios 2 Legibilidad y buenas pr\u00e1cticas 2 Total 10"},{"location":"MPO/proyecto1/#consejos-finales","title":"Consejos finales","text":"<ul> <li>Comienza por lo b\u00e1sico y ve a\u00f1adiendo funcionalidades poco a poco.</li> <li>Prueba tu c\u00f3digo frecuentemente para detectar errores a tiempo.</li> <li>Utiliza comentarios para explicar partes complejas del c\u00f3digo.</li> <li>No dudes en pedir ayuda si te atascas en alg\u00fan punto.</li> </ul>"},{"location":"MPO/UT1/","title":"UT1: Fundamentos de Python","text":""},{"location":"MPO/UT1/#introduccion-a-python","title":"Introducci\u00f3n a Python","text":"<p>Bienvenid@s a la Unidad de Trabajo 1 (UT1) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en los fundamentos de Python, incluyendo su sintaxis b\u00e1sica y conceptos clave. A lo largo de esta unidad, aprender\u00e1s a escribir programas simples en Python y a comprender la estructura del lenguaje. Tambi\u00e9n exploraremos las herramientas y entornos de desarrollo que puedes utilizar para programar en Python.</p>"},{"location":"MPO/UT1/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<p>La sintaxis de Python es clara y f\u00e1cil de entender, lo que lo convierte en un lenguaje ideal para principiantes. A continuaci\u00f3n, se presentan algunos conceptos b\u00e1sicos de la sintaxis de Python:</p> <ul> <li>Comentarios: Los comentarios en Python se inician con el s\u00edmbolo <code>#</code>. Todo lo que siga a este s\u00edmbolo en la misma l\u00ednea ser\u00e1 ignorado por el int\u00e9rprete de Python.</li> <li>Comentarios de varias l\u00edneas: Para comentarios de varias l\u00edneas, puedes utilizar comillas triples (<code>'''</code> o <code>\"\"\"</code>). Por ejemplo:</li> </ul> <pre><code>\"\"\"\nEste es un comentario\nque se extiende\na trav\u00e9s de varias l\u00edneas.\n\"\"\"\n</code></pre> <ul> <li>Variables: Las variables se utilizan para almacenar datos. En Python, no es necesario declarar el tipo de variable, ya que el int\u00e9rprete lo infiere autom\u00e1ticamente. Por ejemplo:</li> </ul> <pre><code>nombre = \"Juan\"\nedad = 25\n</code></pre> <ul> <li>Impresi\u00f3n en pantalla: Para mostrar informaci\u00f3n en la consola, se utiliza la funci\u00f3n <code>print()</code>. Por ejemplo:</li> </ul> <pre><code>print(\"Hola, mundo!\")\n</code></pre> <ul> <li>Indentaci\u00f3n: La indentaci\u00f3n es importante en Python, ya que se utiliza para definir bloques de c\u00f3digo. Aseg\u00farate de utilizar espacios o tabulaciones de manera consistente.</li> <li>Lectura de datos: Para leer datos del usuario, se utiliza la funci\u00f3n <code>input()</code>. Por ejemplo:</li> </ul> <pre><code>nombre = input(\"Introduce tu nombre: \")\nprint(\"Hola, \" + nombre)\n</code></pre> <ul> <li>Tipos de datos: Python tiene varios tipos de datos, incluyendo enteros (<code>int</code>), flotantes (<code>float</code>), cadenas (<code>str</code>) y booleanos (<code>bool</code>). Puedes realizar operaciones matem\u00e1ticas y l\u00f3gicas con estos tipos de datos.</li> <li>Operadores: Python admite operadores aritm\u00e9ticos (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), operadores de comparaci\u00f3n (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) y operadores l\u00f3gicos (<code>and</code>, <code>or</code>, <code>not</code>).</li> </ul>"},{"location":"MPO/UT1/#ejercicios-practicos-nivel-basico","title":"Ejercicios pr\u00e1cticos (nivel b\u00e1sico)","text":""},{"location":"MPO/UT1/ejercicios_ut1/","title":"Ejercicios UT1 - Nivel b\u00e1sico","text":""},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa en Python que pida al usuario su nombre y edad, y luego imprima un mensaje de bienvenida customizado indicando ambos datos.</p> Soluci\u00f3n <pre><code>nombre = input(\"Introduce tu nombre: \")\nedad = input(\"Introduce tu edad: \")\nprint(\"Hola, \" + nombre + \"! Tienes \" + edad + \" a\u00f1os.\")\n</code></pre> <p>Sab\u00edas que hay una forma m\u00e1s sencilla de concatenar cadenas en Python? Puedes usar la funci\u00f3n <code>f-string</code> para formatear cadenas de manera m\u00e1s legible.</p> <p>Intenta buscar como usar <code>f-string</code> y modifica el c\u00f3digo anterior para usarlo.</p> Explicaci\u00f3n <pre><code>nombre = input(\"Introduce tu nombre: \")\nedad = input(\"Introduce tu edad: \")\nprint(f\"Hola, {nombre}! Tienes {edad} a\u00f1os.\")\n</code></pre> <p>No te parece mucho m\u00e1s senzillo?</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa en Python que pida al usuario dos n\u00fameros y luego imprima la suma, resta, multiplicaci\u00f3n y divisi\u00f3n de ambos n\u00fameros.</p> Soluci\u00f3n <pre><code>num1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\n\nsuma = num1 + num2\nresta = num1 - num2\nmultiplicacion = num1 * num2\ndivision = num1 / num2\n\nprint(f\"Suma: {suma}\")\nprint(f\"Resta: {resta}\")\nprint(f\"Multiplicaci\u00f3n: {multiplicacion}\")\nprint(f\"Divisi\u00f3n: {division}\")\n</code></pre> <p>En este ejercicio, hemos utilizado la funci\u00f3n <code>float()</code> para convertir la entrada del usuario en un n\u00famero decimal. Esto nos permite realizar operaciones matem\u00e1ticas con los n\u00fameros ingresados. Es importante recordar que la divisi\u00f3n en Python puede dar como resultado un n\u00famero decimal, por lo que es recomendable usar <code>float()</code> para evitar errores de tipo.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que, dados dos n\u00fameros enteros, imprima True si son iguales y False si no lo son.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nprint(num1 == num2)\n</code></pre> <p>F\u00edjate que en este ejercicio hemos utilizado la funci\u00f3n <code>int()</code> para convertir la entrada del usuario en un n\u00famero entero. Esto es importante porque queremos comparar dos n\u00fameros enteros, no cadenas de texto. La comparaci\u00f3n se realiza utilizando el operador <code>==</code>, que devuelve <code>True</code> si los n\u00fameros son iguales y <code>False</code> si no lo son.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros e imprima True si el primero es divisible por el segundo.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nprint(num1 % num2 == 0)\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>%</code> para calcular el resto de la divisi\u00f3n entre los dos n\u00fameros. Si el resto es cero, significa que el primer n\u00famero es divisible por el segundo. La comparaci\u00f3n se realiza utilizando el operador <code>==</code>, que devuelve <code>True</code> si el resto es cero y <code>False</code> si no lo es.</p> <p>Por si no lo sab\u00edas, el operador <code>%</code> se llama \"m\u00f3dulo\" y se utiliza para obtener el resto de una divisi\u00f3n. Por ejemplo, <code>10 % 3</code> devuelve <code>1</code>, porque al dividir <code>10</code> entre <code>3</code>, el resto es <code>1</code>. Si el primer n\u00famero es divisible por el segundo, el resultado del m\u00f3dulo ser\u00e1 <code>0</code>.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-5","title":"Ejercicio 5","text":"<p>Nunca me ha gustado que Python no disponga de una manera r\u00e1pida de aumentar un contador. Haz un programa que pida al usuario un n\u00famero entero e imprima el siguiente n\u00famero.</p> Soluci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\nnum = num + 1\nprint(f\"El siguiente n\u00famero es: {num}\")\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>+</code> para sumar <code>1</code> al n\u00famero ingresado por el usuario. Esto nos permite obtener el siguiente n\u00famero entero de manera sencilla. Sin embargo, hay una forma m\u00e1s corta de hacerlo utilizando el operador <code>+=</code>, que es un operador de asignaci\u00f3n. Este operador permite aumentar el valor de una variable en una cantidad espec\u00edfica. C\u00f3mo quedar\u00eda el c\u00f3digo si utilizamos <code>+=</code>?</p> Explicaci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\nnum += 1\nprint(f\"El siguiente n\u00famero es: {num}\")\n</code></pre> <p>En este caso, <code>num += 1</code> es equivalente a <code>num = num + 1</code>, pero es m\u00e1s conciso y f\u00e1cil de leer. Este tipo de operadores de asignaci\u00f3n son muy \u00fatiles para simplificar el c\u00f3digo y hacerlo m\u00e1s legible.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero e imprima:</p> <ul> <li>Su doble</li> <li>Su triple</li> <li>Su mitad</li> <li>Su cuadrado</li> <li>Su ra\u00edz cuadrada</li> </ul> Soluci\u00f3n <pre><code>import math\n\nnum = int(input(\"Introduce un n\u00famero entero: \"))\n\ndoble = num * 2\ntriple = num * 3\nmitad = num / 2\ncuadrado = num ** 2\nraiz_cuadrada = math.sqrt(num)\n\nprint(f\"Doble: {doble}\")\nprint(f\"Triple: {triple}\")\nprint(f\"Mitad: {mitad}\")\nprint(f\"Cuadrado: {cuadrado}\")\nprint(f\"Ra\u00edz cuadrada: {raiz_cuadrada}\")\n</code></pre> <p>En este ejercicio, hemos utilizado la funci\u00f3n <code>math.sqrt()</code> para calcular la ra\u00edz cuadrada del n\u00famero ingresado. La funci\u00f3n <code>math.sqrt()</code> es parte del m\u00f3dulo <code>math</code>, que proporciona funciones matem\u00e1ticas adicionales. Aseg\u00farate de importar el m\u00f3dulo <code>math</code> al principio de tu programa para poder utilizar esta funci\u00f3n.</p>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribe un programa que pida al usuario tres n\u00fameros enteros e imprima True si todos ellos son mayores que cero, False en caso contrario.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nnum3 = int(input(\"Introduce el tercer n\u00famero: \"))\n\nprint(num1 &gt; 0 and num2 &gt; 0 and num3 &gt; 0)\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribe un programa que pida al usuario tres nombres e immprima True si alguno de los nombres es \"Juan\", False en caso contrario.</p> Soluci\u00f3n <pre><code>nombre1 = input(\"Introduce el primer nombre: \")\nnombre2 = input(\"Introduce el segundo nombre: \")\nnombre3 = input(\"Introduce el tercer nombre: \")\n\nprint(nombre1 == \"Juan\" or nombre2 == \"Juan\" or nombre3 == \"Juan\")\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero e imprima True si \u00e9ste es mayor o igual que 18 y menor que 65, False en caso contrario.</p> Soluci\u00f3n <pre><code>num = int(input(\"Introduce un n\u00famero entero: \"))\n\nprint(num &gt; 18 and num &lt; 65)\n</code></pre>"},{"location":"MPO/UT1/ejercicios_ut1/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribe un programa que, dados dos n\u00fameros enteros, imprima su divisi\u00f3n decimal, si divisi\u00f3n entera y su resto. El segundo n\u00famero no puede ser cero.</p> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\ndivision_decimal = num1 / num2\ndivision_entera = num1 // num2\nresto = num1 % num2\n\nprint(f\"Divisi\u00f3n decimal: {division_decimal}\")\nprint(f\"Divisi\u00f3n entera: {division_entera}\")\nprint(f\"Resto: {resto}\")\n</code></pre> <p>En este ejercicio, hemos utilizado el operador <code>//</code> para realizar la divisi\u00f3n entera. La divisi\u00f3n entera devuelve el cociente sin decimales.</p>"},{"location":"MPO/UT2/","title":"UT2: Estructuras de control","text":""},{"location":"MPO/UT2/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenid@s a la Unidad de Trabajo 2 (UT2) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en las estructuras de control, que son fundamentales para el desarrollo de programas en Python. Aprender\u00e1s a utilizar estructuras de control de flujo y repetici\u00f3n para crear programas m\u00e1s complejos y eficientes. A lo largo de esta unidad, exploraremos las diferentes estructuras de control disponibles en Python, incluyendo condicionales (<code>if</code>, <code>elif</code>, <code>else</code>) y bucles (<code>for</code>, <code>while</code>). Tambi\u00e9n aprender\u00e1s a utilizar la instrucci\u00f3n <code>break</code> para salir de un bucle y la instrucci\u00f3n <code>continue</code> para omitir una iteraci\u00f3n.</p>"},{"location":"MPO/UT2/#estructuras-de-control-de-flujo","title":"Estructuras de control de flujo","text":"<p>Las estructuras de control de flujo permiten tomar decisiones en funci\u00f3n de condiciones espec\u00edficas. En Python, las estructuras de control de flujo m\u00e1s comunes son las condicionales <code>if</code>, <code>elif</code> y <code>else</code>. Estas estructuras permiten ejecutar diferentes bloques de c\u00f3digo seg\u00fan si una condici\u00f3n es verdadera o falsa.</p>"},{"location":"MPO/UT2/#estructura-if","title":"Estructura <code>if</code>","text":"<p>La estructura <code>if</code> se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n:\n    # Bloque de c\u00f3digo a ejecutar si la condici\u00f3n es verdadera\n</code></pre>"},{"location":"MPO/UT2/#estructura-elif","title":"Estructura <code>elif</code>","text":"<p>La estructura <code>elif</code> (abreviatura de \"else if\") se utiliza para evaluar m\u00faltiples condiciones. Si la primera condici\u00f3n es falsa, se eval\u00faa la siguiente condici\u00f3n <code>elif</code>. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n1:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n1 es verdadera\nelif condici\u00f3n2:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n2 es verdadera\n</code></pre>"},{"location":"MPO/UT2/#estructura-else","title":"Estructura <code>else</code>","text":"<p>La estructura <code>else</code> se utiliza para ejecutar un bloque de c\u00f3digo si todas las condiciones anteriores son falsas. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>if condici\u00f3n1:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n1 es verdadera\nelif condici\u00f3n2:\n    # Bloque de c\u00f3digo a ejecutar si condici\u00f3n2 es verdadera\nelse:\n    # Bloque de c\u00f3digo a ejecutar si todas las condiciones anteriores son falsas\n</code></pre>"},{"location":"MPO/UT2/#ejemplo-de-estructura-de-control-de-flujo","title":"Ejemplo de estructura de control de flujo","text":"<pre><code>edad = int(input(\"Introduce tu edad: \"))\nif edad &lt; 18:\n    print(\"Eres menor de edad.\")\nelif edad &gt;= 18 and edad &lt; 65:\n    print(\"Eres adulto.\")\nelse:\n    print(\"Eres mayor de edad.\")\n</code></pre> <p>En este ejemplo, se solicita al usuario que introduzca su edad y se eval\u00faa en qu\u00e9 categor\u00eda de edad se encuentra. Dependiendo de la edad ingresada, se imprime un mensaje diferente.</p>"},{"location":"MPO/UT2/#estructuras-de-control-de-repeticion","title":"Estructuras de control de repetici\u00f3n","text":"<p>Las estructuras de control de repetici\u00f3n permiten ejecutar un bloque de c\u00f3digo varias veces, ya sea un n\u00famero determinado de veces o hasta que se cumpla una condici\u00f3n espec\u00edfica. En Python, las estructuras de control de repetici\u00f3n m\u00e1s comunes son los bucles <code>for</code> y <code>while</code>.</p>"},{"location":"MPO/UT2/#bucle-for","title":"Bucle <code>for</code>","text":"<p>El bucle <code>for</code> se utiliza para iterar sobre una secuencia (como una lista, una tupla o un rango). La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>for variable in secuencia:\n    # Bloque de c\u00f3digo a ejecutar en cada iteraci\u00f3n\n</code></pre> <p>Para iterar sobre una secuencia de n\u00fameros, puedes utilizar la funci\u00f3n <code>range()</code>. Por ejemplo:</p> <pre><code>for i in range(5):\n    print(i)\n</code></pre> <p>La funci\u00f3n <code>range(5)</code> genera una secuencia de n\u00fameros del 0 al 4, y el bucle <code>for</code> imprime cada n\u00famero en la consola. Range tambi\u00e9n puede aceptar un segundo argumento para especificar el n\u00famero de inicio y un tercer argumento para especificar la secuencia de iteraci\u00f3n. Por ejemplo, <code>range(1, 10, 2)</code> generar\u00e1 la secuencia 1, 3, 5, 7, 9.</p> <p>As\u00ed pues, la funci\u00f3n <code>range()</code> tiene la siguiente sintaxis:</p> <pre><code>range(inicio, fin, paso)\n</code></pre> <p>Lo que pasa en un bucle <code>for</code> es que la variable toma el valor de cada elemento de la secuencia en cada iteraci\u00f3n. Por ejemplo:</p> <pre><code>numeros = [1, 2, 3, 4, 5]\nfor numero in numeros:\n    print(numero)\n</code></pre> <p>En este ejemplo, el bucle <code>for</code> itera sobre la lista <code>numeros</code> y asigna cada n\u00famero a la variable <code>numero</code>, que luego se imprime en la consola.</p>"},{"location":"MPO/UT2/#bucle-while","title":"Bucle <code>while</code>","text":"<p>El bucle <code>while</code> se utiliza para ejecutar un bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera. La sintaxis b\u00e1sica es la siguiente:</p> <pre><code>while condici\u00f3n:\n    # Bloque de c\u00f3digo a ejecutar mientras la condici\u00f3n sea verdadera\n</code></pre> <p>El bucle <code>while</code> es \u00fatil cuando no se conoce de antemano cu\u00e1ntas veces se debe ejecutar el bloque de c\u00f3digo. Por ejemplo:</p> <pre><code>numero = int(input(\"Introduce un n\u00famero: \"))\nsuma = 0\nwhile numero != 0:\n    suma += numero\n    numero = int(input(\"Introduce otro n\u00famero (0 para salir): \"))\nprint(\"La suma es:\", suma)\n</code></pre> <p>En este ejemplo, el bucle <code>while</code> se ejecuta mientras el usuario no introduzca 0. En cada iteraci\u00f3n, se suma el n\u00famero ingresado a la variable <code>suma</code> y se solicita un nuevo n\u00famero al usuario.</p>"},{"location":"MPO/UT2/#instruccion-break","title":"Instrucci\u00f3n <code>break</code>","text":"<p>La instrucci\u00f3n <code>break</code> se utiliza para salir de un bucle antes de que se complete su iteraci\u00f3n. Esto puede ser \u00fatil si se cumple una condici\u00f3n espec\u00edfica y no es necesario continuar con el bucle. Por ejemplo:</p> <pre><code>for i in range(10):\n    if i == 5:\n        break\n    print(i)\n</code></pre> <p>En este ejemplo, el bucle <code>for</code> se detiene cuando <code>i</code> es igual a 5, por lo que solo se imprimen los n\u00fameros del 0 al 4.</p>"},{"location":"MPO/UT2/#instruccion-continue","title":"Instrucci\u00f3n <code>continue</code>","text":"<p>La instrucci\u00f3n <code>continue</code> se utiliza para omitir la iteraci\u00f3n actual de un bucle y continuar con la siguiente iteraci\u00f3n. Esto puede ser \u00fatil si se desea saltar ciertos valores en una secuencia. Por ejemplo:</p> <pre><code>for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre> <p>En este ejemplo, la instrucci\u00f3n <code>continue</code> se utiliza para omitir los n\u00fameros pares, por lo que solo se imprimen los n\u00fameros impares del 0 al 9.</p>"},{"location":"MPO/UT2/#cuando-usar-while-y-for","title":"Cuando usar <code>while</code> y <code>for</code>","text":"<p>La elecci\u00f3n entre <code>while</code> y <code>for</code> depende del problema que est\u00e9s resolviendo. En general, se recomienda usar <code>for</code> cuando conoces de antemano el n\u00famero de iteraciones que deseas realizar (por ejemplo, al iterar sobre una lista o un rango). Por otro lado, se recomienda usar <code>while</code> cuando no conoces el n\u00famero de iteraciones y deseas continuar hasta que se cumpla una condici\u00f3n espec\u00edfica.</p> <p>Por ejemplo, vamos a analizar los siguientes casos:</p> <ul> <li>Tenemos una lista de n\u00fameros y queremos imprimir cada n\u00famero.</li> <li>Queremos pedir al usuario que introduzca n\u00fameros hasta que introduzca 0.</li> <li>Queremos imprimir los n\u00fameros del 1 al 10.</li> <li>Queremos imprimir los n\u00fameros del 1 al 10, pero si el n\u00famero es par, lo omitimos.</li> <li>Queremos ejecutar un men\u00fa de opciones hasta que el usuario elija salir.</li> <li>Queremos ejecutar una acci\u00f3n en una lista de elementos hasta encontrar un elemento espec\u00edfico.</li> </ul> <p>Como veis, no siempre hay una respuesta clara, pero si que hay casos en los que encaja mucho mejor un tipo de bucle que el otro.</p>"},{"location":"MPO/UT2/#ejercicios-de-clase-estructuras-de-control-condicionales","title":"Ejercicios de clase: estructuras de control condicionales","text":""},{"location":"MPO/UT2/#ejercicios-de-clase-estructuras-de-control-de-repeticion","title":"Ejercicios de clase: estructuras de control de repetici\u00f3n","text":""},{"location":"MPO/UT2/#ejercicios-practicos-nivel-basico","title":"Ejercicios pr\u00e1cticos (Nivel b\u00e1sico)","text":"<p>Aseg\u00farate de leer atentamente cada ejercicio y de intentar resolverlo por tu cuenta antes de consultar las soluciones. Esto te ayudar\u00e1 a consolidar tus conocimientos y a mejorar tus habilidades de programaci\u00f3n.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/","title":"Ejercicios de clase UT2: Estructura de control de repetici\u00f3n","text":""},{"location":"MPO/UT2/ejercicios_for_while_clase/#contexto","title":"Contexto","text":"<p>La estructura de control de repetici\u00f3n es fundamental en programaci\u00f3n, ya que permite ejecutar un bloque de c\u00f3digo varias veces bajo ciertas condiciones. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de bucles <code>for</code> y <code>while</code> para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando estas estructuras de control.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-1-contador","title":"Ejercicio 1 - Contador","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo e imprima los n\u00fameros desde el 0 hasta ese n\u00famero (incluido). El programa debe imprimir los n\u00fameros en cada iteraci\u00f3n.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-2-contador-de-numeros-pares","title":"Ejercicio 2 - Contador de n\u00fameros pares","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y cuente cu\u00e1ntos n\u00fameros pares hay desde 0 hasta ese n\u00famero (incluido). El programa debe imprimir el resultado.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-3-cuenta-atras","title":"Ejercicio 3 - Cuenta atr\u00e1s","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y realice una cuenta atr\u00e1s desde ese n\u00famero hasta 0. El programa debe imprimir cada n\u00famero en la cuenta atr\u00e1s.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-4-factorial","title":"Ejercicio 4 - Factorial","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y calcule su factorial. El programa debe imprimir el resultado. El factorial de un n\u00famero <code>n</code> se define como el producto de todos los n\u00fameros enteros desde 1 hasta <code>n</code>.</p> <p>Por ejemplo, el factorial de 5 (5!) es:</p> <pre><code>5 * 4 * 3 * 2 * 1 = 120.\n</code></pre>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-5-multiple-de-3-o-5","title":"Ejercicio 5 - M\u00faltiple de 3 o 5","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo e imprima solamente los n\u00fameros m\u00faltiplos de 3 o de 5 dentro de ese rango.</p> <p>Si el n\u00famero es m\u00faltiplo de 3, imprime el n\u00famero seguido de el mensaje \"es m\u00faltiplo de 3\". Si el n\u00famero es m\u00faltiplo de 5, imprime el n\u00famero seguido del mensaje \"es m\u00faltiplo de 5\". Si el n\u00famero es m\u00faltiplo de ambos no debes imprimir nada.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-6-triangulo-de-asteriscos","title":"Ejercicio 6 - Tri\u00e1ngulo de asteriscos","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y dibuje un tri\u00e1ngulo de asteriscos con la altura especificada. Por ejemplo, si el usuario ingresa 5, el tri\u00e1ngulo debe verse as\u00ed:</p> <pre><code>*\n**\n***\n****\n*****\n</code></pre>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-7-tabla-de-multiplicar","title":"Ejercicio 7 - Tabla de multiplicar","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y muestre la tabla de multiplicar de ese n\u00famero. Por ejemplo, si el usuario ingresa 3, el programa debe imprimir:</p> <pre><code>3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n</code></pre>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-8-cuadrado-con-cruz","title":"Ejercicio 8 - Cuadrado con cruz","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo impar y dibuje un cuadrado de x con una cruz en el medio. Por ejemplo, si el usuario ingresa 5, el cuadrado debe verse as\u00ed:</p> <pre><code>xxxxx\nxx xx\nx x x\nxx xx\nxxxxx\n</code></pre>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-9-suma-acumulativa","title":"Ejercicio 9 - Suma acumulativa","text":"<p>Escribe un programa que pida al usuario una serie de n\u00fameros enteros y calcule la suma acumulativa de esos n\u00fameros. El programa debe seguir pidiendo n\u00fameros hasta que el usuario ingrese un 0. Al final, imprime la suma total.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-10-akinator-numerico","title":"Ejercicio 10 - Akinator num\u00e9rico","text":"<p>Escribe un programa que escoja un n\u00famero aleatorio entre 1 y 100 y le pida al usuario que adivine el n\u00famero. El programa debe dar pistas al usuario si el n\u00famero es mayor o menor que el n\u00famero elegido. El programa debe seguir pidiendo n\u00fameros hasta que el usuario adivine el n\u00famero correcto.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-11-media-de-notas","title":"Ejercicio 11 - Media de notas","text":"<p>Escribe un programa que pida al usuario cuantas evaluaciones hay que cualificar. Seguidamente se recibir\u00e1n ese n\u00famero de series de notas (n\u00fameros decimales entre 0 y 10) y calcule la media de esas notas. El programa debe seguir pidiendo notas hasta que el usuario ingrese un -1. Al final, imprime la media.</p> <pre><code>Introduce el n\u00famero de evaluaciones: 3\nNotas de la evaluaci\u00f3n 1: 6 8 4 3.5 9 -1\nNotas de la evaluaci\u00f3n 2: 7 5 8.5 -1\nNotas de la evaluaci\u00f3n 3: 9 10 8.5 -1\nLa media de la evaluaci\u00f3n 1 es: 6.5\nLa media de la evaluaci\u00f3n 2 es: 7.5\nLa media de la evaluaci\u00f3n 3 es: 9.0\n</code></pre>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-12-mayor-y-menor","title":"Ejercicio 12 - Mayor y menor","text":"<p>Escribe un programa que pida al usuario una serie de n\u00fameros enteros y determine cu\u00e1l es el mayor y cu\u00e1l es el menor. El programa debe seguir pidiendo n\u00fameros hasta que el usuario ingrese un 0. Al final, imprime el mayor y el menor.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-13-numero-de-cifras","title":"Ejercicio 13 - N\u00famero de cifras","text":"<p>Escribe un programa que pida al usuario una serie de n\u00fameros enteros positivos hasta la introducci\u00f3n de un valor -1 para cada n\u00famero debe contar cu\u00e1ntas cifras tiene. El programa debe imprimir la longitud de cada n\u00famero. No pod\u00e9is usar la funci\u00f3n <code>len()</code> para contar las cifras ni convertir el n\u00famero a cadena.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-14-numeros-primos","title":"Ejercicio 14 - N\u00fameros primos","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y determine si es primo o no. Un n\u00famero primo es aquel que solo es divisible por 1 y por s\u00ed mismo. El programa debe imprimir el resultado.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-15-banca-online","title":"Ejercicio 15 - Banca online","text":"<p>Escribe un programa que simule una cuenta bancaria. El programa debe permitir al usuario realizar las siguientes operaciones:</p> <ol> <li>Ingresar dinero</li> <li>Retirar dinero</li> <li>Consultar saldo</li> <li>Salir</li> </ol> <p>Inicializa el saldo en 0 y permite al usuario realizar operaciones hasta que decida salir.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-16-numeros-perfectos","title":"Ejercicio 16 - N\u00fameros perfectos","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y determine si es un n\u00famero perfecto o no. Un n\u00famero perfecto es aquel que es igual a la suma de sus divisores propios (excluyendo el propio n\u00famero). Por ejemplo, 6 es un n\u00famero perfecto porque sus divisores son 1, 2 y 3, y 1 + 2 + 3 = 6.</p>"},{"location":"MPO/UT2/ejercicios_for_while_clase/#ejercicio-17-conversion-binaria","title":"Ejercicio 17 - Conversi\u00f3n binaria","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y lo convierta a su representaci\u00f3n binaria. El programa debe imprimir el resultado en forma de cadena de caracteres.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/","title":"Ejercicios de clase UT2: Estructura de control condicional","text":""},{"location":"MPO/UT2/ejercicios_if_clase/#contexto","title":"Contexto","text":"<p>La estructura de control condicional es una de las m\u00e1s importantes en programaci\u00f3n. Permite tomar decisiones basadas en condiciones espec\u00edficas, lo que es fundamental para crear programas interactivos y din\u00e1micos. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de la estructura <code>if</code>, <code>elif</code> y <code>else</code> para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando estas estructuras de control.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-1-siempre-negatifo-nunca-positifo","title":"Ejercicio 1 - Siempre negatifo, nunca positifo","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es positivo o negativo. El programa debe imprimir un mensaje indicando el resultado.</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-2-portero-de-discoteca","title":"Ejercicio 2 - Portero de discoteca","text":"<p>Escribe un programa que simule el trabajo de un portero de discoteca. El programa debe pedir al usuario su edad y determinar si puede entrar o no. Si la edad es menor de 18 a\u00f1os, el programa debe imprimir \"No puedes entrar\". Si la edad es mayor o igual a 18 a\u00f1os, el programa debe imprimir \"Puedes entrar\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-3-pacman","title":"Ejercicio 3 - Pacman","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros correspondientes a la casilla que est\u00e1 Pacman (1er n\u00famero) y a la que est\u00e1 un fantasma (2o n\u00famero), luego debe recibir un texto con el formato \"normal\" o \"caramelo\". Si el texto es \"normal\" y los n\u00fameros son iguales, el programa debe imprimir \"Pacman ha sido atrapado\". Si el texto es \"caramelo\" y los n\u00fameros son iguales, el programa debe imprimir \"Pacman ha comido al fantasma\". En cualquier otro caso, el programa debe imprimir \"Pacman ha escapado\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-4-multiplos-de-3-y-5","title":"Ejercicio 4 - M\u00faltiplos de 3 y 5","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es m\u00faltiplo de 3 o de 5. El programa debe imprimir un mensaje indicando el resultado. Si el n\u00famero es m\u00faltiplo de ambos, debe imprimir \"M\u00faltiplo de 3 y 5\". Si no es m\u00faltiplo de ninguno, debe imprimir \"No es m\u00faltiplo de 3 ni de 5\".</p>"},{"location":"MPO/UT2/ejercicios_if_clase/#ejercicio-5-puede-entrar-en-el-servidor-de-discord","title":"Ejercicio 5 - Puede entrar en el servidor de Discord?","text":"<p>Escribe un programa que pida un rol y una academia de estudios, si el rol es \"alumno\" y la academia es \"Prometeo\" el programa debe darle acceso al servidor de Discord oficial y al de los alumnos, donde se critica a los profes. Si el rol es \"profesor\" y la academia es \"Prometeo\" el programa debe darle acceso al servidor de Discord oficial, pero no al de los alumnos. En cualquier otro caso, el programa debe imprimir \"No tienes acceso al servidor de Discord\".</p>"},{"location":"MPO/UT2/ejercicios_ut2_avanzados/","title":"Ejercicios UT2: Nivel avanzado","text":""},{"location":"MPO/UT2/ejercicios_ut2_avanzados/#ejercicio-1-encuentra-el-primer-numero-primo","title":"Ejercicio 1 - Encuentra el primer n\u00famero primo","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros positivos y encuentre el primer n\u00famero primo entre ellos. Un n\u00famero primo es un n\u00famero mayor que 1 que solo es divisible por 1 y por s\u00ed mismo. El programa debe imprimir el primer n\u00famero primo encontrado o un mensaje indicando que no se encontraron n\u00fameros primos en el rango.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/","title":"Ejercicios UT2: Extras","text":""},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-1","title":"Ejercicio 1","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es par o impar. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero % 2 == 0:\n    print(f\"{numero} es par.\")\nelse:\n    print(f\"{numero} es impar.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-2","title":"Ejercicio 2","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es positivo, negativo o cero. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero &gt; 0:\n    print(f\"{numero} es positivo.\")\nelif numero &lt; 0:\n    print(f\"{numero} es negativo.\")\nelse:\n    print(\"El n\u00famero es cero.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-3","title":"Ejercicio 3","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y determine si es divisible por 3 y 5. El programa debe imprimir un mensaje indicando el resultado.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero: \"))\nif numero % 3 == 0 and numero % 5 == 0:\n    print(f\"{numero} es divisible por 3 y 5.\")\nelse:\n    print(f\"{numero} no es divisible por 3 y 5.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-4","title":"Ejercicio 4","text":"<p>Escribe un programa que pida una nota (0-10) y muestre:</p> <ul> <li>\"Suspenso\" si es menor de 5</li> <li>\"Aprobado\" si es entre 5 y 6</li> <li>\"Notable\" si es entre 7 y 8</li> <li>\"Sobresaliente\" si es 9 o 10</li> </ul> Soluci\u00f3n <pre><code>nota = float(input(\"Introduce una nota (0-10): \"))\nif nota &lt; 5:\n    print(\"Suspenso\")\nelif 5 &lt;= nota &lt; 7:\n    print(\"Aprobado\")\nelif 7 &lt;= nota &lt; 9:\n    print(\"Notable\")\nelif 9 &lt;= nota &lt;= 10:\n    print(\"Sobresaliente\")\nelse:\n    print(\"Nota no v\u00e1lida.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-5","title":"Ejercicio 5","text":"<p>Escribe un programa que pida el nombre de un d\u00eda de la semana y muestre si es \"laborable\" o \"fin de semana\".</p> Soluci\u00f3n <pre><code>dia = input(\"Introduce el nombre de un d\u00eda de la semana: \").lower()\nif dia in [\"lunes\", \"martes\", \"mi\u00e9rcoles\", \"jueves\", \"viernes\"]:\n    print(f\"{dia.capitalize()} es un d\u00eda laborable.\")\nelif dia in [\"s\u00e1bado\", \"domingo\"]:\n    print(f\"{dia.capitalize()} es fin de semana.\")\nelse:\n    print(\"D\u00eda no v\u00e1lido.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-6","title":"Ejercicio 6","text":"<p>Escribe un porgrama que pida un a\u00f1o y muestra si es bisiesto. Un a\u00f1o es bisiesto si es divisible por 4, pero no por 100, o si es divisible por 400.</p> Soluci\u00f3n <pre><code>a\u00f1o = int(input(\"Introduce un a\u00f1o: \"))\nif (a\u00f1o % 4 == 0 and a\u00f1o % 100 != 0) or (a\u00f1o % 400 == 0):\n    print(f\"{a\u00f1o} es un a\u00f1o bisiesto.\")\nelse:\n    print(f\"{a\u00f1o} no es un a\u00f1o bisiesto.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-7","title":"Ejercicio 7","text":"<p>Escribe un programa que pida dos n\u00fameros y un operador (+, -, *, /) y muestre el resultado de la operaci\u00f3n.</p> Soluci\u00f3n <pre><code>num1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\noperador = input(\"Introduce un operador (+, -, *, /): \")\n\nif operador == \"+\":\n    resultado = num1 + num2\nelif operador == \"-\":\n    resultado = num1 - num2\nelif operador == \"*\":\n    resultado = num1 * num2\nelif operador == \"/\":\n    if num2 != 0:\n        resultado = num1 / num2\n    else:\n        resultado = \"Error: Divisi\u00f3n por cero.\"\nelse:\n    resultado = \"Operador no v\u00e1lido.\"\n\nprint(f\"Resultado: {resultado}\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-8","title":"Ejercicio 8","text":"<p>Escribe un programa que pida el nombre de un mes y muestre cu\u00e1ntos d\u00edas tiene (puedes simplificar febrero a 28 d\u00edas siempre).</p> Soluci\u00f3n <pre><code>mes = input(\"Introduce el nombre de un mes: \").lower()\nif mes in [\"enero\", \"marzo\", \"mayo\", \"julio\", \"agosto\", \"octubre\", \"diciembre\"]:\n    dias = 31\nelif mes in [\"abril\", \"junio\", \"septiembre\", \"noviembre\"]:\n    dias = 30\nelif mes == \"febrero\":\n    dias = 28\nelse:\n    dias = \"Mes no v\u00e1lido.\"\n\nprint(f\"{mes.capitalize()} tiene {dias} d\u00edas.\")\n</code></pre> <p>La funci\u00f3n lower() convierte la cadena a min\u00fasculas para evitar problemas de may\u00fasculas y min\u00fasculas al comparar el mes ingresado por el usuario. Puedes usar upper() si prefieres trabajar con may\u00fasculas.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-9","title":"Ejercicio 9","text":"<p>Escribe un programa que pida el precio de un producto y, si supera los 100\u20ac, aplique un descuento del 10%. Muestra el precio final.</p> Soluci\u00f3n <pre><code>precio = float(input(\"Introduce el precio del producto: \"))\nif precio &gt; 100:\n    descuento = precio * 0.10\n    precio_final = precio - descuento\nelse:\n    precio_final = precio\n\nprint(f\"El precio final es: {precio_final}\u20ac\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-10","title":"Ejercicio 10","text":"<p>Escribe un programa que pida d\u00eda, mes y a\u00f1o. Comprueba si la fecha introducida es v\u00e1lida. Recuerda que, en los a\u00f1os bisiestos, febrero tiene 29 d\u00edas. Puedes usar el algoritmo del ejercicio 6 para determinar si un a\u00f1o es bisiesto.</p> Soluci\u00f3n <pre><code>dia = int(input(\"Introduce el d\u00eda: \"))\nmes = int(input(\"Introduce el mes (1-12): \"))\na\u00f1o = int(input(\"Introduce el a\u00f1o: \"))\n\nif mes &lt; 1 or mes &gt; 12:\n    print(\"Mes no v\u00e1lido.\")\nelif dia &lt; 1 or (mes == 2 and ((a\u00f1o % 4 == 0 and a\u00f1o % 100 != 0) or (a\u00f1o % 400 == 0) and dia &gt; 29)) or (mes == 2 and dia &gt; 28) or (mes in [4, 6, 9, 11] and dia &gt; 30) or (mes in [1, 3, 5, 7, 8, 10, 12] and dia &gt; 31):\n    print(\"Fecha no v\u00e1lida.\")\nelse:\n    print(f\"La fecha {dia}/{mes}/{a\u00f1o} es v\u00e1lida.\")\n</code></pre> Recuerda <p>Recuerda que este ejercicio es un poco m\u00e1s complicado porque tienes que tener en cuenta los d\u00edas de cada mes y los a\u00f1os bisiestos. No solo tienes que comprobar si el mes es v\u00e1lido, sino tambi\u00e9n si el d\u00eda es v\u00e1lido para ese mes y a\u00f1o. Por ejemplo, febrero tiene 29 d\u00edas en a\u00f1os bisiestos y 28 en a\u00f1os no bisiestos. Adem\u00e1s, abril, junio, septiembre y noviembre tienen 30 d\u00edas, mientras que enero, marzo, mayo, julio, agosto, octubre y diciembre tienen 31 d\u00edas.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-11","title":"Ejercicio 11","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros e imprima la secuencia de n\u00fameros entre ellos (incluidos) en orden ascendente. El primer n\u00famero siempre ser\u00e1 menor que el segundo.</p> <p>Ejemplo:</p> <p>El usuario introduce 2 y 5.</p> <p>El programa debe imprimir:</p> <pre><code>2\n3\n4\n5\n</code></pre> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nfor i in range(num1, num2 + 1):\n    print(i)\n</code></pre> Recuerda <p>Recuerda que el rango en Python es exclusivo en el l\u00edmite superior, por lo que debes sumar 1 al segundo n\u00famero para incluirlo en la secuencia.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-12","title":"Ejercicio 12","text":"<p>Escribe un programa que pida al usuario dos n\u00fameros enteros e imprima la secuencia de n\u00fameros entre ellos (incluidos) en orden ascendente. Si el primer n\u00famero es mayor que el segundo, imprime la secuencia en orden descendente. Debes imprimir la secuencia de n\u00fameros en una sola l\u00ednea, separados por espacios.</p> <p>Ejemplo:</p> <p>El usuario introduce 5 y 2.</p> <p>El programa debe imprimir:</p> <pre><code>5 4 3 2\n</code></pre> Soluci\u00f3n <pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nif num1 &lt; num2:\n    for i in range(num1, num2 + 1):\n        print(i, end=\" \")\nelse:\n    for i in range(num1, num2 - 1, -1):\n        print(i, end=\" \")\n</code></pre> Recuerda <p>RAdem\u00e1s, el argumento <code>end=\" \"</code> en la funci\u00f3n <code>print()</code> se utiliza para imprimir los n\u00fameros en la misma l\u00ednea, separados por espacios. Si no se especifica, <code>print()</code> por defecto a\u00f1ade un salto de l\u00ednea al final de cada impresi\u00f3n. Por lo tanto, al usar <code>end=\" \"</code>, estamos indicando que queremos que el siguiente n\u00famero se imprima en la misma l\u00ednea, separado por un espacio.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-13","title":"Ejercicio 13","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo e imprima la tabla de multiplicar de ese n\u00famero (del 1 al 10).</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\nfor i in range(1, 11):\n    print(f\"{numero} x {i} = {numero * i}\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-14","title":"Ejercicio 14","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo e imprima la suma de los n\u00fameros pares por un lado y la suma de los n\u00fameros impares por otro. El programa debe imprimir ambos resultados.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\nsuma_pares = 0\nsuma_impares = 0\n\nfor i in range(1, numero + 1):\n    if i % 2 == 0:\n        suma_pares += i\n    else:\n        suma_impares += i\n\nprint(f\"Suma de n\u00fameros pares: {suma_pares}\")\nprint(f\"Suma de n\u00fameros impares: {suma_impares}\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-15","title":"Ejercicio 15","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo y calcules la suma de la potencia de 3 de cada n\u00famero desde 1 hasta el n\u00famero introducido. El programa debe imprimir el resultado.</p> <p>Para que se entienda mejor, si el usuario introduce 3, el programa debe calcular:</p> <pre><code>1^3 + 2^3 + 3^3 = 1 + 8 + 27 = 36\n</code></pre> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\nsuma = 0\n\nfor i in range(1, numero + 1):\n    suma += i ** 3\n\nprint(f\"La suma de la potencia de 3 de los n\u00fameros desde 1 hasta {numero} es: {suma}\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-16","title":"Ejercicio 16","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero positivo e imprima la lista de divisores de ese n\u00famero. Un divisor de un n\u00famero <code>n</code> es un n\u00famero entero que divide a <code>n</code> sin dejar residuo. El programa debe imprimir todos los divisores del n\u00famero introducido.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\n\nprint(f\"Los divisores de {numero} son: \", end=\" \")\nfor i in range(1, numero + 1):\n    if numero % i == 0:\n        print(i, end=\" \")\nprint()\n</code></pre> \u00bfPor qu\u00e9 ponemos ese \u00faltimo print()? <p>El \u00faltimo <code>print()</code> se utiliza para a\u00f1adir un salto de l\u00ednea despu\u00e9s de imprimir todos los divisores, para que la salida sea m\u00e1s legible. Sin \u00e9l, el cursor quedar\u00eda al final de la lista de divisores en la misma l\u00ednea.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-17","title":"Ejercicio 17","text":"<p>Escribe un programa que reciba un n\u00famero entero positivo y una letra. El programa debe imprimir la letra tantas veces como el n\u00famero introducido.</p> Soluci\u00f3n <pre><code>numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\nletra = input(\"Introduce una letra: \")\n\nfor i in range(numero):\n    print(letra, end=\"\")\nprint()\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-18","title":"Ejercicio 18","text":"<p>Escribe un programa que dado una serie de n\u00fameros introducidos por el usuario, hasta que introduzca un -1, imprima el n\u00famero introducido sum\u00e1ndole 1. El programa debe imprimir todos los n\u00fameros introducidos, menos el -1, sum\u00e1ndoles 1.</p> <pre><code>Entrada:\n1\n2\n3\n-1\n\nSalida:\n2\n3\n4\n</code></pre> Soluci\u00f3n <pre><code>while True:\n    numero = int(input(\"Introduce un n\u00famero (-1 para salir): \"))\n    if numero == -1:\n        break\n    print(numero + 1)\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-19","title":"Ejercicio 19","text":"<p>Escribe un programa que dado una serie de notas introducidas por el usuario, hasta que introduzca un -1, imprima el n\u00famero de notas correctas introducidas, la media de las notas y cuantas de estas notas son 10. El programa debe imprimir la media de todas las notas introducidas, menos el -1.</p> <p>Tip</p> <p>Una nota es correcta si est\u00e1 entre 0 y 10, ambos incluidos. Si el usuario introduce una nota fuera de este rango, el programa no la tendr\u00e1 en cuenta para calcular la media ni el n\u00famero de notas correctas.</p> <pre><code>Entrada:\n1\n6\n10\n11\n8\n-1\n\nSalida:\nN\u00famero de notas correctas: 4\nMedia de notas: 6.25\nN\u00famero de dieces: 1\n</code></pre> Soluci\u00f3n <pre><code>suma_notas = 0\ncontador_notas = 0\ncontador_diez = 0\n\nwhile True:\n    nota = float(input(\"Introduce una nota (-1 para salir): \"))\n    if nota == -1:\n        break\n    if 0 &lt;= nota &lt;= 10:\n        suma_notas += nota\n        contador_notas += 1\n        if nota == 10:\n            contador_diez += 1\n\nif contador_notas &gt; 0:\n    media = suma_notas / contador_notas\n    print(f\"N\u00famero de notas correctas: {contador_notas}\")\n    print(f\"Media de notas: {media:.2f}\")\n    print(f\"N\u00famero de dieces: {contador_diez}\")\nelse:\n    print(\"No se introdujeron notas v\u00e1lidas.\")\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-20","title":"Ejercicio 20","text":"<p>Escribe un programa que dado una serie de n\u00fameros introducidos por el usuario, hasta que introduzca un -1, cuente cu\u00e1ntos de estos n\u00fameros son pares y cu\u00e1ntos son impares. El programa debe imprimir el n\u00famero de pares e impares introducidos, menos el -1.</p> Soluci\u00f3n <pre><code>contador_pares = 0\ncontador_impares = 0\n\nwhile True:\n    numero = int(input(\"Introduce un n\u00famero (-1 para salir): \"))\n    if numero == -1:\n        break\n    if numero % 2 == 0:\n        contador_pares += 1\n    else:\n        contador_impares += 1\n\nprint(f\"N\u00famero de pares: {contador_pares}\")\nprint(f\"N\u00famero de impares: {contador_impares}\")\n</code></pre> <p>Tip</p> <p>Vigilad con el uso de <code>while True:</code>. Este bucle se ejecutar\u00e1 indefinidamente hasta que se encuentre una instrucci\u00f3n <code>break</code> dentro de \u00e9l. Aseg\u00farate de que haya una condici\u00f3n que permita salir del bucle, como en este caso, cuando el usuario introduce -1. Adem\u00e1s, es importante para la legibilidad del c\u00f3digo, no abusar de este tipo de bucles y utilizar estructuras de control m\u00e1s espec\u00edficas cuando sea posible. En este caso, el uso de <code>while True:</code> es adecuado porque estamos esperando una entrada del usuario que puede ser indefinida. Sin embargo, en otros casos, podr\u00edas considerar usar un bucle <code>for</code> o un bucle <code>while</code> con una condici\u00f3n m\u00e1s espec\u00edfica.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-21","title":"Ejercicio 21","text":"<p>Escribe un programa que te introduzca un n\u00famero entero positivo que corresponde al n\u00famero de casos a tratar. Seguidamente te introducen un n\u00famero entero positivo que corresponde a una serie de n\u00fameros. Despu\u00e9s debes recibir ese total de n\u00fameros e imprimirlos en la misma linea de la terminal, separados por un espacio y habi\u00e9ndoles sumado 1 a cada uno de ellos.</p> <pre><code>Entrada:\n3\n4\n5 0 99 2\n1\n45\n2 \n-1 -3\n\nSalida:\n5 1 100 3\n46\n0 -2\n</code></pre> Soluci\u00f3n <pre><code>casos = int(input(\"Introduce el n\u00famero de casos: \"))\nfor _ in range(casos):\n    numeros = int(input(\"Cu\u00e1ntos n\u00fameros vas a introducir? \"))\n    for _ in range(numeros):\n        numero = int(input())\n        print(int(numero) + 1, end=\" \")\n    print()\n</code></pre> Tip <p>En este caso, el uso de <code>for _ in range(casos):</code> es adecuado porque estamos iterando un n\u00famero fijo de veces, que es el n\u00famero de casos introducido por el usuario. El guion bajo (<code>_</code>) se utiliza como una convenci\u00f3n para indicar que la variable de iteraci\u00f3n no se va a utilizar dentro del bucle. Esto es \u00fatil para mejorar la legibilidad del c\u00f3digo y evitar advertencias de variables no utilizadas. En el segundo bucle, <code>for _ in range(numeros):</code>, tambi\u00e9n se utiliza el guion bajo porque no necesitamos el valor de la variable de iteraci\u00f3n, solo queremos repetir el bloque de c\u00f3digo un n\u00famero espec\u00edfico de veces.</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-22","title":"Ejercicio 22","text":"<p>Escribe un programa que inicialmente te indique el n\u00famero de casos a tratar. Despu\u00e9s, para cada caso, te introduzca un n\u00famero entero positivo del qual debes imprimir todos los divisores. Un divisor de un n\u00famero <code>n</code> es un n\u00famero entero que divide a <code>n</code> sin dejar residuo. El programa debe imprimir todos los divisores del n\u00famero introducido en una sola l\u00ednea, separados por espacios.</p> <pre><code>Entrada:\n3\n4\n2\n10\n\nSalida:\n1 2 4\n1 2\n1 2 5 10\n</code></pre> Soluci\u00f3n <pre><code>casos = int(input(\"Introduce el n\u00famero de casos: \"))\nfor _ in range(casos):\n    numero = int(input(\"Introduce un n\u00famero entero positivo: \"))\n    print(f\"Los divisores de {numero} son: \", end=\" \")\n    for i in range(1, numero + 1):\n        if numero % i == 0:\n            print(i, end=\" \")\n    print()\n</code></pre>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-23","title":"Ejercicio 23","text":"<p>Escribe un programa que vaya recibiendo cadenas de texto hasta que el usuario introduzca \"fin\". El programa debe contar cu\u00e1ntas vocales se han introducido e imprimir el resultado. Las vocales son: a, e, i, o, u (tanto may\u00fasculas como min\u00fasculas). El programa debe imprimir el n\u00famero total de vocales introducidas sin contar la palabra \"fin\".</p> <pre><code>Entrada:\nHola\ncomo estan los maquinas\nfin\n\nSalida:\nN\u00famero total de vocales: 11\n</code></pre> Soluci\u00f3n <pre><code>contador_vocales = 0\n\nwhile True:\n    cadena = input(\"Introduce una cadena de texto (o 'fin' para salir): \")\n    if cadena.lower() == \"fin\":\n        break\n    for letra in cadena:\n        if letra.lower() in \"aeiou\":\n            contador_vocales += 1\n\nprint(f\"N\u00famero total de vocales: {contador_vocales}\")\n</code></pre> Tip <p>Analiza el condicional que hemos utilizado para comprobar si la letra es una vocal. En este caso, hemos utilizado <code>letra.lower() in \"aeiou\"</code> para comprobar si la letra en min\u00fascula est\u00e1 en la cadena de vocales. Esto nos permite contar tanto las vocales may\u00fasculas como las min\u00fasculas sin necesidad de duplicar el c\u00f3digo. En lenguaje natural estar\u00eda as\u00ed: \"Si la letra en min\u00fascula est\u00e1 en la cadena de vocales, entonces es una vocal\". Esto es una forma eficiente de comprobar si una letra es una vocal sin necesidad de utilizar m\u00faltiples condicionales.</p> Tip <p>El bucle <code>for letra in cadena:</code> itera sobre cada letra de la cadena introducida por el usuario. En cada iteraci\u00f3n, se comprueba si la letra es una vocal y, si lo es, se incrementa el contador de vocales. Al final del programa, se imprime el total de vocales encontradas. Este tipo de for se le llama \"for-each\" porque itera sobre cada elemento de una colecci\u00f3n (en este caso, la cadena de texto).</p>"},{"location":"MPO/UT2/ejercicios_ut2_bas/#ejercicio-24","title":"Ejercicio 24","text":"<p>Escribe un programa que reciba un n\u00famero <code>n</code> entero positivo y que escriba esta secuencia de n\u00fameros: un uno, dos doses, tres treses... hasta <code>n</code> enes. Por ejemplo, si el usuario introduce 5, el programa debe imprimir:</p> <pre><code>122333444455555\n</code></pre> Soluci\u00f3n <pre><code>n = int(input(\"Introduce un n\u00famero entero positivo: \"))\nfor i in range(1, n + 1):\n    for j in range(i):\n        print(i, end=\"\")\nprint()\n</code></pre>"},{"location":"MPO/UT3/","title":"UT3: Tipos de datos complejos","text":""},{"location":"MPO/UT3/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenid@s a la Unidad de Trabajo 3 (UT3) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en los tipos de datos complejos, que son fundamentales para el desarrollo de programas en Python. Aprender\u00e1s a utilizar listas, diccionarios y tuplas para almacenar y manipular datos de manera eficiente.</p>"},{"location":"MPO/UT3/#tipos-de-datos-complejos","title":"Tipos de datos complejos","text":"<p>Los tipos de datos complejos son estructuras que permiten almacenar m\u00faltiples valores en una sola variable. En Python, los tipos de datos complejos m\u00e1s comunes son las listas, los diccionarios y las tuplas. Cada uno de estos tipos tiene sus propias caracter\u00edsticas y usos.</p>"},{"location":"MPO/UT3/#listas","title":"Listas","text":"<p>Las listas son colecciones ordenadas y mutables de elementos. Puedes almacenar diferentes tipos de datos en una lista, incluyendo n\u00fameros, cadenas y otros objetos. Las listas se definen utilizando corchetes <code>[]</code> y los elementos se separan por comas.</p> <pre><code>mi_lista = [1, 2, 3, \"Hola\", True]\n</code></pre> <p>Si te fijas en el ejemplo anterior, <code>mi_lista</code> contiene cinco elementos: tres n\u00fameros enteros (1, 2, 3), una cadena de texto (\"Hola\") y un valor booleano (True). Las listas pueden contener elementos de diferentes tipos, lo que las hace muy vers\u00e1tiles.</p> <p>Antes de entrar en las operaciones que se pueden realizar con listas, es importante entender c\u00f3mo se almacenan los elementos en ellas. Cada elemento de una lista tiene un \u00edndice asociado, que comienza en 0. Por ejemplo, en la lista <code>mi_lista</code> anterior, el primer elemento (1) tiene un \u00edndice de 0, el segundo elemento (2) tiene un \u00edndice de 1, y as\u00ed sucesivamente.</p> <p></p> <p>Internamente, Python almacena las listas como una secuencia de referencias a los objetos que contienen. Esto significa que cuando creas una lista, Python no copia los objetos en la lista, sino que almacena referencias a ellos. Esto es importante tenerlo en cuenta, ya que puede afectar el rendimiento y el comportamiento de tu programa.</p> <p>Puedes acceder a los elementos de una lista utilizando su \u00edndice. Por ejemplo, para acceder al primer elemento de <code>mi_lista</code>, puedes usar:</p> <pre><code>print(mi_lista[0])  # Imprime: 1\n</code></pre> <p>Tambi\u00e9n puedes acceder a los elementos desde el final de la lista utilizando \u00edndices negativos. Por ejemplo, <code>mi_lista[-1]</code> te dar\u00e1 el \u00faltimo elemento de la lista.</p> <pre><code>print(mi_lista[-1])  # Imprime: True\n</code></pre> <p>Para declarar una lista vac\u00eda, puedes usar:</p> <pre><code>mi_lista_vacia = []\n</code></pre> <p>O tambi\u00e9n puedes usar la funci\u00f3n <code>list()</code>:</p> <pre><code>mi_lista_vacia = list()\n</code></pre>"},{"location":"MPO/UT3/#operaciones-con-listas","title":"Operaciones con listas","text":"<p>Las listas permiten realizar operaciones como agregar, eliminar y modificar elementos. Algunas de las operaciones m\u00e1s comunes son:</p> <ul> <li><code>append()</code>: Agrega un elemento al final de la lista.</li> <li><code>insert()</code>: Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</li> <li><code>remove()</code>: Elimina el primer elemento con el valor especificado.</li> <li><code>pop()</code>: Elimina y devuelve el \u00faltimo elemento de la lista (o el elemento en la posici\u00f3n especificada).</li> <li><code>sort()</code>: Ordena los elementos de la lista en orden ascendente.</li> <li><code>reverse()</code>: Invierte el orden de los elementos en la lista.</li> <li><code>len()</code>: Devuelve la longitud de la lista (n\u00famero de elementos).</li> </ul>"},{"location":"MPO/UT3/#otras-caracteristicas-de-las-listas","title":"Otras caracter\u00edsticas de las listas","text":"<p>Las listas tambi\u00e9n tienen otras caracter\u00edsticas interesantes, como la posibilidad de anidar listas dentro de otras listas (listas multidimensionales) y la capacidad de utilizar comprensiones de listas para crear nuevas listas de manera concisa.</p> <p>Este tipo de estructuras las denominamos listas anidadas. Por ejemplo:</p> <pre><code>mi_lista_anidada = [[1, 2, 3], [\"Hola\", \"Mundo\"], [True, False]]\n</code></pre> <p>En este caso, <code>mi_lista_anidada</code> contiene tres listas, cada una con diferentes tipos de datos. Puedes acceder a los elementos de las listas anidadas utilizando m\u00faltiples \u00edndices:</p> <pre><code>print(mi_lista_anidada[0][1])  # Imprime: 2\nprint(mi_lista_anidada[1][0])  # Imprime: Hola\n</code></pre>"},{"location":"MPO/UT3/#diccionarios","title":"Diccionarios","text":"<p>Un diccionario es una estructura de datos en Python que almacena pares clave-valor. Cada clave es \u00fanica y se utiliza para acceder a su valor asociado.</p> <pre><code>persona = {\n    \"nombre\": \"Ana\",\n    \"edad\": 30,\n    \"ciudad\": \"Valencia\"\n}\n</code></pre>"},{"location":"MPO/UT3/#caracteristicas-principales","title":"Caracter\u00edsticas principales","text":"<ul> <li>Las claves deben ser de tipo inmutable (strings, n\u00fameros, tuplas...).</li> <li>Los valores pueden ser de cualquier tipo.</li> <li>Los elementos no est\u00e1n ordenados (hasta Python 3.6 era completamente desordenado; desde Python 3.7 mantiene el orden de inserci\u00f3n).</li> <li>Se pueden anidar diccionarios dentro de otros diccionarios.</li> </ul>"},{"location":"MPO/UT3/#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":""},{"location":"MPO/UT3/#crear-un-diccionario","title":"Crear un diccionario","text":"<p>Para crear un diccionario, puedes usar llaves <code>{}</code> o la funci\u00f3n <code>dict()</code>:</p> <pre><code>mi_dic = {}  # Diccionario vac\u00edo\nmi_dic = dict(nombre=\"Luis\", edad=25)\n</code></pre>"},{"location":"MPO/UT3/#acceder-a-valores","title":"Acceder a valores","text":"<p>El acceso a los valores se realiza mediante la clave, es parecido a acceder a un elemento de una lista, pero en lugar de usar un \u00edndice, usas una clave:</p> <pre><code>print(persona[\"nombre\"])  # Ana\n</code></pre> <p>Ten en cuenta que se lanza un error si la clave no existe.</p> <p>Es recomendable usar el m\u00e9todo <code>.get()</code> para evitar errores:</p> <pre><code>print(persona.get(\"apellido\", \"No especificado\"))\n</code></pre> <p>En este caso, si la clave \"apellido\" no existe, se devuelve \"No especificado\" en lugar de lanzar un error.</p>"},{"location":"MPO/UT3/#modificar-valores","title":"Modificar valores","text":"<p>Para modificar un valor en un diccionario, simplemente asignas un nuevo valor a la clave correspondiente:</p> <pre><code>persona[\"edad\"] = 31\n</code></pre>"},{"location":"MPO/UT3/#anadir-nuevos-pares-clave-valor","title":"A\u00f1adir nuevos pares clave-valor","text":"<p>De manera similar, puedes a\u00f1adir nuevos pares clave-valor, la sintaxis es la misma que para modificar, pero la diferencia es que si la clave no existe, se crea un nuevo par:</p> <pre><code>persona[\"profesi\u00f3n\"] = \"Ingeniera\"\n</code></pre>"},{"location":"MPO/UT3/#eliminar-elementos","title":"Eliminar elementos","text":"<p>Para eliminar un elemento de un diccionario, puedes usar el m\u00e9todo <code>pop()</code> o la palabra clave <code>del</code>:</p> <pre><code>del persona[\"ciudad\"]\npersona.pop(\"edad\")\n</code></pre>"},{"location":"MPO/UT3/#comprobar-si-una-clave-existe","title":"Comprobar si una clave existe","text":"<p>Para comprobar si una clave existe en un diccionario, puedes usar el operador <code>in</code>:</p> <pre><code>if \"nombre\" in persona:\n    print(\"La clave existe\")\n</code></pre>"},{"location":"MPO/UT3/#recorrer-un-diccionario","title":"Recorrer un diccionario","text":"<p>Para recorrer un diccionario, puedes usar un bucle <code>for</code>. Puedes iterar sobre las claves, los valores o ambos:</p> <ul> <li>Recorrer claves:</li> </ul> <pre><code>for clave in persona:\n    print(clave)\n</code></pre> <ul> <li>Recorrer valores:</li> </ul> <pre><code>for valor in persona.values():\n    print(valor)\n</code></pre> <ul> <li>Recorrer claves y valores:</li> </ul> <pre><code>for clave, valor in persona.items():\n    print(f\"{clave}: {valor}\")\n</code></pre>"},{"location":"MPO/UT3/#metodos-utiles","title":"M\u00e9todos \u00fatiles","text":"M\u00e9todo Descripci\u00f3n <code>get(clave)</code> Devuelve el valor asociado a la clave <code>keys()</code> Devuelve una vista con las claves <code>values()</code> Devuelve una vista con los valores <code>items()</code> Devuelve pares (clave, valor) <code>pop(clave)</code> Elimina la clave y devuelve su valor <code>update(dic2)</code> Actualiza con los pares clave-valor de otro diccionario"},{"location":"MPO/UT3/#diccionarios-anidados","title":"Diccionarios anidados","text":"<pre><code>alumnos = {\n    \"alumno1\": {\"nombre\": \"Juan\", \"nota\": 7},\n    \"alumno2\": {\"nombre\": \"Laura\", \"nota\": 9}\n}\n</code></pre>"},{"location":"MPO/UT3/#ejemplo-practico","title":"Ejemplo pr\u00e1ctico","text":"<pre><code>inventario = {\n    \"manzanas\": 10,\n    \"naranjas\": 5,\n    \"pl\u00e1tanos\": 7\n}\n\nfor fruta, cantidad in inventario.items():\n    print(f\"Tengo {cantidad} {fruta}\")\n</code></pre>"},{"location":"MPO/UT3/#tuplas","title":"Tuplas","text":"<p>Una tupla es una colecci\u00f3n ordenada e inmutable de elementos. Una vez creada, no se puede modificar (ni a\u00f1adir, ni eliminar, ni cambiar elementos).</p> <pre><code>mi_tupla = (1, 2, 3)\n</code></pre>"},{"location":"MPO/UT3/#caracteristicas-principales_1","title":"Caracter\u00edsticas principales","text":"<ul> <li>Las tuplas son inmutables.</li> <li>Pueden contener elementos de diferentes tipos.</li> <li>Permiten elementos duplicados.</li> <li>Son m\u00e1s eficientes en memoria que las listas.</li> <li>Se pueden desempaquetar f\u00e1cilmente.</li> </ul>"},{"location":"MPO/UT3/#crear-tuplas","title":"Crear tuplas","text":"<p>Una tupla se define utilizando par\u00e9ntesis <code>()</code>. Puedes crear una tupla con uno o m\u00e1s elementos, y si es una tupla unitaria, debes incluir una coma al final para diferenciarla de un simple valor entre par\u00e9ntesis.</p> <pre><code>tupla1 = (1, 2, 3)\ntupla_unitaria = (5,)       # Necesita la coma\ntupla_vacia = tuple()\n</code></pre> <p>\u26a0\ufe0f Sin la coma, <code>(5)</code> es solo un entero con par\u00e9ntesis.</p>"},{"location":"MPO/UT3/#acceder-a-elementos","title":"Acceder a elementos","text":"<p>Una tupla se comporta de manera similar a una lista en cuanto al acceso a sus elementos. Puedes acceder a los elementos utilizando \u00edndices, que comienzan en 0.</p> <pre><code>print(tupla1[0])      # Primer elemento\nprint(tupla1[-1])     # \u00daltimo elemento\n</code></pre>"},{"location":"MPO/UT3/#recorrer-una-tupla","title":"Recorrer una tupla","text":"<p>As\u00ed como con las listas, puedes recorrer los elementos de una tupla utilizando un bucle <code>for</code>:</p> <ul> <li>Recorriendo sus elementos, con un for each.</li> <li>Recorriendo sus \u00edndices, con un for range.</li> </ul> <pre><code>for elemento in tupla1:\n    print(elemento)\n</code></pre>"},{"location":"MPO/UT3/#operaciones-comunes","title":"Operaciones comunes","text":"Operaci\u00f3n Ejemplo Longitud <code>len(tupla1)</code> Concatenar <code>tupla1 + tupla2</code> Repetir <code>tupla1 * 2</code> Ver si contiene <code>2 in tupla1</code> \u00cdndice de elemento <code>tupla1.index('hola')</code> Contar elementos <code>tupla1.count('adios')</code>"},{"location":"MPO/UT3/#desempaquetado","title":"Desempaquetado","text":"<p>Desempaquetar una tupla significa asignar sus elementos a variables individuales. Esto es \u00fatil cuando conoces la estructura de la tupla y quieres trabajar con sus valores de manera m\u00e1s directa.</p> <pre><code>persona = (\"Ana\", 30, \"Valencia\")\nnombre, edad, ciudad = persona\n\nprint(nombre)  # Ana\n</code></pre> <p>\u26a0\ufe0f El n\u00famero de variables debe coincidir con los elementos de la tupla.</p>"},{"location":"MPO/UT3/#tuplas-anidadas","title":"Tuplas anidadas","text":"<p>Las tuplas tambi\u00e9n pueden contener otras tuplas, lo que permite crear estructuras de datos m\u00e1s complejas. Esto es \u00fatil para representar datos relacionados de manera estructurada.</p> <pre><code>notas = (\n    (\"Juan\", 7),\n    (\"Luc\u00eda\", 8),\n    (\"Pedro\", 6)\n)\n\nfor nombre, nota in notas:\n    print(f\"{nombre} sac\u00f3 un {nota}\")\n</code></pre>"},{"location":"MPO/UT3/#tupla-o-lista","title":"\u00bfTupla o lista?","text":"Aspecto Tupla Lista Mutabilidad Inmutable Mutable Rendimiento M\u00e1s r\u00e1pida y ligera M\u00e1s pesada Uso com\u00fan Datos fijos o constantes Datos que cambian Sintaxis Par\u00e9ntesis <code>()</code> Corchetes <code>[]</code>"},{"location":"MPO/UT3/#ejemplo-practico_1","title":"Ejemplo pr\u00e1ctico","text":"<pre><code>coordenada = (39.4699, -0.3763)\n\ndef mostrar_ubicacion(coord):\n    lat, lon = coord\n    print(f\"Latitud: {lat}, Longitud: {lon}\")\n\nmostrar_ubicacion(coordenada)\n</code></pre>"},{"location":"MPO/UT3/#ejercicios-de-clase-listas","title":"Ejercicios de clase: listas","text":""},{"location":"MPO/UT3/#ejercicios-de-clase-diccionarios-y-tuplas","title":"Ejercicios de clase: diccionarios y tuplas","text":"<p>Para practicar lo aprendido en esta unidad, hemos preparado una serie de ejercicios que te ayudar\u00e1n a consolidar tus conocimientos. Puedes encontrar los ejercicios en el siguiente enlace:</p>"},{"location":"MPO/UT3/#ejercicios-extra-ut3","title":"Ejercicios extra UT3","text":""},{"location":"MPO/UT3/ejercicios_diccionarios_clase/","title":"Ejercicios de clase UT3: Diccionarios y tuplas","text":""},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#contexto","title":"Contexto","text":"<p>Los diccionarios y las tuplas son estructuras de datos fundamentales en Python. Los diccionarios permiten almacenar pares clave-valor, mientras que las tuplas son colecciones inmutables de elementos. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de diccionarios y tuplas para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando estas estructuras.</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-1-capitales-y-paises","title":"Ejercicio 1 - Capitales y pa\u00edses","text":"<p>Escribe un programa que almacene en un diccionario las capitales de varios pa\u00edses, se introducir\u00e1n los datos con la forma <code>PAIS-CAPITAL</code>. Esto debe ejecutarse indefinidamente hasta que el usuario introduzca \"FIN INSERCIONES\". El programa debe permitir al usuario consultar la capital de un pa\u00eds introduciendo su nombre. Si el pa\u00eds no est\u00e1 en el diccionario, el programa debe informar al usuario.</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-2-contar-palabras-en-un-texto","title":"Ejercicio 2 - Contar palabras en un texto","text":"<p>Escribe un programa que pida al usuario un texto y cuente cu\u00e1ntas veces aparece cada palabra en el texto. El programa debe imprimir un diccionario donde las claves son las palabras y los valores son sus respectivas frecuencias. Ignora la puntuaci\u00f3n y considera las palabras en min\u00fasculas.</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-3-inventario-de-productos","title":"Ejercicio 3 - Inventario de productos","text":"<p>Escribe un programa que gestione un inventario de productos utilizando un diccionario. El programa debe permitir al usuario a\u00f1adir productos con su nombre y cantidad, eliminar productos, y consultar la cantidad de un producto espec\u00edfico. El programa debe ejecutarse indefinidamente hasta que el usuario introduzca \"SALIR\".</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-4-tupla-de-numeros","title":"Ejercicio 4 - Tupla de n\u00fameros","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y almacene estos n\u00fameros en una tupla. Luego, el programa debe calcular y mostrar la suma, el promedio, el n\u00famero m\u00e1ximo y el n\u00famero m\u00ednimo de la tupla.</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-5-biblioteca-digital","title":"Ejercicio 5 - Biblioteca digital","text":"<p>Escribe un programa que gestione una biblioteca digital utilizando un diccionario. El programa debe permitir al usuario a\u00f1adir libros con su t\u00edtulo, autor y a\u00f1o de publicaci\u00f3n. El usuario debe poder consultar los libros por autor o por a\u00f1o de publicaci\u00f3n. El programa debe ejecutarse indefinidamente hasta que el usuario introduzca \"SALIR\".</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-6-elecciones-a-delegado","title":"Ejercicio 6 - Elecciones a delegado","text":"<p>Escribe un programa que simule unas elecciones a delegado de clase. El programa debe permitir a los alumnos votar por un candidato introduciendo su nombre. Al finalizar la votaci\u00f3n, el programa debe mostrar el nombre del candidato ganador y el n\u00famero de votos obtenidos. Si hay un empate, el programa debe informar al usuario del primer candidato que alcanz\u00f3 el n\u00famero m\u00e1ximo de votos. El programa debe ejecutarse indefinidamente hasta que el usuario introduzca \"FIN VOTACIONES\".</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-7-busqueda-por-valor-en-un-diccionario","title":"Ejercicio 7 - B\u00fasqueda por valor en un diccionario","text":"<p>Escribe un programa que replique el comportamiento del ejercicio 1, pero en lugar de buscar por clave (pa\u00eds), el usuario debe poder buscar por valor (capital). El programa debe permitir al usuario introducir una capital y devolver el pa\u00eds correspondiente. Si la capital no est\u00e1 en el diccionario, el programa debe informar al usuario.</p>"},{"location":"MPO/UT3/ejercicios_diccionarios_clase/#ejercicio-8-registro-de-ventas","title":"Ejercicio 8 - Registro de ventas","text":"<p>Escribe un programa que gestione un diccionario de productos, y por cada producto una lista de ventas diarias representadas como tuplas (d\u00eda, unidades_vendidas). Haz un men\u00fa que permita al usuario:</p> <ol> <li>A\u00f1adir un producto con su nombre.</li> <li>A\u00f1adir un registro de ventas para un producto espec\u00edfico.</li> <li>Consultar las ventas totales de un producto. El programa debe ejecutarse indefinidamente hasta que el usuario introduzca \"SALIR\".</li> </ol>"},{"location":"MPO/UT3/ejercicios_listas_clase/","title":"Ejercicios de clase UT3: Listas","text":""},{"location":"MPO/UT3/ejercicios_listas_clase/#contexto","title":"Contexto","text":"<p>Las listas son una de las estructuras de datos m\u00e1s utilizadas en Python. Permiten almacenar m\u00faltiples elementos en una sola variable y son muy vers\u00e1tiles. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de listas para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando listas.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-1-sumar-elementos-de-una-lista","title":"Ejercicio 1 - Sumar elementos de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y calcule la suma de todos los elementos de la lista. El programa debe imprimir el resultado.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-2-contar-elementos-de-una-lista","title":"Ejercicio 2 - Contar elementos de una lista","text":"<p>Escribe un programa que pida al usuario una lista de palabras separadas por comas y cuente cu\u00e1ntas palabras hay en la lista. El programa debe imprimir el resultado.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-3-mayor-y-menor-elemento-de-una-lista","title":"Ejercicio 3 - Mayor y menor elemento de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y encuentre el mayor y el menor elemento de la lista. El programa debe imprimir ambos resultados.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-4-sumar-dos-listas-de-igual-longitud","title":"Ejercicio 4 - Sumar dos listas de igual longitud","text":"<p>Escribe un programa que pida al usuario dos listas de n\u00fameros enteros separados por comas y sume los elementos de ambas listas. El programa debe imprimir la lista resultante. Si las listas no tienen la misma longitud, el programa debe imprimir un mensaje de error.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-5-invertir-una-lista","title":"Ejercicio 5 - Invertir una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y la invierta. El programa debe imprimir la lista invertida.</p>"},{"location":"MPO/UT3/ejercicios_listas_clase/#ejercicio-6-dias-de-la-semana","title":"Ejercicio 6 - Dias de la semana","text":"<p>Escribe un programa que reciba n\u00fameros hasta la introducci\u00f3n de un 0. Por cada n\u00famero, suponiendo que el 1 representa el lunes, el 2 el martes, etc., imprime el nombre del d\u00eda correspondiente.</p> <p>Ejemplo:</p> <pre><code>Ingrese un n\u00famero (0 para salir): 1\nLunes\nIngrese un n\u00famero (0 para salir): 3\nMi\u00e9rcoles\nIngrese un n\u00famero (0 para salir): 8\nLunes\nIngrese un n\u00famero (0 para salir): 0\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/","title":"Ejercicios UT2: Extras","text":""},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-1-contar-la-frecuencia-de-un-numero-en-una-lista","title":"Ejercicio 1 - Contar la frecuencia de un n\u00famero en una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por espacios y un n\u00famero entero. El programa debe contar cu\u00e1ntas veces aparece el n\u00famero en la lista y luego imprimir el resultado.</p> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por espacios: \").split()\nnumeros = [int(num) for num in numeros]\nnumero_a_contar = int(input(\"Ingrese un n\u00famero entero: \"))\nfrecuencia = numeros.count(numero_a_contar)\nprint(f\"El n\u00famero {numero_a_contar} aparece {frecuencia} veces en la lista.\")\n</code></pre> <p>Explicaci\u00f3n</p> <p>Cuando usas el m\u00e9todo <code>split()</code> sin argumentos, separa la cadena en por espacios. Igualmente, podemos usar <code>split(\" \")</code> para separar la cadena en por espacios.</p> <p>Explicaci\u00f3n</p> <p>El m\u00e9todo <code>count()</code> cuenta cu\u00e1ntas veces aparece un elemento en una lista. En este caso, cuenta cu\u00e1ntas veces aparece el n\u00famero ingresado por el usuario.</p>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-2-multiplicar-todos-los-elementos-de-una-lista","title":"Ejercicio 2 - Multiplicar todos los elementos de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por espacios y un n\u00famero entero. El programa debe multiplicar todos los elementos de la lista por el n\u00famero dado y luego imprimir la lista resultante.</p> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por espacios: \").split()\nnumeros = [int(num) for num in numeros]\nnumero_a_multiplicar = int(input(\"Ingrese un n\u00famero entero: \"))\nfor i in range(len(numeros)):\n    numeros[i] *= numero_a_multiplicar\nprint(\"Lista resultante:\", numeros)\n</code></pre> <p>Explicaci\u00f3n</p> <p>La forma [int(num) for num in numeros] convierte cada elemento de la lista de cadenas a enteros. Esto es necesario porque el m\u00e9todo <code>split()</code> devuelve una lista de cadenas.</p>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-3-filtrar-elementos-de-una-lista","title":"Ejercicio 3 - Filtrar elementos de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y filtre los n\u00fameros pares de la lista. El programa debe imprimir la lista de n\u00fameros pares.</p> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por comas: \").split(\",\")\nnumeros = [int(num) for num in numeros]\nnumeros_pares = []\nfor num in numeros:\n    if num % 2 == 0:\n        numeros_pares.append(num)\nprint(\"Lista de n\u00fameros pares:\", numeros_pares)\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-4-sumar-dos-listas-de-diferente-longitud","title":"Ejercicio 4 - Sumar dos listas de diferente longitud","text":"<p>Escribe un programa que pida al usuario dos listas de n\u00fameros enteros separados por comas y sume los elementos de ambas listas. Si las listas no tienen la misma longitud, el programa debe sumar los elementos de la lista m\u00e1s corta con los elementos correspondientes de la lista m\u00e1s larga y el resto de los elementos de la lista m\u00e1s larga deben ser sumados a cero. El programa debe imprimir la lista resultante.</p> Soluci\u00f3n <pre><code>lista1 = input(\"Ingrese la primera lista de n\u00fameros enteros separados por comas: \").split(\",\")\nlista2 = input(\"Ingrese la segunda lista de n\u00fameros enteros separados por comas: \").split(\",\")\nlista1 = [int(num) for num in lista1]\nlista2 = [int(num) for num in lista2]\nlongitud_maxima = max(len(lista1), len(lista2))\nsuma_listas = []\n\nfor i in range(longitud_maxima):\n    num1 = lista1[i] if i &lt; len(lista1) else 0\n    num2 = lista2[i] if i &lt; len(lista2) else 0\n    suma_listas.append(num1 + num2)\n\nprint(\"Lista resultante:\", suma_listas)\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-5-eliminar-todos-los-elementos-de-una-lista-que-sean-mayores-a-un-numero-dado","title":"Ejercicio 5 - Eliminar todos los elementos de una lista que sean mayores a un n\u00famero dado","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y un n\u00famero entero. El programa debe eliminar todos los elementos de la lista que sean mayores al n\u00famero dado y luego imprimir la lista resultante.</p> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por comas: \").split(\",\")\nnumeros = [int(num) for num in numeros]\nnumero_a_eliminar = int(input(\"Ingrese un n\u00famero entero: \"))\nnumeros_filtrados = []\nfor num in numeros:\n    if num &lt;= numero_a_eliminar:\n        numeros_filtrados.append(num)\nprint(\"Lista resultante:\", numeros_filtrados)\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-6-encontrar-el-segundo-valor-mas-grande-en-una-lista","title":"Ejercicio 6 - Encontrar el segundo valor m\u00e1s grande en una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas. El programa debe encontrar el segundo valor m\u00e1s grande en la lista y luego imprimirlo. Si no hay un segundo valor m\u00e1s grande, el programa debe imprimir un mensaje indicando que no se encontr\u00f3. Se asegura que la lista no contiene duplicados.</p> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por comas: \").split(\",\")\nnumeros = [int(num) for num in numeros]\nnumeros.sort()\n\nif len(numeros) &lt; 2:\n    print(\"No se encontr\u00f3 un segundo valor m\u00e1s grande.\")\nelse:\n    segundo_mayor = numeros[-2]\n    print(\"El segundo valor m\u00e1s grande es:\", segundo_mayor)\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-7-eliminar-elementos-duplicados-consecutivos-de-una-lista","title":"Ejercicio 7 - Eliminar elementos duplicados consecutivos de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas. El programa debe eliminar los elementos duplicados consecutivos de la lista y luego imprimir la lista resultante.</p> <p>Ejemplo:</p> <pre><code>Entrada: 1, 2, 2, 3, 3, 3, 4\nSalida: 1, 2, 3, 4\n</code></pre> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por comas: \").split(\",\")\nnumeros = [int(num) for num in numeros]\nnumeros_filtrados = []\n\nfor i in range(len(numeros)):\n    if i == 0 or numeros[i] != numeros[i - 1]:\n        numeros_filtrados.append(numeros[i])\n\nprint(\"Lista resultante:\", numeros_filtrados)\n</code></pre>"},{"location":"MPO/UT3/ejercicios_ut3_extra/#ejercicio-8-eliminar-elementos-duplicados-de-una-lista","title":"Ejercicio 8 - Eliminar elementos duplicados de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas. El programa debe eliminar los elementos duplicados de la lista y luego imprimir la lista resultante.</p> <p>Ejemplo:</p> <pre><code>Entrada: 1, 2, 2, 3, 3, 3, 4, 3, 4, 1\nSalida: 1, 2, 3, 4\n</code></pre> Soluci\u00f3n <pre><code>numeros = input(\"Ingrese una lista de n\u00fameros enteros separados por comas: \").split(\",\")\nnumeros = [int(num) for num in numeros]\nnumeros_unicos = []\n\nfor num in numeros:\n    if num not in numeros_unicos:\n        numeros_unicos.append(num)\nprint(\"Lista resultante:\", numeros_unicos)\n</code></pre>"},{"location":"MPO/UT4/","title":"UT4: Funciones y m\u00f3dulos","text":""},{"location":"MPO/UT4/#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenid@s a la Unidad de Trabajo 4 (UT4) del m\u00f3dulo profesional optativo (MPO) de Python. En esta unidad, nos centraremos en el concepto de funciones y m\u00f3dulos, dos elementos fundamentales para estructurar y organizar nuestro c\u00f3digo de manera eficiente. Las funciones nos permiten encapsular bloques de c\u00f3digo que realizan tareas espec\u00edficas, mientras que los m\u00f3dulos nos permiten agrupar funciones relacionadas en archivos separados, facilitando la reutilizaci\u00f3n y el mantenimiento del c\u00f3digo.</p> <p>Perfecto. A continuaci\u00f3n tienes el material te\u00f3rico ampliado sobre funciones en Python, pensado para alumnado de 1\u00ba de DAM, en el m\u00f3dulo de Programaci\u00f3n. Incluye definiciones detalladas, analog\u00edas, ejemplos comentados y consejos did\u00e1cticos.</p>"},{"location":"MPO/UT4/#funciones","title":"Funciones","text":"<p>Una funci\u00f3n es un bloque de c\u00f3digo con nombre que se puede ejecutar cuando se necesite. Sirve para resolver una tarea espec\u00edfica y puede recibir datos (llamados par\u00e1metros) y devolver un resultado (valor de retorno).</p> <p>Piensa en una funci\u00f3n como una m\u00e1quina: Le das ingredientes (par\u00e1metros), hace un trabajo (instrucciones), y puede darte un resultado (valor de retorno).</p>"},{"location":"MPO/UT4/#ventajas-de-usar-funciones","title":"Ventajas de usar funciones","text":"<ul> <li>Reutilizaci\u00f3n de c\u00f3digo: Escribes una vez, usas muchas.</li> <li>Modularidad: Puedes dividir un programa en partes m\u00e1s peque\u00f1as, claras y f\u00e1ciles de entender.</li> <li>Facilita la prueba de errores: Puedes probar una funci\u00f3n de forma aislada.</li> <li>Mejora la legibilidad: Los programas con funciones bien nombradas se entienden mejor.</li> </ul>"},{"location":"MPO/UT4/#como-se-define-una-funcion-en-python","title":"\u00bfC\u00f3mo se define una funci\u00f3n en Python?","text":""},{"location":"MPO/UT4/#sintaxis-basica","title":"Sintaxis b\u00e1sica","text":"<pre><code>def nombre_funcion(par\u00e1metros):\n    \"\"\"Descripci\u00f3n de lo que hace la funci\u00f3n (opcional pero recomendable)\"\"\"\n    instrucciones\n    return valor  # opcional\n</code></pre>"},{"location":"MPO/UT4/#detalle-de-cada-parte","title":"Detalle de cada parte","text":"<ul> <li><code>def</code>: palabra reservada que indica que se va a definir una funci\u00f3n.</li> <li><code>nombre_funcion</code>: identificador que le damos a la funci\u00f3n. Se recomienda usar min\u00fasculas y guiones bajos (<code>snake_case</code>) si tiene varias palabras.</li> <li><code>par\u00e1metros</code>: variables que recibe la funci\u00f3n como entrada (pueden ser cero o m\u00e1s).</li> <li><code>return</code>: sirve para devolver un resultado desde la funci\u00f3n (es opcional).</li> </ul>"},{"location":"MPO/UT4/#ejemplos","title":"Ejemplos","text":""},{"location":"MPO/UT4/#ejemplo-1-funcion-sin-parametros-ni-retorno","title":"Ejemplo 1: Funci\u00f3n sin par\u00e1metros ni retorno","text":"<pre><code>def saludar():\n    print(\"Hola, bienvenido al curso de DAM\")\n\nsaludar()\n</code></pre> <p>Esta funci\u00f3n no necesita datos externos. Simplemente ejecuta una instrucci\u00f3n (mostrar un mensaje).</p>"},{"location":"MPO/UT4/#ejemplo-2-funcion-con-parametros","title":"Ejemplo 2: Funci\u00f3n con par\u00e1metros","text":"<pre><code>def saludar_persona(nombre):\n    print(f\"Hola, {nombre}. \u00a1Bienvenido!\")\n\nsaludar_persona(\"Laura\")\n</code></pre> <p>Aqu\u00ed, la funci\u00f3n recibe un valor externo (<code>nombre</code>) y lo usa para personalizar el saludo. Los par\u00e1metros permiten hacer funciones m\u00e1s flexibles.</p>"},{"location":"MPO/UT4/#ejemplo-3-funcion-con-retorno-return","title":"Ejemplo 3: Funci\u00f3n con retorno (<code>return</code>)","text":"<pre><code>def sumar(a, b):\n    resultado = a + b\n    return resultado\n\ntotal = sumar(5, 3)\nprint(\"La suma es:\", total)\n</code></pre> <p>Esta funci\u00f3n devuelve un valor. La palabra clave <code>return</code> se usa para enviar el resultado de vuelta al lugar donde fue llamada. Es muy \u00fatil cuando necesitamos que la funci\u00f3n nos diga el resultado de su operaci\u00f3n.</p>"},{"location":"MPO/UT4/#ejemplo-4-funcion-con-valores-por-defecto","title":"Ejemplo 4: Funci\u00f3n con valores por defecto","text":"<pre><code>def saludar(nombre=\"invitado\"):\n    print(f\"Hola, {nombre}\")\n\nsaludar()           # Hola, invitado\nsaludar(\"Carlos\")   # Hola, Carlos\n</code></pre> <p>Si el usuario no proporciona un valor, se usa el valor por defecto (<code>\"invitado\"</code>). Esto hace que la funci\u00f3n sea m\u00e1s flexible.</p>"},{"location":"MPO/UT4/#ejemplo-5-funcion-con-multiples-valores-de-retorno","title":"Ejemplo 5: Funci\u00f3n con m\u00faltiples valores de retorno","text":"<pre><code>def operaciones(a, b):\n    suma = a + b\n    resta = a - b\n    return suma, resta\n\nx, y = operaciones(10, 4)\nprint(\"Suma:\", x)\nprint(\"Resta:\", y)\n</code></pre> <p>Python permite devolver varios valores separados por comas, y luego se pueden recoger en varias variables.</p>"},{"location":"MPO/UT4/#buenas-practicas-al-crear-funciones","title":"Buenas pr\u00e1cticas al crear funciones","text":"<ul> <li>Usa nombres descriptivos: que indiquen claramente qu\u00e9 hace la funci\u00f3n (<code>calcular_area</code>, <code>obtener_precio</code>, etc.).</li> <li>A\u00f1ade comentarios o docstrings (<code>\"\"\"texto\"\"\"</code>) para explicar la funci\u00f3n.</li> <li>Divide tareas complejas en varias funciones m\u00e1s simples.</li> <li>No dependas de variables externas (globales) dentro de una funci\u00f3n.</li> <li>Procura que cada funci\u00f3n haga una sola cosa. Esto se llama el principio de responsabilidad \u00fanica.</li> </ul>"},{"location":"MPO/UT4/#cuando-usar-funciones","title":"\u00bfCu\u00e1ndo usar funciones?","text":"<ul> <li>Siempre que tengas c\u00f3digo que se repite</li> <li>Siempre que una parte del programa pueda separarse y probarse sola</li> <li>Cuando quieras organizar tu programa de forma modular</li> </ul>"},{"location":"MPO/UT4/#modulos","title":"M\u00f3dulos","text":""},{"location":"MPO/UT4/#que-es-un-modulo","title":"\u00bfQu\u00e9 es un m\u00f3dulo?","text":"<p>Un m\u00f3dulo es un archivo con extensi\u00f3n <code>.py</code> que contiene c\u00f3digo Python organizado para ser reutilizado. Este c\u00f3digo puede incluir:</p> <ul> <li>Funciones (bloques de c\u00f3digo reutilizables)</li> <li>Clases (plantillas para crear objetos)</li> <li>Variables (datos almacenados)</li> <li>C\u00f3digo ejecutable (que se corre al importar el m\u00f3dulo)</li> </ul> <p>Ejemplo visual: <pre><code>proyecto/\n\u2502\n\u251c\u2500\u2500 main.py            # Programa principal\n\u2514\u2500\u2500 mis_modulos/\n    \u251c\u2500\u2500 calculadora.py # M\u00f3dulo con funciones matem\u00e1ticas\n    \u2514\u2500\u2500 utils.py      # M\u00f3dulo con utilidades varias\n</code></pre></p> <p>Beneficios clave:</p> <ol> <li>Organizaci\u00f3n: Divide programas grandes en archivos m\u00e1s peque\u00f1os y manejables.</li> <li>Reutilizaci\u00f3n: Usa el mismo c\u00f3digo en m\u00faltiples proyectos sin copiar/pegar.</li> <li>Encapsulamiento: Oculta detalles complejos detr\u00e1s de interfaces simples.</li> </ol>"},{"location":"MPO/UT4/#como-importar-modulos","title":"C\u00f3mo importar m\u00f3dulos","text":""},{"location":"MPO/UT4/#importacion-basica","title":"Importaci\u00f3n b\u00e1sica","text":"<pre><code>import math\nprint(math.pi)  # 3.141592653589793\n</code></pre> <ul> <li>Accedes a los elementos con la notaci\u00f3n <code>m\u00f3dulo.elemento</code></li> <li>Ideal cuando necesitas muchos elementos del m\u00f3dulo</li> </ul>"},{"location":"MPO/UT4/#importacion-selectiva","title":"Importaci\u00f3n selectiva","text":"<pre><code>from math import sqrt, pow\nprint(pow(2, 3))  # 8.0\n</code></pre> <ul> <li>Ventaja: No necesitas prefijar con el nombre del m\u00f3dulo</li> <li>Riesgo: Posibles conflictos de nombres</li> </ul>"},{"location":"MPO/UT4/#importacion-con-alias","title":"Importaci\u00f3n con alias","text":"<pre><code>import numpy as np\nprint(np.array([1, 2, 3]))  # Crea un array de NumPy\n</code></pre> <ul> <li>Especialmente \u00fatil para:</li> <li>M\u00f3dulos con nombres largos</li> <li>Librer\u00edas de visualizaci\u00f3n de datos</li> <li>Cuando trabajas con m\u00faltiples m\u00f3dulos similares</li> </ul>"},{"location":"MPO/UT4/#importacion-avanzada","title":"Importaci\u00f3n avanzada","text":"<pre><code>from statistics import (\n    mean as promedio,\n    median as mediana,\n    stdev as desviacion\n)\n</code></pre> <ul> <li>Permite renombrar funciones para mayor claridad</li> <li>\u00datil cuando los nombres originales son muy t\u00e9cnicos</li> </ul>"},{"location":"MPO/UT4/#creacion-de-modulos-personalizados","title":"Creaci\u00f3n de m\u00f3dulos personalizados","text":""},{"location":"MPO/UT4/#estructura-tipica","title":"Estructura t\u00edpica:","text":"<pre><code>mi_proyecto/\n\u2502\n\u251c\u2500\u2500 main.py\n\u2514\u2500\u2500 modulo_ventas/\n    \u251c\u2500\u2500 __init__.py    # Para convertir en paquete\n    \u251c\u2500\u2500 clientes.py\n    \u2514\u2500\u2500 facturacion.py\n</code></pre> <p>Ejemplo completo:</p> <p>geometria.py</p> <pre><code>\"\"\"M\u00f3dulo para c\u00e1lculos geom\u00e9tricos b\u00e1sicos\"\"\"\n# Constante del m\u00f3dulo\nPI = 3.1416\n\ndef area_circulo(radio):\n    \"\"\"Calcula el \u00e1rea de un c\u00edrculo\"\"\"\n    return PI * radio ** 2\n\ndef perimetro_rectangulo(largo, ancho):\n    return 2 * (largo + ancho)\n\n# C\u00f3digo que se ejecuta al importar\nprint(\"M\u00f3dulo geometr\u00eda cargado correctamente\")\n</code></pre> <p>main.py</p> <pre><code>from geometria import area_circulo, PI\n\nprint(f\"El valor de PI es: {PI}\")\nprint(f\"\u00c1rea de c\u00edrculo radio 5: {area_circulo(5)}\")\n</code></pre> <p>Notas importantes:</p> <ul> <li>El archivo <code>__init__.py</code> (aunque vac\u00edo) convierte un directorio en un paquete Python</li> <li>El c\u00f3digo fuera de funciones se ejecuta al importar el m\u00f3dulo</li> </ul>"},{"location":"MPO/UT4/#modulos-estandar-mas-importantes","title":"M\u00f3dulos est\u00e1ndar m\u00e1s importantes","text":""},{"location":"MPO/UT4/#matematicas-math","title":"Matem\u00e1ticas (<code>math</code>)","text":"<pre><code>import math\n\n# Constantes\nprint(math.pi)      # 3.141592...\nprint(math.e)       # 2.718281...\n\n# Funciones\nprint(math.factorial(5))    # 120\nprint(math.gcd(12, 18))     # M\u00e1ximo com\u00fan divisor: 6\nprint(math.radians(180))    # Convierte a radianes: 3.1415...\n</code></pre>"},{"location":"MPO/UT4/#fechas-y-horas-datetime","title":"Fechas y horas (<code>datetime</code>)","text":"<pre><code>from datetime import datetime, timedelta\n\nhoy = datetime.now()\nprint(hoy.strftime(\"%d/%m/%Y\"))  # Formatea fecha: \"11/06/2025\"\n\nma\u00f1ana = hoy + timedelta(days=1)\ndiferencia = ma\u00f1ana - hoy\nprint(diferencia.total_seconds())  # 86400.0\n</code></pre>"},{"location":"MPO/UT4/#sistema-operativo-os","title":"Sistema operativo (<code>os</code>)","text":"<pre><code>import os\n\n# Rutas\nprint(os.getcwd())  # Directorio actual\nos.mkdir(\"nueva_carpeta\")  # Crear directorio\n\n# Variables de entorno\nprint(os.environ.get('PATH'))\n</code></pre>"},{"location":"MPO/UT4/#aleatoriedad-random","title":"Aleatoriedad (<code>random</code>)","text":"<pre><code>import random\n\n# N\u00fameros aleatorios\nprint(random.uniform(1.5, 2.5))  # Float entre 1.5 y 2.5\n\n# Selecciones\ncolores = [\"rojo\", \"verde\", \"azul\"]\nprint(random.sample(colores, 2))  # 2 elementos aleatorios\n</code></pre>"},{"location":"MPO/UT4/#buenas-practicas-con-modulos","title":"Buenas pr\u00e1cticas con m\u00f3dulos","text":"<ol> <li>Nombres descriptivos: <code>calculadora.py</code> mejor que <code>mod1.py</code></li> <li>Documentaci\u00f3n: Usa docstrings para explicar el m\u00f3dulo</li> <li>Evitar <code>from modulo import *</code>: Puede causar conflictos</li> </ol>"},{"location":"MPO/UT4/#ejercicios-de-clase-funciones","title":"Ejercicios de clase: funciones","text":""},{"location":"MPO/UT4/#ejercicios-de-clase-importar-modulos","title":"Ejercicios de clase: importar m\u00f3dulos","text":""},{"location":"MPO/UT4/ejercicios_funciones_clase/","title":"Ejercicios de clase UT4: Funciones","text":""},{"location":"MPO/UT4/ejercicios_funciones_clase/#contexto","title":"Contexto","text":"<p>Las funciones son bloques de c\u00f3digo reutilizables que permiten organizar y estructurar mejor el c\u00f3digo. En este ejercicio, se te presentar\u00e1n varios problemas que requieren el uso de funciones para resolverlos. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando funciones.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-1-calcular-el-area-de-un-circulo","title":"Ejercicio 1 - Calcular el \u00e1rea de un c\u00edrculo","text":"<p>Escribe un programa que pida al usuario el radio de un c\u00edrculo y calcule su \u00e1rea. El programa debe definir una funci\u00f3n que reciba el valor del radio, realice el c\u00e1lculo del \u00e1rea y luego imprima el resultado.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-2-condigura-un-mensaje-de-bienvenida","title":"Ejercicio 2 - Condigura un mensaje de bienvenida","text":"<p>Escribe un programa que pida al usuario un nombre, un apellido y una edad. El programa debe definir una funci\u00f3n que reciba estos datos y luego imprima un mensaje de bienvenida personalizado.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-3-calcular-el-factorial-de-un-numero","title":"Ejercicio 3 - Calcular el factorial de un n\u00famero","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y calcule su factorial. El programa debe definir una funci\u00f3n que reciba el n\u00famero, realice el c\u00e1lculo del factorial y luego imprima el resultado.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-4-verificar-si-un-numero-es-primo","title":"Ejercicio 4 - Verificar si un n\u00famero es primo","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y verifique si es primo. El programa debe definir una funci\u00f3n que reciba el n\u00famero, realice la verificaci\u00f3n y luego imprima si el n\u00famero es primo o no.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-5-calcular-la-suma-de-digitos-de-un-numero","title":"Ejercicio 5 - Calcular la suma de d\u00edgitos de un n\u00famero","text":"<p>Escribe un programa que pida al usuario un n\u00famero entero y calcule la suma de sus d\u00edgitos. El programa debe definir una funci\u00f3n que reciba el n\u00famero, realice el c\u00e1lculo de la suma de los d\u00edgitos y luego imprima el resultado.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-6-encontrar-el-maximo-y-minimo-de-una-lista","title":"Ejercicio 6 - Encontrar el m\u00e1ximo y m\u00ednimo de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas. El programa debe definir una funci\u00f3n que reciba la lista, encuentre el m\u00e1ximo y el m\u00ednimo de la lista y luego imprima ambos resultados.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-7-incrementar-cada-elemento-de-una-lista","title":"Ejercicio 7 - Incrementar cada elemento de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas y un n\u00famero entero. El programa debe definir una funci\u00f3n que reciba la lista y el n\u00famero, incremente cada elemento de la lista por el n\u00famero dado y luego imprima la lista resultante.</p>"},{"location":"MPO/UT4/ejercicios_funciones_clase/#ejercicio-8-eliminar-elementos-duplicados-de-una-lista","title":"Ejercicio 8 - Eliminar elementos duplicados de una lista","text":"<p>Escribe un programa que pida al usuario una lista de n\u00fameros enteros separados por comas. El programa debe definir una funci\u00f3n que reciba la lista, elimine los elementos duplicados y luego imprima la lista resultante.</p>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/","title":"Ejercicios de clase UT4: Importar m\u00f3dulos","text":""},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#contexto","title":"Contexto","text":"<p>Los m\u00f3dulos en Python son una herramienta muy importante y poderosa. Se debe explorar y probar diferentes m\u00f3dulos para sacar el mayor provecho de estos. En los siguientes ejercicios exploraremos los m\u00f3dulos m\u00e1s t\u00edpicos.</p>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#ejercicio-1-gestor-de-archivos-con-python-usando-el-modulo-os","title":"Ejercicio 1 - Gestor de Archivos con Python usando el m\u00f3dulo <code>os</code>","text":"<p>Desarrollar un programa en Python que permita gestionar archivos y directorios mediante un men\u00fa interactivo, utilizando las funciones principales del m\u00f3dulo <code>os</code>.  </p> <p>El programa debe incluir las siguientes funcionalidades:  </p> <ol> <li> <p>Men\u00fa principal con las siguientes opciones:  </p> <ul> <li>Listar archivos del directorio actual  </li> <li>Verificar si un archivo existe  </li> <li>Crear un nuevo archivo  </li> <li>Crear un nuevo directorio  </li> <li>Salir  </li> </ul> </li> <li> <p>Implementaci\u00f3n de cada opci\u00f3n: </p> <ul> <li>Listar archivos: Mostrar todos los archivos y carpetas en el directorio actual.  </li> <li>Verificar existencia: Pedir al usuario un nombre de archivo y comprobar si existe.  </li> <li>Crear archivo: Solicitar un nombre y generar un archivo vac\u00edo.  </li> <li>Crear directorio: Pedir un nombre y crear una carpeta nueva.  </li> </ul> </li> <li> <p>Manejo de errores: </p> <ul> <li>Evitar que el programa falle si el usuario ingresa datos incorrectos.  </li> <li>Mostrar mensajes claros (ej: \"\u274c El archivo no existe\", \"\u2705 Operaci\u00f3n exitosa\").  </li> </ul> </li> <li> <p>Bucle infinito:</p> <ul> <li>El men\u00fa debe mostrarse continuamente hasta que el usuario elija \"Salir\".  </li> </ul> </li> </ol>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#funciones-del-modulo-os-a-utilizar","title":"Funciones del m\u00f3dulo <code>os</code> a utilizar","text":"Funci\u00f3n Descripci\u00f3n Ejemplo de uso <code>os.listdir()</code> Lista archivos en un directorio <code>os.listdir('.')</code> <code>os.path.exists()</code> Verifica si un archivo/directorio existe <code>os.path.exists(\"archivo.txt\")</code> <code>os.mkdir()</code> Crea un nuevo directorio <code>os.mkdir(\"nueva_carpeta\")</code> <code>open()</code> (modo <code>'w'</code>) Crea/sobrescribe un archivo (no es de <code>os</code>, pero \u00fatil) <code>open(\"archivo.txt\", \"w\").close()</code>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#ejercicio-2-coloreando-la-terminal-con-colorama","title":"Ejercicio 2 - Coloreando la Terminal con <code>colorama</code>","text":"<p>Vamos a evolucionar el programa del ejercicio anterior para que los mensajes se muestren con colores utilizando el m\u00f3dulo <code>colorama</code>.</p> <p>Concretamente vamos a modificar la opci\u00f3n de listar archivos.</p> <p>En vez de imprimir los nombres de los archivos directamente, vamos a colorearlos seg\u00fan su tipo: - Archivos de texto (<code>.txt</code>) en verde. - Archivos de imagen (<code>.jpg</code>, <code>.png</code>) en azul. - Archivos de audio (<code>.mp3</code>, <code>.wav</code>) en amarillo. - Otros archivos en blanco.</p>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#funciones-del-modulo-colorama-a-utilizar","title":"Funciones del m\u00f3dulo <code>colorama</code> a utilizar","text":"Funci\u00f3n Descripci\u00f3n Ejemplo de uso <code>Fore</code> Colores del texto <code>Fore.GREEN</code>, <code>Fore.BLUE</code>, etc. <code>Style</code> Estilos del texto <code>Style.RESET_ALL</code>"},{"location":"MPO/UT4/ejercicios_importar_modulos_clase/#ejemplo-de-implementacion","title":"Ejemplo de implementaci\u00f3n","text":"<pre><code>import os\nfrom colorama import Fore, Style\ndef pintar_terminal():\n    print(\"Ejemplo de uso de colorama\")\n    print(Fore.GREEN + \"Este texto es verde\" + Style.RESET_ALL)\n    print(Fore.BLUE + \"Este texto es azul\" + Style.RESET_ALL)\n    print(Fore.YELLOW + \"Este texto es amarillo\" + Style.RESET_ALL)\n    print(Fore.WHITE + \"Este texto es blanco\" + Style.RESET_ALL)\n    print(\"Fin del ejemplo\")\n</code></pre> <p>Una vez implementado, el programa deber\u00eda mostrar los archivos del directorio actual con los colores correspondientes seg\u00fan su tipo. Aseg\u00farate de que el usuario pueda ver claramente los nombres de los archivos coloreados. A continuaci\u00f3n imprime detalles de cada archivo, como su tama\u00f1o y fecha de modificaci\u00f3n usando la funci\u00f3n <code>os.stat()</code>.</p> <p>Con estas modificaciones vamos a tener una suerte de comando <code>ls</code>(o <code>dir</code> en Windows) mejorado, que no solo lista los archivos, sino que tambi\u00e9n los colorea seg\u00fan su tipo y muestra informaci\u00f3n adicional.</p>"},{"location":"MPO/UT5/","title":"UT5: Manejo de Archivos y Errores","text":""},{"location":"MPO/UT5/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta unidad, aprenderemos a manejar archivos en Python, incluyendo la lectura y escritura de archivos, as\u00ed como la gesti\u00f3n de errores mediante excepciones. Estos conceptos son fundamentales para desarrollar aplicaciones robustas y eficientes.</p>"},{"location":"MPO/UT5/#manejo-de-archivos","title":"Manejo de Archivos","text":"<p>En Python, podemos trabajar con archivos utilizando funciones integradas que nos permiten abrir, leer, escribir y cerrar archivos de manera sencilla.</p>"},{"location":"MPO/UT5/#abrir-un-archivo","title":"Abrir un archivo","text":"<p>Para abrir un archivo, utilizamos la funci\u00f3n <code>open()</code>, que recibe dos argumentos: el nombre del archivo y el modo en que queremos abrirlo (lectura, escritura, etc.).</p> <pre><code>archivo = open('mi_archivo.txt', 'r')  # 'r' para lectura\n</code></pre>"},{"location":"MPO/UT5/#modos-de-apertura","title":"Modos de apertura","text":"<p>Los modos de apertura m\u00e1s comunes son:</p> <pre><code>archivo = open('mi_archivo.txt', 'r')  # 'r' para lectura\narchivo = open('mi_archivo.txt', 'w')  # 'w' para escritura\narchivo = open('mi_archivo.txt', 'a')  # 'a' para agregar contenido al final\narchivo = open('mi_archivo.txt', 'r+') # 'r+' para lectura y escritura\n</code></pre>"},{"location":"MPO/UT5/#leer-un-archivo","title":"Leer un archivo","text":"<p>Para leer el contenido de un archivo, podemos usar m\u00e9todos como <code>read()</code>, <code>readline()</code> o <code>readlines()</code>.</p> <p>Las diferencias entre estos m\u00e9todos son:</p> <ul> <li><code>read()</code>: Lee todo el contenido del archivo de una sola vez y lo devuelve como una cadena.</li> <li><code>readline()</code>: Lee una l\u00ednea del archivo cada vez que se llama y devuelve esa l\u00ednea como una cadena.</li> <li><code>readlines()</code>: Lee todas las l\u00edneas del archivo y las devuelve como una lista de cadenas.</li> </ul> <pre><code>contenido = archivo.read()  # Lee todo el contenido\nlinea = archivo.readline()  # Lee una l\u00ednea\nlineas = archivo.readlines() # Lee todas las l\u00edneas\n</code></pre> <p>Conocemos como cursor al indicador de posici\u00f3n en el archivo. Cada vez que leemos o escribimos, el cursor se mueve autom\u00e1ticamente. Por ejemplo, despu\u00e9s de leer una l\u00ednea con <code>readline()</code>, el cursor se mueve a la siguiente l\u00ednea.</p>"},{"location":"MPO/UT5/#escribir-en-un-archivo","title":"Escribir en un archivo","text":"<p>Para escribir en un archivo, utilizamos el m\u00e9todo <code>write()</code> o <code>writelines()</code>.</p> <p>La diferencia entre estos m\u00e9todos es:</p> <ul> <li><code>write()</code>: Escribe una cadena en el archivo.</li> <li><code>writelines()</code>: Escribe una lista de cadenas en el archivo.</li> </ul> <pre><code>archivo = open('mi_archivo.txt', 'w')  # Abrir en modo escritura\narchivo.write('Hola, mundo!\\n')        # Escribir una l\u00ednea\narchivo.writelines(['L\u00ednea 1\\n', 'L\u00ednea 2\\n']) # Escribir varias l\u00edneas\n</code></pre> <p>Igual que al leer, el cursor se mueve autom\u00e1ticamente despu\u00e9s de escribir.</p> Importante <p>Al abrir un archivo en modo escritura (<code>'w'</code>), si el archivo ya existe, su contenido se borrar\u00e1. Si queremos agregar contenido sin borrar lo existente, debemos usar el modo <code>'a'</code> (append).</p>"},{"location":"MPO/UT5/#cerrar-un-archivo","title":"Cerrar un archivo","text":"<p>Es importante cerrar el archivo despu\u00e9s de terminar de trabajar con \u00e9l para liberar recursos. Utilizamos el m\u00e9todo <code>close()</code>.</p> <p>Este m\u00e9todo no recibe argumentos y no devuelve ning\u00fan valor. Simplemente cierra el archivo que hemos abierto previamente.</p> <pre><code>archivo.close()\n</code></pre>"},{"location":"MPO/UT5/#uso-de-with-para-manejar-archivos","title":"Uso de <code>with</code> para manejar archivos","text":"<p>Una forma recomendada de manejar archivos en Python es utilizando la declaraci\u00f3n <code>with</code>. Esto asegura que el archivo se cierre autom\u00e1ticamente al finalizar el bloque de c\u00f3digo, incluso si ocurre un error.</p> <pre><code>with open('mi_archivo.txt', 'r') as archivo:\n    contenido = archivo.read()\n    print(contenido)\n# El archivo se cierra autom\u00e1ticamente aqu\u00ed\n</code></pre>"},{"location":"MPO/UT5/#ejercicios-de-clase-manejo-de-archivos-y-errores","title":"Ejercicios de clase: Manejo de Archivos y Errores","text":""},{"location":"MPO/UT5/ejercicios_archivos_clase/","title":"Ejercicios de clase UT5: Manejo de Archivos y Errores","text":""},{"location":"MPO/UT5/ejercicios_archivos_clase/#contexto","title":"Contexto","text":"<p>En esta unidad, hemos aprendido a manejar archivos en Python, incluyendo la lectura y escritura de archivos, as\u00ed como la gesti\u00f3n de errores mediante excepciones. Ahora, pondremos en pr\u00e1ctica estos conceptos a trav\u00e9s de una serie de ejercicios. Aseg\u00farate de entender cada problema y de implementar una soluci\u00f3n adecuada utilizando las t\u00e9cnicas aprendidas.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-1-leer-un-archivo-y-contar-lineas","title":"Ejercicio 1 - Leer un archivo y contar l\u00edneas","text":"<p>Escribe un programa que abra un archivo de texto, lea su contenido y cuente el n\u00famero de l\u00edneas que contiene. El programa debe definir una funci\u00f3n que realice esta tarea y luego imprima el resultado.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-2-leer-un-archivo-y-contar-lineas-y-palabras","title":"Ejercicio 2 - Leer un archivo y contar l\u00edneas y palabras","text":"<p>Escribe un programa que abra un archivo de texto, lea su contenido y cuente el n\u00famero de l\u00edneas y palabras que contiene. El programa debe definir una funci\u00f3n que realice esta tarea y luego imprima el resultado.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-3-escribir-en-un-archivo","title":"Ejercicio 3 - Escribir en un archivo","text":"<p>Escribe un programa que pida al usuario una lista de nombres y los guarde en un archivo de texto, cada nombre en una l\u00ednea diferente. El programa debe definir una funci\u00f3n que reciba la lista de nombres y el nombre del archivo, y luego escriba los nombres en el archivo.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-4-copiar-el-contenido-de-un-archivo-a-otro","title":"Ejercicio 4 - Copiar el contenido de un archivo a otro","text":"<p>Escribe un programa que copie el contenido de un archivo de texto a otro archivo. El programa debe definir una funci\u00f3n que reciba los nombres de ambos archivos, lea el contenido del primer archivo y lo escriba en el segundo archivo.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-5-censurar-palabras-en-un-archivo","title":"Ejercicio 5 - Censurar palabras en un archivo","text":"<p>Escribe un programa que abra un archivo de texto y reemplace todas las ocurrencias de una palabra espec\u00edfica por otra palabra. El programa debe definir una funci\u00f3n que reciba el nombre del archivo, la palabra a censurar y la palabra de reemplazo, y luego realice la censura en el archivo.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-6-buscar-una-palabra-en-un-archivo","title":"Ejercicio 6 - Buscar una palabra en un archivo","text":"<p>Escribe un programa que abra un archivo de texto y busque todas las l\u00edneas que contienen una palabra espec\u00edfica. El programa debe definir una funci\u00f3n que reciba el nombre del archivo y la palabra a buscar, y luego imprima todas las l\u00edneas que contienen esa palabra.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-7-buscar-exhaustivamente-una-palabra-en-un-archivo","title":"Ejercicio 7 - Buscar exhaustivamente una palabra en un archivo","text":"<p>Escribe un programa que abra un archivo de texto y busque todas las ocurrencias de una palabra espec\u00edfica, sin importar may\u00fasculas o min\u00fasculas. El programa debe definir una funci\u00f3n que reciba el nombre del archivo y la palabra a buscar, y luego imprima todas las l\u00edneas que contienen esa palabra y en qu\u00e9 posici\u00f3n en la l\u00ednea, ignorando las diferencias de may\u00fasculas y min\u00fasculas.</p>"},{"location":"MPO/UT5/ejercicios_archivos_clase/#ejercicio-8-generar-un-log-de-accesos","title":"Ejercicio 8 - Generar un log de accesos","text":"<p>Escribe un programa que simule un sistema de acceso a un recurso protegido. El programa debe pedir al usuario un nombre de usuario y una contrase\u00f1a, y verificar si son correctos. Si el acceso es exitoso, debe registrar la fecha y hora del acceso en un archivo de log. Si el acceso falla, debe registrar el intento fallido en el mismo archivo de log. El programa debe definir una funci\u00f3n que realice esta tarea.</p>"}]}